source_file,compiler,ir,ir_flags,asm,asm_flags
source\00001.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00002.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00003.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 4, i32* %2, align 4, !dbg !14
  %3 = load i32, i32* %2, align 4, !dbg !15
  %4 = sub nsw i32 %3, 4, !dbg !16
  ret i32 %4, !dbg !17
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 4
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 4
        pop     rbp
        ret
",-Wall
source\00004.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32** %3, metadata !14, metadata !DIExpression()), !dbg !16
  store i32 4, i32* %2, align 4, !dbg !17
  store i32* %2, i32** %3, align 8, !dbg !18
  %4 = load i32*, i32** %3, align 8, !dbg !19
  store i32 0, i32* %4, align 4, !dbg !20
  %5 = load i32*, i32** %3, align 8, !dbg !21
  %6 = load i32, i32* %5, align 4, !dbg !22
  ret i32 %6, !dbg !23
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 4
        lea     rax, [rbp - 8]
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        mov     dword ptr [rax], 0
        mov     rax, qword ptr [rbp - 16]
        mov     eax, dword ptr [rax]
        pop     rbp
        ret
",-Wall
source\00005.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca i32**, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32** %3, metadata !14, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32*** %4, metadata !17, metadata !DIExpression()), !dbg !19
  store i32 0, i32* %2, align 4, !dbg !20
  store i32* %2, i32** %3, align 8, !dbg !21
  store i32** %3, i32*** %4, align 8, !dbg !22
  %5 = load i32*, i32** %3, align 8, !dbg !23
  %6 = load i32, i32* %5, align 4, !dbg !25
  %7 = icmp ne i32 %6, 0, !dbg !25
  br i1 %7, label %8, label %9, !dbg !26

8:
  store i32 1, i32* %1, align 4, !dbg !27
  br label %23, !dbg !27

9:
  %10 = load i32**, i32*** %4, align 8, !dbg !28
  %11 = load i32*, i32** %10, align 8, !dbg !30
  %12 = load i32, i32* %11, align 4, !dbg !31
  %13 = icmp ne i32 %12, 0, !dbg !31
  br i1 %13, label %14, label %15, !dbg !32

14:
  store i32 1, i32* %1, align 4, !dbg !33
  br label %23, !dbg !33

15:
  %16 = load i32**, i32*** %4, align 8, !dbg !34
  %17 = load i32*, i32** %16, align 8, !dbg !35
  store i32 1, i32* %17, align 4, !dbg !36
  br label %18

18:
  %19 = load i32, i32* %2, align 4, !dbg !37
  %20 = icmp ne i32 %19, 0, !dbg !37
  br i1 %20, label %21, label %22, !dbg !39

21:
  store i32 0, i32* %1, align 4, !dbg !40
  br label %23, !dbg !40

22:
  store i32 1, i32* %1, align 4, !dbg !41
  br label %23, !dbg !41

23:
  %24 = load i32, i32* %1, align 4, !dbg !42
  ret i32 %24, !dbg !42
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        lea     rax, [rbp - 8]
        mov     qword ptr [rbp - 16], rax
        lea     rax, [rbp - 16]
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 16]
        cmp     dword ptr [rax], 0
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_8
.LBB0_2:
        mov     rax, qword ptr [rbp - 24]
        mov     rax, qword ptr [rax]
        cmp     dword ptr [rax], 0
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_8
.LBB0_4:
        mov     rax, qword ptr [rbp - 24]
        mov     rax, qword ptr [rax]
        mov     dword ptr [rax], 1
        cmp     dword ptr [rbp - 8], 0
        je      .LBB0_7
        mov     dword ptr [rbp - 4], 0
        jmp     .LBB0_8
.LBB0_7:
        mov     dword ptr [rbp - 4], 1
.LBB0_8:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00006.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 50, i32* %2, align 4, !dbg !14
  br label %3, !dbg !15

3:
  %4 = load i32, i32* %2, align 4, !dbg !16
  %5 = icmp ne i32 %4, 0, !dbg !16
  br i1 %5, label %6, label %9, !dbg !15

6:
  %7 = load i32, i32* %2, align 4, !dbg !17
  %8 = sub nsw i32 %7, 1, !dbg !18
  store i32 %8, i32* %2, align 4, !dbg !19
  br label %3, !dbg !15

9:
  %10 = load i32, i32* %2, align 4, !dbg !22
  ret i32 %10, !dbg !23
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 50
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 0
        je      .LBB0_3
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_3:
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00007.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 1, i32* %2, align 4, !dbg !14
  store i32 10, i32* %2, align 4, !dbg !15
  br label %3, !dbg !17

3:
  %4 = load i32, i32* %2, align 4, !dbg !18
  %5 = icmp ne i32 %4, 0, !dbg !18
  br i1 %5, label %6, label %10, !dbg !20

6:
  br label %7, !dbg !20

7:
  %8 = load i32, i32* %2, align 4, !dbg !21
  %9 = sub nsw i32 %8, 1, !dbg !22
  store i32 %9, i32* %2, align 4, !dbg !23
  br label %3, !dbg !24

10:
  %11 = load i32, i32* %2, align 4, !dbg !27
  %12 = icmp ne i32 %11, 0, !dbg !27
  br i1 %12, label %13, label %14, !dbg !29

13:
  store i32 1, i32* %1, align 4, !dbg !30
  br label %23, !dbg !30

14:
  store i32 10, i32* %2, align 4, !dbg !31
  br label %15, !dbg !32

15:
  %16 = load i32, i32* %2, align 4, !dbg !33
  %17 = icmp ne i32 %16, 0, !dbg !33
  br i1 %17, label %18, label %21, !dbg !36

18:
  %19 = load i32, i32* %2, align 4, !dbg !37
  %20 = sub nsw i32 %19, 1, !dbg !38
  store i32 %20, i32* %2, align 4, !dbg !39
  br label %15, !dbg !40

21:
  %22 = load i32, i32* %2, align 4, !dbg !43
  store i32 %22, i32* %1, align 4, !dbg !44
  br label %23, !dbg !44

23:
  %24 = load i32, i32* %1, align 4, !dbg !45
  ret i32 %24, !dbg !45
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     dword ptr [rbp - 8], 10
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 0
        je      .LBB0_4
        jmp     .LBB0_3
.LBB0_3:                                #   in Loop: Header=BB0_1 Depth=1
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_4:
        cmp     dword ptr [rbp - 8], 0
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_10
.LBB0_6:
        mov     dword ptr [rbp - 8], 10
.LBB0_7:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 0
        je      .LBB0_9
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_7
.LBB0_9:
        mov     eax, dword ptr [rbp - 8]
        mov     dword ptr [rbp - 4], eax
.LBB0_10:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00008.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 50, i32* %2, align 4, !dbg !14
  br label %3, !dbg !15

3:
  %4 = load i32, i32* %2, align 4, !dbg !16
  %5 = sub nsw i32 %4, 1, !dbg !17
  store i32 %5, i32* %2, align 4, !dbg !18
  br label %6, !dbg !19

6:
  %7 = load i32, i32* %2, align 4, !dbg !20
  %8 = icmp ne i32 %7, 0, !dbg !20
  br i1 %8, label %3, label %9, !dbg !19

9:
  %10 = load i32, i32* %2, align 4, !dbg !23
  ret i32 %10, !dbg !24
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 50
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 1
        mov     dword ptr [rbp - 8], eax
        cmp     dword ptr [rbp - 8], 0
        jne     .LBB0_1
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00009.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 1, i32* %2, align 4, !dbg !14
  %3 = load i32, i32* %2, align 4, !dbg !15
  %4 = mul nsw i32 %3, 10, !dbg !16
  store i32 %4, i32* %2, align 4, !dbg !17
  %5 = load i32, i32* %2, align 4, !dbg !18
  %6 = sdiv i32 %5, 2, !dbg !19
  store i32 %6, i32* %2, align 4, !dbg !20
  %7 = load i32, i32* %2, align 4, !dbg !21
  %8 = srem i32 %7, 3, !dbg !22
  store i32 %8, i32* %2, align 4, !dbg !23
  %9 = load i32, i32* %2, align 4, !dbg !24
  %10 = sub nsw i32 %9, 2, !dbg !25
  ret i32 %10, !dbg !26
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        imul    eax, dword ptr [rbp - 8], 10
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        cdq
        mov     ecx, 2
        idiv    ecx
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        cdq
        mov     ecx, 3
        idiv    ecx
        mov     dword ptr [rbp - 8], edx
        mov     ecx, dword ptr [rbp - 8]
        sub     ecx, 2
        mov     eax, ecx
        pop     rbp
        ret
",-Wall
source\00010.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  br label %2, !dbg !12

2:
  call void @llvm.dbg.label(metadata !13), !dbg !14
  br label %4, !dbg !15

3:
  call void @llvm.dbg.label(metadata !16), !dbg !17
  ret i32 0, !dbg !18

4:
  call void @llvm.dbg.label(metadata !19), !dbg !20
  br label %5, !dbg !18

5:
  call void @llvm.dbg.label(metadata !21), !dbg !22
  br label %3, !dbg !23
}

declare void @llvm.dbg.label(metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        jmp     .LBB0_3
.LBB0_2:
        xor     eax, eax
        pop     rbp
        ret
.LBB0_3:
        jmp     .LBB0_4
.LBB0_4:
        jmp     .LBB0_2
Standard error:
[1m<source>:4:2: [0m[0;1;35mwarning: [0m[1munused label 'start' [-Wunused-label][0m
        start:
[0;1;32m        ^~~~~~
[0m[1m<source>:10:2: [0m[0;1;35mwarning: [0m[1munused label 'foo' [-Wunused-label][0m
        foo:
[0;1;32m        ^~~~
[0m2 warnings generated.
",-Wall
source\00011.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 0, i32* %3, align 4, !dbg !16
  store i32 0, i32* %2, align 4, !dbg !17
  %4 = load i32, i32* %2, align 4, !dbg !18
  ret i32 %4, !dbg !19
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 12], 0
        mov     dword ptr [rbp - 8], 0
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00012.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00013.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32** %3, metadata !14, metadata !DIExpression()), !dbg !16
  store i32 0, i32* %2, align 4, !dbg !17
  store i32* %2, i32** %3, align 8, !dbg !18
  %4 = load i32*, i32** %3, align 8, !dbg !19
  %5 = getelementptr inbounds i32, i32* %4, i64 0, !dbg !19
  %6 = load i32, i32* %5, align 4, !dbg !19
  ret i32 %6, !dbg !20
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        lea     rax, [rbp - 8]
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        mov     eax, dword ptr [rax]
        pop     rbp
        ret
",-Wall
source\00014.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32** %3, metadata !14, metadata !DIExpression()), !dbg !16
  store i32 1, i32* %2, align 4, !dbg !17
  store i32* %2, i32** %3, align 8, !dbg !18
  %4 = load i32*, i32** %3, align 8, !dbg !19
  %5 = getelementptr inbounds i32, i32* %4, i64 0, !dbg !19
  store i32 0, i32* %5, align 4, !dbg !20
  %6 = load i32, i32* %2, align 4, !dbg !21
  ret i32 %6, !dbg !22
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        lea     rax, [rbp - 8]
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        mov     dword ptr [rax], 0
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00015.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [2 x i32], align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [2 x i32]* %2, metadata !12, metadata !DIExpression()), !dbg !16
  %3 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0, !dbg !17
  store i32 1, i32* %3, align 4, !dbg !18
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !19
  store i32 2, i32* %4, align 4, !dbg !20
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0, !dbg !21
  %6 = load i32, i32* %5, align 4, !dbg !21
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !22
  %8 = load i32, i32* %7, align 4, !dbg !22
  %9 = add nsw i32 %6, %8, !dbg !23
  %10 = sub nsw i32 %9, 3, !dbg !24
  ret i32 %10, !dbg !25
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 12], 1
        mov     dword ptr [rbp - 8], 2
        mov     eax, dword ptr [rbp - 12]
        add     eax, dword ptr [rbp - 8]
        sub     eax, 3
        pop     rbp
        ret
",-Wall
source\00016.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [2 x i32], align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [2 x i32]* %2, metadata !12, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32** %3, metadata !17, metadata !DIExpression()), !dbg !19
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !20
  store i32* %4, i32** %3, align 8, !dbg !21
  %5 = load i32*, i32** %3, align 8, !dbg !22
  store i32 0, i32* %5, align 4, !dbg !23
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !24
  %7 = load i32, i32* %6, align 4, !dbg !24
  ret i32 %7, !dbg !25
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        lea     rax, [rbp - 12]
        add     rax, 4
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     dword ptr [rax], 0
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00017.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.anon = type { i32, i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.anon, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.anon* %2, metadata !12, metadata !DIExpression()), !dbg !17
  %3 = getelementptr inbounds %struct.anon, %struct.anon* %2, i32 0, i32 0, !dbg !18
  store i32 3, i32* %3, align 4, !dbg !19
  %4 = getelementptr inbounds %struct.anon, %struct.anon* %2, i32 0, i32 1, !dbg !20
  store i32 5, i32* %4, align 4, !dbg !21
  %5 = getelementptr inbounds %struct.anon, %struct.anon* %2, i32 0, i32 1, !dbg !22
  %6 = load i32, i32* %5, align 4, !dbg !22
  %7 = getelementptr inbounds %struct.anon, %struct.anon* %2, i32 0, i32 0, !dbg !23
  %8 = load i32, i32* %7, align 4, !dbg !23
  %9 = sub nsw i32 %6, %8, !dbg !24
  %10 = sub nsw i32 %9, 2, !dbg !25
  ret i32 %10, !dbg !26
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 16], 3
        mov     dword ptr [rbp - 12], 5
        mov     eax, dword ptr [rbp - 12]
        sub     eax, dword ptr [rbp - 16]
        sub     eax, 2
        pop     rbp
        ret
",-Wall
source\00018.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { i32, i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.S, align 4
  %3 = alloca %struct.S*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.S* %2, metadata !12, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata %struct.S** %3, metadata !18, metadata !DIExpression()), !dbg !20
  store %struct.S* %2, %struct.S** %3, align 8, !dbg !21
  %4 = getelementptr inbounds %struct.S, %struct.S* %2, i32 0, i32 0, !dbg !22
  store i32 1, i32* %4, align 4, !dbg !23
  %5 = load %struct.S*, %struct.S** %3, align 8, !dbg !24
  %6 = getelementptr inbounds %struct.S, %struct.S* %5, i32 0, i32 1, !dbg !25
  store i32 2, i32* %6, align 4, !dbg !26
  %7 = load %struct.S*, %struct.S** %3, align 8, !dbg !27
  %8 = getelementptr inbounds %struct.S, %struct.S* %7, i32 0, i32 1, !dbg !28
  %9 = load i32, i32* %8, align 4, !dbg !28
  %10 = load %struct.S*, %struct.S** %3, align 8, !dbg !29
  %11 = getelementptr inbounds %struct.S, %struct.S* %10, i32 0, i32 0, !dbg !30
  %12 = load i32, i32* %11, align 4, !dbg !30
  %13 = add nsw i32 %9, %12, !dbg !31
  %14 = sub nsw i32 %13, 3, !dbg !32
  ret i32 %14, !dbg !33
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        lea     rax, [rbp - 16]
        mov     qword ptr [rbp - 24], rax
        mov     dword ptr [rbp - 16], 1
        mov     rax, qword ptr [rbp - 24]
        mov     dword ptr [rax + 4], 2
        mov     rax, qword ptr [rbp - 24]
        mov     ecx, dword ptr [rax + 4]
        mov     rax, qword ptr [rbp - 24]
        add     ecx, dword ptr [rax]
        sub     ecx, 3
        mov     eax, ecx
        pop     rbp
        ret
",-Wall
source\00019.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { %struct.S*, i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.S, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.S* %2, metadata !12, metadata !DIExpression()), !dbg !18
  %3 = getelementptr inbounds %struct.S, %struct.S* %2, i32 0, i32 1, !dbg !19
  store i32 0, i32* %3, align 8, !dbg !20
  %4 = getelementptr inbounds %struct.S, %struct.S* %2, i32 0, i32 0, !dbg !21
  store %struct.S* %2, %struct.S** %4, align 8, !dbg !22
  %5 = getelementptr inbounds %struct.S, %struct.S* %2, i32 0, i32 0, !dbg !23
  %6 = load %struct.S*, %struct.S** %5, align 8, !dbg !23
  %7 = getelementptr inbounds %struct.S, %struct.S* %6, i32 0, i32 0, !dbg !24
  %8 = load %struct.S*, %struct.S** %7, align 8, !dbg !24
  %9 = getelementptr inbounds %struct.S, %struct.S* %8, i32 0, i32 0, !dbg !25
  %10 = load %struct.S*, %struct.S** %9, align 8, !dbg !25
  %11 = getelementptr inbounds %struct.S, %struct.S* %10, i32 0, i32 0, !dbg !26
  %12 = load %struct.S*, %struct.S** %11, align 8, !dbg !26
  %13 = getelementptr inbounds %struct.S, %struct.S* %12, i32 0, i32 0, !dbg !27
  %14 = load %struct.S*, %struct.S** %13, align 8, !dbg !27
  %15 = getelementptr inbounds %struct.S, %struct.S* %14, i32 0, i32 1, !dbg !28
  %16 = load i32, i32* %15, align 8, !dbg !28
  ret i32 %16, !dbg !29
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 16], 0
        lea     rax, [rbp - 24]
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     rax, qword ptr [rax]
        mov     rax, qword ptr [rax]
        mov     rax, qword ptr [rax]
        mov     rax, qword ptr [rax]
        mov     eax, dword ptr [rax + 8]
        pop     rbp
        ret
",-Wall
source\00020.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca i32**, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32** %3, metadata !14, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32*** %4, metadata !17, metadata !DIExpression()), !dbg !19
  store i32 0, i32* %2, align 4, !dbg !20
  store i32* %2, i32** %3, align 8, !dbg !21
  store i32** %3, i32*** %4, align 8, !dbg !22
  %5 = load i32**, i32*** %4, align 8, !dbg !23
  %6 = load i32*, i32** %5, align 8, !dbg !24
  %7 = load i32, i32* %6, align 4, !dbg !25
  ret i32 %7, !dbg !26
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        lea     rax, [rbp - 8]
        mov     qword ptr [rbp - 16], rax
        lea     rax, [rbp - 16]
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     rax, qword ptr [rax]
        mov     eax, dword ptr [rax]
        pop     rbp
        ret
",-Wall
source\00021.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @foo(int, int)(i32 %0, i32 %1) #0 !dbg !7 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !14, metadata !DIExpression()), !dbg !15
  %5 = load i32, i32* %3, align 4, !dbg !16
  %6 = add nsw i32 2, %5, !dbg !17
  %7 = load i32, i32* %4, align 4, !dbg !18
  %8 = sub nsw i32 %6, %7, !dbg !19
  ret i32 %8, !dbg !20
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 @main() #2 !dbg !21 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @foo(int, int)(i32 1, i32 3), !dbg !24
  ret i32 %2, !dbg !25
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
foo(int, int):                               # @foo(int, int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     dword ptr [rbp - 8], esi
        mov     eax, dword ptr [rbp - 4]
        add     eax, 2
        sub     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     edi, 1
        mov     esi, 3
        call    foo(int, int)
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00022.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !14
  store i32 0, i32* %2, align 4, !dbg !15
  %3 = load i32, i32* %2, align 4, !dbg !16
  ret i32 %3, !dbg !17
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00023.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* @x, align 4, !dbg !15
  %2 = load i32, i32* @x, align 4, !dbg !16
  ret i32 %2, !dbg !17
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [x], 0
        mov     eax, dword ptr [x]
        pop     rbp
        ret
x:
        .long   0                       # 0x0

",-Wall
source\00024.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.s = type { i32, i32 }

@v = dso_local global %struct.s zeroinitializer, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !17 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* getelementptr inbounds (%struct.s, %struct.s* @v, i32 0, i32 0), align 4, !dbg !20
  store i32 2, i32* getelementptr inbounds (%struct.s, %struct.s* @v, i32 0, i32 1), align 4, !dbg !21
  %2 = load i32, i32* getelementptr inbounds (%struct.s, %struct.s* @v, i32 0, i32 0), align 4, !dbg !22
  %3 = sub nsw i32 3, %2, !dbg !23
  %4 = load i32, i32* getelementptr inbounds (%struct.s, %struct.s* @v, i32 0, i32 1), align 4, !dbg !24
  %5 = sub nsw i32 %3, %4, !dbg !25
  ret i32 %5, !dbg !26
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [v], 1
        mov     dword ptr [v+4], 2
        mov     eax, 3
        sub     eax, dword ptr [v]
        sub     eax, dword ptr [v+4]
        pop     rbp
        ret
v:
        .zero   8

",-Wall
source\00025.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [6 x i8] c""hello\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8** %2, metadata !12, metadata !DIExpression()), !dbg !15
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** %2, align 8, !dbg !16
  %3 = load i8*, i8** %2, align 8, !dbg !17
  %4 = call i32 @strlen(char*)(i8* %3), !dbg !18
  %5 = sub nsw i32 %4, 5, !dbg !19
  ret i32 %5, !dbg !20
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @strlen(char*)(i8*) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:8:6: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        p = ""hello"";
[0;1;32m            ^
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        movabs  rax, offset .L.str
        mov     qword ptr [rbp - 16], rax
        mov     rdi, qword ptr [rbp - 16]
        call    strlen(char*)
        sub     eax, 5
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""hello""

Standard error:
[1m<source>:8:6: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        p = ""hello"";
[0;1;32m            ^
[0m1 warning generated.
",-Wall
source\00026.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [6 x i8] c""hello\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8** %2, metadata !12, metadata !DIExpression()), !dbg !15
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** %2, align 8, !dbg !16
  %3 = load i8*, i8** %2, align 8, !dbg !17
  %4 = getelementptr inbounds i8, i8* %3, i64 0, !dbg !17
  %5 = load i8, i8* %4, align 1, !dbg !17
  %6 = sext i8 %5 to i32, !dbg !17
  %7 = sub nsw i32 %6, 104, !dbg !18
  ret i32 %7, !dbg !19
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

Standard error:
[1m<source>:6:6: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        p = ""hello"";
[0;1;32m            ^
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        movabs  rax, offset .L.str
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        movsx   ecx, byte ptr [rax]
        sub     ecx, 104
        mov     eax, ecx
        pop     rbp
        ret
.L.str:
        .asciz  ""hello""

Standard error:
[1m<source>:6:6: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        p = ""hello"";
[0;1;32m            ^
[0m1 warning generated.
",-Wall
source\00027.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 1, i32* %2, align 4, !dbg !14
  %3 = load i32, i32* %2, align 4, !dbg !15
  %4 = or i32 %3, 4, !dbg !16
  store i32 %4, i32* %2, align 4, !dbg !17
  %5 = load i32, i32* %2, align 4, !dbg !18
  %6 = sub nsw i32 %5, 5, !dbg !19
  ret i32 %6, !dbg !20
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     eax, dword ptr [rbp - 8]
        or      eax, 4
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 5
        pop     rbp
        ret
",-Wall
source\00028.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 1, i32* %2, align 4, !dbg !14
  %3 = load i32, i32* %2, align 4, !dbg !15
  %4 = and i32 %3, 3, !dbg !16
  store i32 %4, i32* %2, align 4, !dbg !17
  %5 = load i32, i32* %2, align 4, !dbg !18
  %6 = sub nsw i32 %5, 1, !dbg !19
  ret i32 %6, !dbg !20
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     eax, dword ptr [rbp - 8]
        and     eax, 3
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 1
        pop     rbp
        ret
",-Wall
source\00029.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 1, i32* %2, align 4, !dbg !14
  %3 = load i32, i32* %2, align 4, !dbg !15
  %4 = xor i32 %3, 3, !dbg !16
  store i32 %4, i32* %2, align 4, !dbg !17
  %5 = load i32, i32* %2, align 4, !dbg !18
  %6 = sub nsw i32 %5, 2, !dbg !19
  ret i32 %6, !dbg !20
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     eax, dword ptr [rbp - 8]
        xor     eax, 3
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 2
        pop     rbp
        ret
",-Wall
source\00030.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @f()() #0 !dbg !7 {
  ret i32 100, !dbg !12
}

define dso_local i32 @main() #1 !dbg !13 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @f()(), !dbg !14
  %3 = icmp sgt i32 %2, 1000, !dbg !16
  br i1 %3, label %4, label %5, !dbg !17

4:
  store i32 1, i32* %1, align 4, !dbg !18
  br label %26, !dbg !18

5:
  %6 = call i32 @f()(), !dbg !19
  %7 = icmp sge i32 %6, 1000, !dbg !21
  br i1 %7, label %8, label %9, !dbg !22

8:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %26, !dbg !23

9:
  %10 = call i32 @f()(), !dbg !24
  %11 = icmp slt i32 1000, %10, !dbg !26
  br i1 %11, label %12, label %13, !dbg !27

12:
  store i32 1, i32* %1, align 4, !dbg !28
  br label %26, !dbg !28

13:
  %14 = call i32 @f()(), !dbg !29
  %15 = icmp sle i32 1000, %14, !dbg !31
  br i1 %15, label %16, label %17, !dbg !32

16:
  store i32 1, i32* %1, align 4, !dbg !33
  br label %26, !dbg !33

17:
  %18 = call i32 @f()(), !dbg !34
  %19 = icmp eq i32 1000, %18, !dbg !36
  br i1 %19, label %20, label %21, !dbg !37

20:
  store i32 1, i32* %1, align 4, !dbg !38
  br label %26, !dbg !38

21:
  %22 = call i32 @f()(), !dbg !39
  %23 = icmp ne i32 100, %22, !dbg !41
  br i1 %23, label %24, label %25, !dbg !42

24:
  store i32 1, i32* %1, align 4, !dbg !43
  br label %26, !dbg !43

25:
  store i32 0, i32* %1, align 4, !dbg !44
  br label %26, !dbg !44

26:
  %27 = load i32, i32* %1, align 4, !dbg !45
  ret i32 %27, !dbg !45
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
f():                                  # @f()
        push    rbp
        mov     rbp, rsp
        mov     eax, 100
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        call    f()
        cmp     eax, 1000
        jle     .LBB1_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_13
.LBB1_2:
        call    f()
        cmp     eax, 1000
        jl      .LBB1_4
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_13
.LBB1_4:
        call    f()
        mov     ecx, 1000
        cmp     ecx, eax
        jge     .LBB1_6
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_13
.LBB1_6:
        call    f()
        mov     ecx, 1000
        cmp     ecx, eax
        jg      .LBB1_8
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_13
.LBB1_8:
        call    f()
        mov     ecx, 1000
        cmp     ecx, eax
        jne     .LBB1_10
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_13
.LBB1_10:
        call    f()
        mov     ecx, 100
        cmp     ecx, eax
        je      .LBB1_12
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_13
.LBB1_12:
        mov     dword ptr [rbp - 4], 0
.LBB1_13:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00031.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @zero()() #0 !dbg !7 {
  ret i32 0, !dbg !12
}

define dso_local i32 @one()() #0 !dbg !13 {
  ret i32 1, !dbg !14
}

define dso_local i32 @main() #1 !dbg !15 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata i32* %3, metadata !18, metadata !DIExpression()), !dbg !19
  %4 = call i32 @zero()(), !dbg !20
  store i32 %4, i32* %2, align 4, !dbg !21
  %5 = load i32, i32* %2, align 4, !dbg !22
  %6 = add nsw i32 %5, 1, !dbg !22
  store i32 %6, i32* %2, align 4, !dbg !22
  store i32 %6, i32* %3, align 4, !dbg !23
  %7 = load i32, i32* %2, align 4, !dbg !24
  %8 = icmp ne i32 %7, 1, !dbg !26
  br i1 %8, label %9, label %10, !dbg !27

9:
  store i32 1, i32* %1, align 4, !dbg !28
  br label %48, !dbg !28

10:
  %11 = load i32, i32* %3, align 4, !dbg !29
  %12 = icmp ne i32 %11, 1, !dbg !31
  br i1 %12, label %13, label %14, !dbg !32

13:
  store i32 1, i32* %1, align 4, !dbg !33
  br label %48, !dbg !33

14:
  %15 = call i32 @one()(), !dbg !34
  store i32 %15, i32* %2, align 4, !dbg !35
  %16 = load i32, i32* %2, align 4, !dbg !36
  %17 = add nsw i32 %16, -1, !dbg !36
  store i32 %17, i32* %2, align 4, !dbg !36
  store i32 %17, i32* %3, align 4, !dbg !37
  %18 = load i32, i32* %2, align 4, !dbg !38
  %19 = icmp ne i32 %18, 0, !dbg !40
  br i1 %19, label %20, label %21, !dbg !41

20:
  store i32 1, i32* %1, align 4, !dbg !42
  br label %48, !dbg !42

21:
  %22 = load i32, i32* %3, align 4, !dbg !43
  %23 = icmp ne i32 %22, 0, !dbg !45
  br i1 %23, label %24, label %25, !dbg !46

24:
  store i32 1, i32* %1, align 4, !dbg !47
  br label %48, !dbg !47

25:
  %26 = call i32 @zero()(), !dbg !48
  store i32 %26, i32* %2, align 4, !dbg !49
  %27 = load i32, i32* %2, align 4, !dbg !50
  %28 = add nsw i32 %27, 1, !dbg !50
  store i32 %28, i32* %2, align 4, !dbg !50
  store i32 %27, i32* %3, align 4, !dbg !51
  %29 = load i32, i32* %2, align 4, !dbg !52
  %30 = icmp ne i32 %29, 1, !dbg !54
  br i1 %30, label %31, label %32, !dbg !55

31:
  store i32 1, i32* %1, align 4, !dbg !56
  br label %48, !dbg !56

32:
  %33 = load i32, i32* %3, align 4, !dbg !57
  %34 = icmp ne i32 %33, 0, !dbg !59
  br i1 %34, label %35, label %36, !dbg !60

35:
  store i32 1, i32* %1, align 4, !dbg !61
  br label %48, !dbg !61

36:
  %37 = call i32 @one()(), !dbg !62
  store i32 %37, i32* %2, align 4, !dbg !63
  %38 = load i32, i32* %2, align 4, !dbg !64
  %39 = add nsw i32 %38, -1, !dbg !64
  store i32 %39, i32* %2, align 4, !dbg !64
  store i32 %38, i32* %3, align 4, !dbg !65
  %40 = load i32, i32* %2, align 4, !dbg !66
  %41 = icmp ne i32 %40, 0, !dbg !68
  br i1 %41, label %42, label %43, !dbg !69

42:
  store i32 1, i32* %1, align 4, !dbg !70
  br label %48, !dbg !70

43:
  %44 = load i32, i32* %3, align 4, !dbg !71
  %45 = icmp ne i32 %44, 1, !dbg !73
  br i1 %45, label %46, label %47, !dbg !74

46:
  store i32 1, i32* %1, align 4, !dbg !75
  br label %48, !dbg !75

47:
  store i32 0, i32* %1, align 4, !dbg !76
  br label %48, !dbg !76

48:
  %49 = load i32, i32* %1, align 4, !dbg !77
  ret i32 %49, !dbg !77
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
zero():                               # @zero()
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        pop     rbp
        ret
one():                                # @one()
        push    rbp
        mov     rbp, rsp
        mov     eax, 1
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        call    zero()
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        mov     dword ptr [rbp - 12], eax
        cmp     dword ptr [rbp - 8], 1
        je      .LBB2_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_17
.LBB2_2:
        cmp     dword ptr [rbp - 12], 1
        je      .LBB2_4
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_17
.LBB2_4:
        call    one()
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        add     eax, -1
        mov     dword ptr [rbp - 8], eax
        mov     dword ptr [rbp - 12], eax
        cmp     dword ptr [rbp - 8], 0
        je      .LBB2_6
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_17
.LBB2_6:
        cmp     dword ptr [rbp - 12], 0
        je      .LBB2_8
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_17
.LBB2_8:
        call    zero()
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        mov     ecx, eax
        add     ecx, 1
        mov     dword ptr [rbp - 8], ecx
        mov     dword ptr [rbp - 12], eax
        cmp     dword ptr [rbp - 8], 1
        je      .LBB2_10
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_17
.LBB2_10:
        cmp     dword ptr [rbp - 12], 0
        je      .LBB2_12
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_17
.LBB2_12:
        call    one()
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        mov     ecx, eax
        add     ecx, -1
        mov     dword ptr [rbp - 8], ecx
        mov     dword ptr [rbp - 12], eax
        cmp     dword ptr [rbp - 8], 0
        je      .LBB2_14
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_17
.LBB2_14:
        cmp     dword ptr [rbp - 12], 1
        je      .LBB2_16
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_17
.LBB2_16:
        mov     dword ptr [rbp - 4], 0
.LBB2_17:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00032.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [2 x i32], align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [2 x i32]* %2, metadata !12, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32** %3, metadata !17, metadata !DIExpression()), !dbg !19
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0, !dbg !20
  store i32 2, i32* %4, align 4, !dbg !21
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !22
  store i32 3, i32* %5, align 4, !dbg !23
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0, !dbg !24
  store i32* %6, i32** %3, align 8, !dbg !25
  %7 = load i32*, i32** %3, align 8, !dbg !26
  %8 = getelementptr inbounds i32, i32* %7, i32 1, !dbg !26
  store i32* %8, i32** %3, align 8, !dbg !26
  %9 = load i32, i32* %7, align 4, !dbg !28
  %10 = icmp ne i32 %9, 2, !dbg !29
  br i1 %10, label %11, label %12, !dbg !30

11:
  store i32 1, i32* %1, align 4, !dbg !31
  br label %46, !dbg !31

12:
  %13 = load i32*, i32** %3, align 8, !dbg !32
  %14 = getelementptr inbounds i32, i32* %13, i32 1, !dbg !32
  store i32* %14, i32** %3, align 8, !dbg !32
  %15 = load i32, i32* %13, align 4, !dbg !34
  %16 = icmp ne i32 %15, 3, !dbg !35
  br i1 %16, label %17, label %18, !dbg !36

17:
  store i32 2, i32* %1, align 4, !dbg !37
  br label %46, !dbg !37

18:
  %19 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !38
  store i32* %19, i32** %3, align 8, !dbg !39
  %20 = load i32*, i32** %3, align 8, !dbg !40
  %21 = getelementptr inbounds i32, i32* %20, i32 -1, !dbg !40
  store i32* %21, i32** %3, align 8, !dbg !40
  %22 = load i32, i32* %20, align 4, !dbg !42
  %23 = icmp ne i32 %22, 3, !dbg !43
  br i1 %23, label %24, label %25, !dbg !44

24:
  store i32 1, i32* %1, align 4, !dbg !45
  br label %46, !dbg !45

25:
  %26 = load i32*, i32** %3, align 8, !dbg !46
  %27 = getelementptr inbounds i32, i32* %26, i32 -1, !dbg !46
  store i32* %27, i32** %3, align 8, !dbg !46
  %28 = load i32, i32* %26, align 4, !dbg !48
  %29 = icmp ne i32 %28, 2, !dbg !49
  br i1 %29, label %30, label %31, !dbg !50

30:
  store i32 2, i32* %1, align 4, !dbg !51
  br label %46, !dbg !51

31:
  %32 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0, !dbg !52
  store i32* %32, i32** %3, align 8, !dbg !53
  %33 = load i32*, i32** %3, align 8, !dbg !54
  %34 = getelementptr inbounds i32, i32* %33, i32 1, !dbg !54
  store i32* %34, i32** %3, align 8, !dbg !54
  %35 = load i32, i32* %34, align 4, !dbg !56
  %36 = icmp ne i32 %35, 3, !dbg !57
  br i1 %36, label %37, label %38, !dbg !58

37:
  store i32 1, i32* %1, align 4, !dbg !59
  br label %46, !dbg !59

38:
  %39 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !60
  store i32* %39, i32** %3, align 8, !dbg !61
  %40 = load i32*, i32** %3, align 8, !dbg !62
  %41 = getelementptr inbounds i32, i32* %40, i32 -1, !dbg !62
  store i32* %41, i32** %3, align 8, !dbg !62
  %42 = load i32, i32* %41, align 4, !dbg !64
  %43 = icmp ne i32 %42, 2, !dbg !65
  br i1 %43, label %44, label %45, !dbg !66

44:
  store i32 1, i32* %1, align 4, !dbg !67
  br label %46, !dbg !67

45:
  store i32 0, i32* %1, align 4, !dbg !68
  br label %46, !dbg !68

46:
  %47 = load i32, i32* %1, align 4, !dbg !69
  ret i32 %47, !dbg !69
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        lea     rax, [rbp - 12]
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 12], 2
        mov     dword ptr [rbp - 8], 3
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 4
        mov     qword ptr [rbp - 24], rcx
        cmp     dword ptr [rax], 2
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_13
.LBB0_2:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 4
        mov     qword ptr [rbp - 24], rcx
        cmp     dword ptr [rax], 3
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_13
.LBB0_4:
        lea     rax, [rbp - 12]
        add     rax, 4
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, -4
        mov     qword ptr [rbp - 24], rcx
        cmp     dword ptr [rax], 3
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_13
.LBB0_6:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, -4
        mov     qword ptr [rbp - 24], rcx
        cmp     dword ptr [rax], 2
        je      .LBB0_8
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_13
.LBB0_8:
        lea     rax, [rbp - 12]
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 4
        mov     qword ptr [rbp - 24], rcx
        cmp     dword ptr [rax + 4], 3
        je      .LBB0_10
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_13
.LBB0_10:
        lea     rax, [rbp - 12]
        add     rax, 4
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, -4
        mov     qword ptr [rbp - 24], rcx
        cmp     dword ptr [rax - 4], 2
        je      .LBB0_12
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_13
.LBB0_12:
        mov     dword ptr [rbp - 4], 0
.LBB0_13:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00033.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@g = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @effect()() #0 !dbg !12 {
  store i32 1, i32* @g, align 4, !dbg !15
  ret i32 1, !dbg !16
}

define dso_local i32 @main() #1 !dbg !17 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 0, i32* @g, align 4, !dbg !20
  store i32 0, i32* %2, align 4, !dbg !21
  %3 = load i32, i32* %2, align 4, !dbg !22
  %4 = icmp ne i32 %3, 0, !dbg !22
  br i1 %4, label %5, label %9, !dbg !24

5:
  %6 = call i32 @effect()(), !dbg !25
  %7 = icmp ne i32 %6, 0, !dbg !25
  br i1 %7, label %8, label %9, !dbg !26

8:
  store i32 1, i32* %1, align 4, !dbg !27
  br label %50, !dbg !27

9:
  %10 = load i32, i32* @g, align 4, !dbg !28
  %11 = icmp ne i32 %10, 0, !dbg !28
  br i1 %11, label %12, label %13, !dbg !30

12:
  store i32 2, i32* %1, align 4, !dbg !31
  br label %50, !dbg !31

13:
  store i32 1, i32* %2, align 4, !dbg !32
  %14 = load i32, i32* %2, align 4, !dbg !33
  %15 = icmp ne i32 %14, 0, !dbg !33
  br i1 %15, label %16, label %24, !dbg !35

16:
  %17 = call i32 @effect()(), !dbg !36
  %18 = icmp ne i32 %17, 0, !dbg !36
  br i1 %18, label %19, label %24, !dbg !37

19:
  %20 = load i32, i32* @g, align 4, !dbg !38
  %21 = icmp ne i32 %20, 1, !dbg !41
  br i1 %21, label %22, label %23, !dbg !42

22:
  store i32 3, i32* %1, align 4, !dbg !43
  br label %50, !dbg !43

23:
  br label %25, !dbg !44

24:
  store i32 4, i32* %1, align 4, !dbg !45
  br label %50, !dbg !45

25:
  store i32 0, i32* @g, align 4, !dbg !47
  store i32 1, i32* %2, align 4, !dbg !48
  %26 = load i32, i32* %2, align 4, !dbg !49
  %27 = icmp ne i32 %26, 0, !dbg !49
  br i1 %27, label %31, label %28, !dbg !51

28:
  %29 = call i32 @effect()(), !dbg !52
  %30 = icmp ne i32 %29, 0, !dbg !52
  br i1 %30, label %31, label %36, !dbg !53

31:
  %32 = load i32, i32* @g, align 4, !dbg !54
  %33 = icmp ne i32 %32, 0, !dbg !54
  br i1 %33, label %34, label %35, !dbg !57

34:
  store i32 5, i32* %1, align 4, !dbg !58
  br label %50, !dbg !58

35:
  br label %37, !dbg !59

36:
  store i32 6, i32* %1, align 4, !dbg !60
  br label %50, !dbg !60

37:
  store i32 0, i32* %2, align 4, !dbg !62
  %38 = load i32, i32* %2, align 4, !dbg !63
  %39 = icmp ne i32 %38, 0, !dbg !63
  br i1 %39, label %43, label %40, !dbg !65

40:
  %41 = call i32 @effect()(), !dbg !66
  %42 = icmp ne i32 %41, 0, !dbg !66
  br i1 %42, label %43, label %48, !dbg !67

43:
  %44 = load i32, i32* @g, align 4, !dbg !68
  %45 = icmp ne i32 %44, 1, !dbg !71
  br i1 %45, label %46, label %47, !dbg !72

46:
  store i32 7, i32* %1, align 4, !dbg !73
  br label %50, !dbg !73

47:
  br label %49, !dbg !74

48:
  store i32 8, i32* %1, align 4, !dbg !75
  br label %50, !dbg !75

49:
  store i32 0, i32* %1, align 4, !dbg !77
  br label %50, !dbg !77

50:
  %51 = load i32, i32* %1, align 4, !dbg !78
  ret i32 %51, !dbg !78
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
effect():                             # @effect()
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [g], 1
        mov     eax, 1
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [g], 0
        mov     dword ptr [rbp - 8], 0
        cmp     dword ptr [rbp - 8], 0
        je      .LBB1_3
        call    effect()
        cmp     eax, 0
        je      .LBB1_3
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_24
.LBB1_3:
        cmp     dword ptr [g], 0
        je      .LBB1_5
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB1_24
.LBB1_5:
        mov     dword ptr [rbp - 8], 1
        cmp     dword ptr [rbp - 8], 0
        je      .LBB1_10
        call    effect()
        cmp     eax, 0
        je      .LBB1_10
        cmp     dword ptr [g], 1
        je      .LBB1_9
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB1_24
.LBB1_9:
        jmp     .LBB1_11
.LBB1_10:
        mov     dword ptr [rbp - 4], 4
        jmp     .LBB1_24
.LBB1_11:
        mov     dword ptr [g], 0
        mov     dword ptr [rbp - 8], 1
        cmp     dword ptr [rbp - 8], 0
        jne     .LBB1_13
        call    effect()
        cmp     eax, 0
        je      .LBB1_16
.LBB1_13:
        cmp     dword ptr [g], 0
        je      .LBB1_15
        mov     dword ptr [rbp - 4], 5
        jmp     .LBB1_24
.LBB1_15:
        jmp     .LBB1_17
.LBB1_16:
        mov     dword ptr [rbp - 4], 6
        jmp     .LBB1_24
.LBB1_17:
        mov     dword ptr [rbp - 8], 0
        cmp     dword ptr [rbp - 8], 0
        jne     .LBB1_19
        call    effect()
        cmp     eax, 0
        je      .LBB1_22
.LBB1_19:
        cmp     dword ptr [g], 1
        je      .LBB1_21
        mov     dword ptr [rbp - 4], 7
        jmp     .LBB1_24
.LBB1_21:
        jmp     .LBB1_23
.LBB1_22:
        mov     dword ptr [rbp - 4], 8
        jmp     .LBB1_24
.LBB1_23:
        mov     dword ptr [rbp - 4], 0
.LBB1_24:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 16
        pop     rbp
        ret
g:
        .long   0                       # 0x0

",-Wall
source\00034.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !14
  br label %3, !dbg !15

3:
  br label %4, !dbg !16

4:
  br label %5, !dbg !17

5:
  %6 = load i32, i32* %2, align 4, !dbg !18
  %7 = icmp eq i32 %6, 5, !dbg !21
  br i1 %7, label %8, label %9, !dbg !22

8:
  br label %12, !dbg !23

9:
  %10 = load i32, i32* %2, align 4, !dbg !25
  %11 = add nsw i32 %10, 1, !dbg !26
  store i32 %11, i32* %2, align 4, !dbg !27
  br label %5, !dbg !28

12:
  br label %13, !dbg !31

13:
  %14 = load i32, i32* %2, align 4, !dbg !32
  %15 = icmp eq i32 %14, 10, !dbg !37
  br i1 %15, label %16, label %17, !dbg !38

16:
  br label %20, !dbg !39

17:
  %18 = load i32, i32* %2, align 4, !dbg !41
  %19 = add nsw i32 %18, 1, !dbg !42
  store i32 %19, i32* %2, align 4, !dbg !43
  br label %13, !dbg !44

20:
  br label %21, !dbg !48

21:
  %22 = load i32, i32* %2, align 4, !dbg !49
  %23 = icmp eq i32 %22, 15, !dbg !52
  br i1 %23, label %24, label %25, !dbg !53

24:
  br label %29, !dbg !54

25:
  %26 = load i32, i32* %2, align 4, !dbg !56
  %27 = add nsw i32 %26, 1, !dbg !57
  store i32 %27, i32* %2, align 4, !dbg !58
  br label %28, !dbg !59

28:
  br i1 true, label %21, label %29, !dbg !60

29:
  %30 = load i32, i32* %2, align 4, !dbg !63
  %31 = sub nsw i32 %30, 15, !dbg !64
  ret i32 %31, !dbg !65
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        jmp     .LBB0_2
.LBB0_2:
        jmp     .LBB0_3
.LBB0_3:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 5
        jne     .LBB0_5
        jmp     .LBB0_6
.LBB0_5:                                #   in Loop: Header=BB0_3 Depth=1
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_3
.LBB0_6:
        jmp     .LBB0_7
.LBB0_7:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 10
        jne     .LBB0_9
        jmp     .LBB0_10
.LBB0_9:                                #   in Loop: Header=BB0_7 Depth=1
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_7
.LBB0_10:
        jmp     .LBB0_11
.LBB0_11:                               # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 15
        jne     .LBB0_13
        jmp     .LBB0_15
.LBB0_13:                               #   in Loop: Header=BB0_11 Depth=1
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        mov     al, 1
        test    al, 1
        jne     .LBB0_11
        jmp     .LBB0_15
.LBB0_15:
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 15
        pop     rbp
        ret
",-Wall
source\00035.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 4, i32* %2, align 4, !dbg !14
  %3 = load i32, i32* %2, align 4, !dbg !15
  %4 = icmp ne i32 %3, 0, !dbg !15
  %5 = xor i1 %4, true, !dbg !17
  %6 = zext i1 %5 to i32, !dbg !17
  %7 = icmp ne i32 %6, 0, !dbg !18
  br i1 %7, label %8, label %9, !dbg !19

8:
  store i32 1, i32* %1, align 4, !dbg !20
  br label %23, !dbg !20

9:
  %10 = load i32, i32* %2, align 4, !dbg !21
  %11 = icmp ne i32 %10, 0, !dbg !21
  %12 = xor i1 %11, true, !dbg !23
  %13 = xor i1 %12, true, !dbg !24
  %14 = zext i1 %13 to i32, !dbg !24
  %15 = icmp ne i32 %14, 1, !dbg !25
  br i1 %15, label %16, label %17, !dbg !26

16:
  store i32 1, i32* %1, align 4, !dbg !27
  br label %23, !dbg !27

17:
  %18 = load i32, i32* %2, align 4, !dbg !28
  %19 = sub nsw i32 0, %18, !dbg !30
  %20 = icmp ne i32 %19, -4, !dbg !31
  br i1 %20, label %21, label %22, !dbg !32

21:
  store i32 1, i32* %1, align 4, !dbg !33
  br label %23, !dbg !33

22:
  store i32 0, i32* %1, align 4, !dbg !34
  br label %23, !dbg !34

23:
  %24 = load i32, i32* %1, align 4, !dbg !35
  ret i32 %24, !dbg !35
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

Standard error:
[1m<source>:7:5: [0m[0;1;35mwarning: [0m[1mlogical not is only applied to the left hand side of this comparison [-Wlogical-not-parentheses][0m
        if(!x != 0)
[0;1;32m           ^  ~~
[0m[1m<source>:7:5: [0m[0;1;30mnote: [0madd parentheses after the '!' to evaluate the comparison first[0m
        if(!x != 0)
[0;1;32m           ^
[0m[0;32m            (     )
[0m[1m<source>:7:5: [0m[0;1;30mnote: [0madd parentheses around left hand side expression to silence this warning[0m
        if(!x != 0)
[0;1;32m           ^
[0m[0;32m           ( )
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 4
        cmp     dword ptr [rbp - 8], 0
        setne   al
        xor     al, -1
        and     al, 1
        movzx   ecx, al
        cmp     ecx, 0
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_2:
        cmp     dword ptr [rbp - 8], 0
        setne   al
        xor     al, -1
        xor     al, -1
        and     al, 1
        movzx   ecx, al
        cmp     ecx, 1
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_4:
        xor     eax, eax
        sub     eax, dword ptr [rbp - 8]
        cmp     eax, -4
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_6:
        mov     dword ptr [rbp - 4], 0
.LBB0_7:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
Standard error:
[1m<source>:7:5: [0m[0;1;35mwarning: [0m[1mlogical not is only applied to the left hand side of this comparison [-Wlogical-not-parentheses][0m
        if(!x != 0)
[0;1;32m           ^  ~~
[0m[1m<source>:7:5: [0m[0;1;30mnote: [0madd parentheses after the '!' to evaluate the comparison first[0m
        if(!x != 0)
[0;1;32m           ^
[0m[0;32m            (     )
[0m[1m<source>:7:5: [0m[0;1;30mnote: [0madd parentheses around left hand side expression to silence this warning[0m
        if(!x != 0)
[0;1;32m           ^
[0m[0;32m           ( )
[0m1 warning generated.
",-Wall
source\00036.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !14
  %3 = load i32, i32* %2, align 4, !dbg !15
  %4 = add nsw i32 %3, 2, !dbg !15
  store i32 %4, i32* %2, align 4, !dbg !15
  %5 = load i32, i32* %2, align 4, !dbg !16
  %6 = add nsw i32 %5, 2, !dbg !16
  store i32 %6, i32* %2, align 4, !dbg !16
  %7 = load i32, i32* %2, align 4, !dbg !17
  %8 = icmp ne i32 %7, 4, !dbg !19
  br i1 %8, label %9, label %10, !dbg !20

9:
  store i32 1, i32* %1, align 4, !dbg !21
  br label %23, !dbg !21

10:
  %11 = load i32, i32* %2, align 4, !dbg !22
  %12 = sub nsw i32 %11, 1, !dbg !22
  store i32 %12, i32* %2, align 4, !dbg !22
  %13 = load i32, i32* %2, align 4, !dbg !23
  %14 = icmp ne i32 %13, 3, !dbg !25
  br i1 %14, label %15, label %16, !dbg !26

15:
  store i32 2, i32* %1, align 4, !dbg !27
  br label %23, !dbg !27

16:
  %17 = load i32, i32* %2, align 4, !dbg !28
  %18 = mul nsw i32 %17, 2, !dbg !28
  store i32 %18, i32* %2, align 4, !dbg !28
  %19 = load i32, i32* %2, align 4, !dbg !29
  %20 = icmp ne i32 %19, 6, !dbg !31
  br i1 %20, label %21, label %22, !dbg !32

21:
  store i32 3, i32* %1, align 4, !dbg !33
  br label %23, !dbg !33

22:
  store i32 0, i32* %1, align 4, !dbg !34
  br label %23, !dbg !34

23:
  %24 = load i32, i32* %1, align 4, !dbg !35
  ret i32 %24, !dbg !35
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     eax, dword ptr [rbp - 8]
        add     eax, 2
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        add     eax, 2
        mov     dword ptr [rbp - 8], eax
        cmp     dword ptr [rbp - 8], 4
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_2:
        mov     eax, dword ptr [rbp - 8]
        sub     eax, 1
        mov     dword ptr [rbp - 8], eax
        cmp     dword ptr [rbp - 8], 3
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_7
.LBB0_4:
        mov     eax, dword ptr [rbp - 8]
        shl     eax, 1
        mov     dword ptr [rbp - 8], eax
        cmp     dword ptr [rbp - 8], 6
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_7
.LBB0_6:
        mov     dword ptr [rbp - 4], 0
.LBB0_7:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00037.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [2 x i32], align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [2 x i32]* %2, metadata !12, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32** %3, metadata !17, metadata !DIExpression()), !dbg !19
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !20
  store i32 7, i32* %4, align 4, !dbg !21
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0, !dbg !22
  store i32* %5, i32** %3, align 8, !dbg !23
  %6 = load i32*, i32** %3, align 8, !dbg !24
  %7 = getelementptr inbounds i32, i32* %6, i64 1, !dbg !25
  store i32* %7, i32** %3, align 8, !dbg !26
  %8 = load i32*, i32** %3, align 8, !dbg !27
  %9 = load i32, i32* %8, align 4, !dbg !29
  %10 = icmp ne i32 %9, 7, !dbg !30
  br i1 %10, label %11, label %12, !dbg !31

11:
  store i32 1, i32* %1, align 4, !dbg !32
  br label %13, !dbg !32

12:
  store i32 0, i32* %1, align 4, !dbg !33
  br label %13, !dbg !33

13:
  %14 = load i32, i32* %1, align 4, !dbg !34
  ret i32 %14, !dbg !34
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        lea     rax, [rbp - 12]
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 7
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        add     rax, 4
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        cmp     dword ptr [rax], 7
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00038.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32** %3, metadata !14, metadata !DIExpression()), !dbg !16
  ret i32 0, !dbg !17
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00039.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !10 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8** %2, metadata !14, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32* %3, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 2, i32* %3, align 4, !dbg !19
  %4 = bitcast i32* %3 to i8*, !dbg !20
  store i8* %4, i8** %2, align 8, !dbg !21
  %5 = load i8*, i8** %2, align 8, !dbg !22
  %6 = bitcast i8* %5 to i32*, !dbg !24
  %7 = load i32, i32* %6, align 4, !dbg !25
  %8 = icmp ne i32 %7, 2, !dbg !26
  br i1 %8, label %9, label %10, !dbg !27

9:
  store i32 1, i32* %1, align 4, !dbg !28
  br label %11, !dbg !28

10:
  store i32 0, i32* %1, align 4, !dbg !29
  br label %11, !dbg !29

11:
  %12 = load i32, i32* %1, align 4, !dbg !30
  ret i32 %12, !dbg !30
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 20], 2
        lea     rax, [rbp - 20]
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        cmp     dword ptr [rax], 2
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00040.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:49:13: [0m[0;1;31merror: [0m[1massigning to 'int *' from incompatible type 'void *'[0m
        t = calloc(64, sizeof(int));
[0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~
[0m1 error generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:49:13: [0m[0;1;31merror: [0m[1massigning to 'int *' from incompatible type 'void *'[0m
        t = calloc(64, sizeof(int));
[0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~
[0m1 error generated.
",-Wall
source\00041.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i32* %4, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata i32* %5, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 0, i32* %4, align 4, !dbg !20
  store i32 2, i32* %2, align 4, !dbg !21
  br label %6, !dbg !22

6:
  %7 = load i32, i32* %2, align 4, !dbg !23
  %8 = icmp slt i32 %7, 5000, !dbg !24
  br i1 %8, label %9, label %34, !dbg !22

9:
  store i32 2, i32* %3, align 4, !dbg !25
  store i32 1, i32* %5, align 4, !dbg !27
  br label %10, !dbg !28

10:
  %11 = load i32, i32* %3, align 4, !dbg !29
  %12 = load i32, i32* %3, align 4, !dbg !30
  %13 = mul nsw i32 %11, %12, !dbg !31
  %14 = load i32, i32* %2, align 4, !dbg !32
  %15 = icmp sle i32 %13, %14, !dbg !33
  br i1 %15, label %16, label %25, !dbg !28

16:
  %17 = load i32, i32* %2, align 4, !dbg !34
  %18 = load i32, i32* %3, align 4, !dbg !37
  %19 = srem i32 %17, %18, !dbg !38
  %20 = icmp eq i32 %19, 0, !dbg !39
  br i1 %20, label %21, label %22, !dbg !40

21:
  store i32 0, i32* %5, align 4, !dbg !41
  br label %22, !dbg !42

22:
  %23 = load i32, i32* %3, align 4, !dbg !43
  %24 = add nsw i32 %23, 1, !dbg !43
  store i32 %24, i32* %3, align 4, !dbg !43
  br label %10, !dbg !28

25:
  %26 = load i32, i32* %2, align 4, !dbg !46
  %27 = add nsw i32 %26, 1, !dbg !46
  store i32 %27, i32* %2, align 4, !dbg !46
  %28 = load i32, i32* %5, align 4, !dbg !47
  %29 = icmp ne i32 %28, 0, !dbg !47
  br i1 %29, label %30, label %33, !dbg !49

30:
  %31 = load i32, i32* %4, align 4, !dbg !50
  %32 = add nsw i32 %31, 1, !dbg !50
  store i32 %32, i32* %4, align 4, !dbg !50
  br label %33, !dbg !51

33:
  br label %6, !dbg !22

34:
  %35 = load i32, i32* %4, align 4, !dbg !54
  %36 = icmp ne i32 %35, 669, !dbg !56
  br i1 %36, label %37, label %38, !dbg !57

37:
  store i32 1, i32* %1, align 4, !dbg !58
  br label %39, !dbg !58

38:
  store i32 0, i32* %1, align 4, !dbg !59
  br label %39, !dbg !59

39:
  %40 = load i32, i32* %1, align 4, !dbg !60
  ret i32 %40, !dbg !60
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 16], 0
        mov     dword ptr [rbp - 8], 2
.LBB0_1:                                # =>This Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 5000
        jge     .LBB0_10
        mov     dword ptr [rbp - 12], 2
        mov     dword ptr [rbp - 20], 1
.LBB0_3:                                #   Parent Loop BB0_1 Depth=1
        mov     eax, dword ptr [rbp - 12]
        imul    eax, dword ptr [rbp - 12]
        cmp     eax, dword ptr [rbp - 8]
        jg      .LBB0_7
        mov     eax, dword ptr [rbp - 8]
        cdq
        idiv    dword ptr [rbp - 12]
        cmp     edx, 0
        jne     .LBB0_6
        mov     dword ptr [rbp - 20], 0
.LBB0_6:                                #   in Loop: Header=BB0_3 Depth=2
        mov     eax, dword ptr [rbp - 12]
        add     eax, 1
        mov     dword ptr [rbp - 12], eax
        jmp     .LBB0_3
.LBB0_7:                                #   in Loop: Header=BB0_1 Depth=1
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        cmp     dword ptr [rbp - 20], 0
        je      .LBB0_9
        mov     eax, dword ptr [rbp - 16]
        add     eax, 1
        mov     dword ptr [rbp - 16], eax
.LBB0_9:                                #   in Loop: Header=BB0_1 Depth=1
        jmp     .LBB0_1
.LBB0_10:
        cmp     dword ptr [rbp - 16], 669
        je      .LBB0_12
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_13
.LBB0_12:
        mov     dword ptr [rbp - 4], 0
.LBB0_13:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00042.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%union.anon = type { i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %union.anon, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %union.anon* %2, metadata !12, metadata !DIExpression()), !dbg !17
  %3 = bitcast %union.anon* %2 to i32*, !dbg !18
  store i32 1, i32* %3, align 4, !dbg !19
  %4 = bitcast %union.anon* %2 to i32*, !dbg !20
  store i32 3, i32* %4, align 4, !dbg !21
  %5 = bitcast %union.anon* %2 to i32*, !dbg !22
  %6 = load i32, i32* %5, align 4, !dbg !22
  %7 = icmp ne i32 %6, 3, !dbg !24
  br i1 %7, label %12, label %8, !dbg !25

8:
  %9 = bitcast %union.anon* %2 to i32*, !dbg !26
  %10 = load i32, i32* %9, align 4, !dbg !26
  %11 = icmp ne i32 %10, 3, !dbg !27
  br i1 %11, label %12, label %13, !dbg !28

12:
  store i32 1, i32* %1, align 4, !dbg !29
  br label %14, !dbg !29

13:
  store i32 0, i32* %1, align 4, !dbg !30
  br label %14, !dbg !30

14:
  %15 = load i32, i32* %1, align 4, !dbg !31
  ret i32 %15, !dbg !31
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     dword ptr [rbp - 8], 3
        cmp     dword ptr [rbp - 8], 3
        jne     .LBB0_2
        cmp     dword ptr [rbp - 8], 3
        je      .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_4
.LBB0_3:
        mov     dword ptr [rbp - 4], 0
.LBB0_4:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00043.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.s = type { i32, %struct.anon }
%struct.anon = type { i32, i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.s, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.s* %2, metadata !12, metadata !DIExpression()), !dbg !21
  %3 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 0, !dbg !22
  store i32 1, i32* %3, align 4, !dbg !23
  %4 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 1, !dbg !24
  %5 = getelementptr inbounds %struct.anon, %struct.anon* %4, i32 0, i32 0, !dbg !25
  store i32 2, i32* %5, align 4, !dbg !26
  %6 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 1, !dbg !27
  %7 = getelementptr inbounds %struct.anon, %struct.anon* %6, i32 0, i32 1, !dbg !28
  store i32 3, i32* %7, align 4, !dbg !29
  %8 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 0, !dbg !30
  %9 = load i32, i32* %8, align 4, !dbg !30
  %10 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 1, !dbg !32
  %11 = getelementptr inbounds %struct.anon, %struct.anon* %10, i32 0, i32 0, !dbg !33
  %12 = load i32, i32* %11, align 4, !dbg !33
  %13 = add nsw i32 %9, %12, !dbg !34
  %14 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 1, !dbg !35
  %15 = getelementptr inbounds %struct.anon, %struct.anon* %14, i32 0, i32 1, !dbg !36
  %16 = load i32, i32* %15, align 4, !dbg !36
  %17 = add nsw i32 %13, %16, !dbg !37
  %18 = icmp ne i32 %17, 6, !dbg !38
  br i1 %18, label %19, label %20, !dbg !39

19:
  store i32 1, i32* %1, align 4, !dbg !40
  br label %21, !dbg !40

20:
  store i32 0, i32* %1, align 4, !dbg !41
  br label %21, !dbg !41

21:
  %22 = load i32, i32* %1, align 4, !dbg !42
  ret i32 %22, !dbg !42
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 16], 1
        mov     dword ptr [rbp - 12], 2
        mov     dword ptr [rbp - 8], 3
        mov     eax, dword ptr [rbp - 16]
        add     eax, dword ptr [rbp - 12]
        add     eax, dword ptr [rbp - 8]
        cmp     eax, 6
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00044.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.T = type { i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.T, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.T* %2, metadata !12, metadata !DIExpression()), !dbg !16
  %3 = getelementptr inbounds %struct.T, %struct.T* %2, i32 0, i32 0, !dbg !17
  store i32 2, i32* %3, align 4, !dbg !18
  %4 = getelementptr inbounds %struct.T, %struct.T* %2, i32 0, i32 0, !dbg !19
  %5 = load i32, i32* %4, align 4, !dbg !19
  %6 = icmp ne i32 %5, 2, !dbg !21
  br i1 %6, label %7, label %8, !dbg !22

7:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %9, !dbg !23

8:
  store i32 0, i32* %1, align 4, !dbg !24
  br label %9, !dbg !24

9:
  %10 = load i32, i32* %1, align 4, !dbg !25
  ret i32 %10, !dbg !25
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 2
        cmp     dword ptr [rbp - 8], 2
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00045.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 5, align 4, !dbg !0
@y = dso_local global i64 6, align 8, !dbg !6
@p = dso_local global i32* @x, align 8, !dbg !10

define dso_local i32 @main() #0 !dbg !18 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @x, align 4, !dbg !21
  %3 = icmp ne i32 %2, 5, !dbg !23
  br i1 %3, label %4, label %5, !dbg !24

4:
  store i32 1, i32* %1, align 4, !dbg !25
  br label %15, !dbg !25

5:
  %6 = load i64, i64* @y, align 8, !dbg !26
  %7 = icmp ne i64 %6, 6, !dbg !28
  br i1 %7, label %8, label %9, !dbg !29

8:
  store i32 2, i32* %1, align 4, !dbg !30
  br label %15, !dbg !30

9:
  %10 = load i32*, i32** @p, align 8, !dbg !31
  %11 = load i32, i32* %10, align 4, !dbg !33
  %12 = icmp ne i32 %11, 5, !dbg !34
  br i1 %12, label %13, label %14, !dbg !35

13:
  store i32 3, i32* %1, align 4, !dbg !36
  br label %15, !dbg !36

14:
  store i32 0, i32* %1, align 4, !dbg !37
  br label %15, !dbg !37

15:
  %16 = load i32, i32* %1, align 4, !dbg !38
  ret i32 %16, !dbg !38
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [x], 5
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_2:
        cmp     qword ptr [y], 6
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_7
.LBB0_4:
        mov     rax, qword ptr [p]
        cmp     dword ptr [rax], 5
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_7
.LBB0_6:
        mov     dword ptr [rbp - 4], 0
.LBB0_7:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
x:
        .long   5                       # 0x5

y:
        .quad   6                       # 0x6

p:
        .quad   x

",-Wall
source\00046.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.s = type { i32, %union.anon, %struct.anon, %struct.anon.2 }
%union.anon = type { i32 }
%struct.anon = type { %union.anon.0 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32 }
%struct.anon.2 = type { i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.s, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.s* %2, metadata !12, metadata !DIExpression()), !dbg !36
  %3 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 0, !dbg !37
  store i32 1, i32* %3, align 4, !dbg !38
  %4 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 1, !dbg !39
  %5 = bitcast %union.anon* %4 to i32*, !dbg !39
  store i32 2, i32* %5, align 4, !dbg !40
  %6 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 2, !dbg !41
  %7 = getelementptr inbounds %struct.anon, %struct.anon* %6, i32 0, i32 0, !dbg !41
  %8 = bitcast %union.anon.0* %7 to %struct.anon.1*, !dbg !41
  %9 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %8, i32 0, i32 0, !dbg !41
  store i32 3, i32* %9, align 4, !dbg !42
  %10 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 3, !dbg !43
  %11 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 0, !dbg !43
  store i32 4, i32* %11, align 4, !dbg !44
  %12 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 0, !dbg !45
  %13 = load i32, i32* %12, align 4, !dbg !45
  %14 = icmp ne i32 %13, 1, !dbg !47
  br i1 %14, label %15, label %16, !dbg !48

15:
  store i32 1, i32* %1, align 4, !dbg !49
  br label %42, !dbg !49

16:
  %17 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 1, !dbg !50
  %18 = bitcast %union.anon* %17 to i32*, !dbg !50
  %19 = load i32, i32* %18, align 4, !dbg !50
  %20 = icmp ne i32 %19, 2, !dbg !52
  br i1 %20, label %21, label %27, !dbg !53

21:
  %22 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 1, !dbg !54
  %23 = bitcast %union.anon* %22 to i32*, !dbg !54
  %24 = load i32, i32* %23, align 4, !dbg !54
  %25 = icmp ne i32 %24, 2, !dbg !55
  br i1 %25, label %26, label %27, !dbg !56

26:
  store i32 2, i32* %1, align 4, !dbg !57
  br label %42, !dbg !57

27:
  %28 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 2, !dbg !58
  %29 = getelementptr inbounds %struct.anon, %struct.anon* %28, i32 0, i32 0, !dbg !58
  %30 = bitcast %union.anon.0* %29 to %struct.anon.1*, !dbg !58
  %31 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %30, i32 0, i32 0, !dbg !58
  %32 = load i32, i32* %31, align 4, !dbg !58
  %33 = icmp ne i32 %32, 3, !dbg !60
  br i1 %33, label %34, label %35, !dbg !61

34:
  store i32 3, i32* %1, align 4, !dbg !62
  br label %42, !dbg !62

35:
  %36 = getelementptr inbounds %struct.s, %struct.s* %2, i32 0, i32 3, !dbg !63
  %37 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %36, i32 0, i32 0, !dbg !63
  %38 = load i32, i32* %37, align 4, !dbg !63
  %39 = icmp ne i32 %38, 4, !dbg !65
  br i1 %39, label %40, label %41, !dbg !66

40:
  store i32 4, i32* %1, align 4, !dbg !67
  br label %42, !dbg !67

41:
  store i32 0, i32* %1, align 4, !dbg !68
  br label %42, !dbg !68

42:
  %43 = load i32, i32* %1, align 4, !dbg !69
  ret i32 %43, !dbg !69
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 24], 1
        mov     dword ptr [rbp - 20], 2
        mov     dword ptr [rbp - 16], 3
        mov     dword ptr [rbp - 12], 4
        cmp     dword ptr [rbp - 24], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_10
.LBB0_2:
        cmp     dword ptr [rbp - 20], 2
        je      .LBB0_5
        cmp     dword ptr [rbp - 20], 2
        je      .LBB0_5
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_10
.LBB0_5:
        cmp     dword ptr [rbp - 16], 3
        je      .LBB0_7
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_10
.LBB0_7:
        cmp     dword ptr [rbp - 12], 4
        je      .LBB0_9
        mov     dword ptr [rbp - 4], 4
        jmp     .LBB0_10
.LBB0_9:
        mov     dword ptr [rbp - 4], 0
.LBB0_10:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00047.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.anon = type { i32, i32, i32 }

@s = internal global %struct.anon { i32 1, i32 2, i32 3 }, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !17 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @s, i32 0, i32 0), align 4, !dbg !20
  %3 = icmp ne i32 %2, 1, !dbg !22
  br i1 %3, label %4, label %5, !dbg !23

4:
  store i32 1, i32* %1, align 4, !dbg !24
  br label %14, !dbg !24

5:
  %6 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @s, i32 0, i32 1), align 4, !dbg !25
  %7 = icmp ne i32 %6, 2, !dbg !27
  br i1 %7, label %8, label %9, !dbg !28

8:
  store i32 2, i32* %1, align 4, !dbg !29
  br label %14, !dbg !29

9:
  %10 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @s, i32 0, i32 2), align 4, !dbg !30
  %11 = icmp ne i32 %10, 3, !dbg !32
  br i1 %11, label %12, label %13, !dbg !33

12:
  store i32 3, i32* %1, align 4, !dbg !34
  br label %14, !dbg !34

13:
  store i32 0, i32* %1, align 4, !dbg !35
  br label %14, !dbg !35

14:
  %15 = load i32, i32* %1, align 4, !dbg !36
  ret i32 %15, !dbg !36
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [s], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_2:
        cmp     dword ptr [s+4], 2
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_7
.LBB0_4:
        cmp     dword ptr [s+8], 3
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_7
.LBB0_6:
        mov     dword ptr [rbp - 4], 0
.LBB0_7:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
s:
        .long   1                       # 0x1
        .long   2                       # 0x2
        .long   3                       # 0x3

",-Wall
source\00048.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { i32, i32 }

@s = dso_local global %struct.S { i32 1, i32 2 }, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !16 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds (%struct.S, %struct.S* @s, i32 0, i32 0), align 4, !dbg !19
  %3 = icmp ne i32 %2, 1, !dbg !21
  br i1 %3, label %4, label %5, !dbg !22

4:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %10, !dbg !23

5:
  %6 = load i32, i32* getelementptr inbounds (%struct.S, %struct.S* @s, i32 0, i32 1), align 4, !dbg !24
  %7 = icmp ne i32 %6, 2, !dbg !26
  br i1 %7, label %8, label %9, !dbg !27

8:
  store i32 2, i32* %1, align 4, !dbg !28
  br label %10, !dbg !28

9:
  store i32 0, i32* %1, align 4, !dbg !29
  br label %10, !dbg !29

10:
  %11 = load i32, i32* %1, align 4, !dbg !30
  ret i32 %11, !dbg !30
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:2:24: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'b' will be initialized after field 'a' [-Wreorder-init-list][0m
struct S s = { .b = 2, .a = 1};
[0;1;32m                       ^~~~~~
[0m[1m<source>:2:21: [0m[0;1;30mnote: [0mprevious initialization for field 'b' is here[0m
struct S s = { .b = 2, .a = 1};
[0;1;32m                    ^
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [s], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_5
.LBB0_2:
        cmp     dword ptr [s+4], 2
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_5
.LBB0_4:
        mov     dword ptr [rbp - 4], 0
.LBB0_5:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
s:
        .long   1                       # 0x1
        .long   2                       # 0x2

Standard error:
[1m<source>:2:24: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'b' will be initialized after field 'a' [-Wreorder-init-list][0m
struct S s = { .b = 2, .a = 1};
[0;1;32m                       ^~~~~~
[0m[1m<source>:2:21: [0m[0;1;30mnote: [0mprevious initialization for field 'b' is here[0m
struct S s = { .b = 2, .a = 1};
[0;1;32m                    ^
[0m1 warning generated.
",-Wall
source\00049.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { i32, i32* }

@x = dso_local global i32 10, align 4, !dbg !0
@s = dso_local global %struct.S { i32 1, i32* @x }, align 8, !dbg !6

define dso_local i32 @main() #0 !dbg !19 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds (%struct.S, %struct.S* @s, i32 0, i32 0), align 8, !dbg !22
  %3 = icmp ne i32 %2, 1, !dbg !24
  br i1 %3, label %4, label %5, !dbg !25

4:
  store i32 1, i32* %1, align 4, !dbg !26
  br label %11, !dbg !26

5:
  %6 = load i32*, i32** getelementptr inbounds (%struct.S, %struct.S* @s, i32 0, i32 1), align 8, !dbg !27
  %7 = load i32, i32* %6, align 4, !dbg !29
  %8 = icmp ne i32 %7, 10, !dbg !30
  br i1 %8, label %9, label %10, !dbg !31

9:
  store i32 2, i32* %1, align 4, !dbg !32
  br label %11, !dbg !32

10:
  store i32 0, i32* %1, align 4, !dbg !33
  br label %11, !dbg !33

11:
  %12 = load i32, i32* %1, align 4, !dbg !34
  ret i32 %12, !dbg !34
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:4:25: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'p' will be initialized after field 'a' [-Wreorder-init-list][0m
struct S s = { .p = &x, .a = 1};
[0;1;32m                        ^~~~~~
[0m[1m<source>:4:21: [0m[0;1;30mnote: [0mprevious initialization for field 'p' is here[0m
struct S s = { .p = &x, .a = 1};
[0;1;32m                    ^~
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [s], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_5
.LBB0_2:
        mov     rax, qword ptr [s+8]
        cmp     dword ptr [rax], 10
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_5
.LBB0_4:
        mov     dword ptr [rbp - 4], 0
.LBB0_5:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
x:
        .long   10                      # 0xa

s:
        .long   1                       # 0x1
        .zero   4
        .quad   x

Standard error:
[1m<source>:4:25: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'p' will be initialized after field 'a' [-Wreorder-init-list][0m
struct S s = { .p = &x, .a = 1};
[0;1;32m                        ^~~~~~
[0m[1m<source>:4:21: [0m[0;1;30mnote: [0mprevious initialization for field 'p' is here[0m
struct S s = { .p = &x, .a = 1};
[0;1;32m                    ^~
[0m1 warning generated.
",-Wall
source\00050.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S2 = type { i32, i32, %union.anon, %struct.S1 }
%union.anon = type { i32 }
%struct.S1 = type { i32, i32 }

@v = dso_local global %struct.S2 { i32 1, i32 2, %union.anon { i32 3 }, %struct.S1 { i32 4, i32 5 } }, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !26 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds (%struct.S2, %struct.S2* @v, i32 0, i32 0), align 4, !dbg !29
  %3 = icmp ne i32 %2, 1, !dbg !31
  br i1 %3, label %4, label %5, !dbg !32

4:
  store i32 1, i32* %1, align 4, !dbg !33
  br label %25, !dbg !33

5:
  %6 = load i32, i32* getelementptr inbounds (%struct.S2, %struct.S2* @v, i32 0, i32 1), align 4, !dbg !34
  %7 = icmp ne i32 %6, 2, !dbg !36
  br i1 %7, label %8, label %9, !dbg !37

8:
  store i32 2, i32* %1, align 4, !dbg !38
  br label %25, !dbg !38

9:
  %10 = load i32, i32* getelementptr inbounds (%struct.S2, %struct.S2* @v, i32 0, i32 2, i32 0), align 4, !dbg !39
  %11 = icmp ne i32 %10, 3, !dbg !41
  br i1 %11, label %15, label %12, !dbg !42

12:
  %13 = load i32, i32* getelementptr inbounds (%struct.S2, %struct.S2* @v, i32 0, i32 2, i32 0), align 4, !dbg !43
  %14 = icmp ne i32 %13, 3, !dbg !44
  br i1 %14, label %15, label %16, !dbg !45

15:
  store i32 3, i32* %1, align 4, !dbg !46
  br label %25, !dbg !46

16:
  %17 = load i32, i32* getelementptr inbounds (%struct.S2, %struct.S2* @v, i32 0, i32 3, i32 0), align 4, !dbg !47
  %18 = icmp ne i32 %17, 4, !dbg !49
  br i1 %18, label %19, label %20, !dbg !50

19:
  store i32 4, i32* %1, align 4, !dbg !51
  br label %25, !dbg !51

20:
  %21 = load i32, i32* getelementptr inbounds (%struct.S2, %struct.S2* @v, i32 0, i32 3, i32 1), align 4, !dbg !52
  %22 = icmp ne i32 %21, 5, !dbg !54
  br i1 %22, label %23, label %24, !dbg !55

23:
  store i32 5, i32* %1, align 4, !dbg !56
  br label %25, !dbg !56

24:
  store i32 0, i32* %1, align 4, !dbg !57
  br label %25, !dbg !57

25:
  %26 = load i32, i32* %1, align 4, !dbg !58
  ret i32 %26, !dbg !58
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [v], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_12
.LBB0_2:
        cmp     dword ptr [v+4], 2
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_12
.LBB0_4:
        cmp     dword ptr [v+8], 3
        jne     .LBB0_6
        cmp     dword ptr [v+8], 3
        je      .LBB0_7
.LBB0_6:
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_12
.LBB0_7:
        cmp     dword ptr [v+12], 4
        je      .LBB0_9
        mov     dword ptr [rbp - 4], 4
        jmp     .LBB0_12
.LBB0_9:
        cmp     dword ptr [v+16], 5
        je      .LBB0_11
        mov     dword ptr [rbp - 4], 5
        jmp     .LBB0_12
.LBB0_11:
        mov     dword ptr [rbp - 4], 0
.LBB0_12:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
v:
        .long   1                       # 0x1
        .long   2                       # 0x2
        .long   3                       # 0x3
        .long   4                       # 0x4
        .long   5                       # 0x5

Standard error:
[1m<source>:16:22: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct S2 v = {1, 2, 3, {4, 5}};
[0;1;32m                     ^
[0m[0;32m                     {}
[0m1 warning generated.
",-Wall
source\00051.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @x, align 4, !dbg !15
  switch i32 %2, label %4 [
    i32 0, label %3
  ], !dbg !16

3:
  br label %4, !dbg !16

4:
  %5 = load i32, i32* @x, align 4, !dbg !17
  switch i32 %5, label %10 [
    i32 0, label %6
  ], !dbg !18

6:
  %7 = load i32, i32* @x, align 4, !dbg !19
  switch i32 %7, label %9 [
    i32 0, label %8
  ], !dbg !20

8:
  br label %11, !dbg !21

9:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %24, !dbg !23

10:
  store i32 1, i32* %1, align 4, !dbg !24
  br label %24, !dbg !24

11:
  call void @llvm.dbg.label(metadata !25), !dbg !26
  %12 = load i32, i32* @x, align 4, !dbg !27
  switch i32 %12, label %14 [
    i32 1, label %13
  ], !dbg !28

13:
  store i32 1, i32* %1, align 4, !dbg !29
  br label %24, !dbg !29

14:
  %15 = load i32, i32* @x, align 4, !dbg !30
  switch i32 %15, label %18 [
    i32 1, label %17
  ], !dbg !31

16:
  call void @llvm.dbg.label(metadata !32), !dbg !35
  br label %17, !dbg !36

17:
  store i32 1, i32* %1, align 4, !dbg !37
  br label %24, !dbg !37

18:
  %19 = load i32, i32* @x, align 4, !dbg !38
  switch i32 %19, label %23 [
    i32 0, label %20
    i32 1, label %22
  ], !dbg !39

20:
  %21 = load i32, i32* @x, align 4, !dbg !40
  store i32 %21, i32* %1, align 4, !dbg !42
  br label %24, !dbg !42

22:
  store i32 1, i32* %1, align 4, !dbg !43
  br label %24, !dbg !43

23:
  store i32 1, i32* %1, align 4, !dbg !44
  br label %24, !dbg !44

24:
  %25 = load i32, i32* %1, align 4, !dbg !45
  ret i32 %25, !dbg !45
}

declare void @llvm.dbg.label(metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [rip + x]
        test    eax, eax
        jne     .LBB0_2
        jmp     .LBB0_1
.LBB0_1:
        jmp     .LBB0_2
.LBB0_2:
        mov     eax, dword ptr [rip + x]
        test    eax, eax
        jne     .LBB0_6
        jmp     .LBB0_3
.LBB0_3:
        mov     eax, dword ptr [rip + x]
        test    eax, eax
        jne     .LBB0_5
        jmp     .LBB0_4
.LBB0_4:
        jmp     .LBB0_7
.LBB0_5:
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_15
.LBB0_6:
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_15
.LBB0_7:
        mov     eax, dword ptr [rip + x]
        sub     eax, 1
        jne     .LBB0_9
        jmp     .LBB0_8
.LBB0_8:
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_15
.LBB0_9:
        mov     eax, dword ptr [rip + x]
        sub     eax, 1
        jne     .LBB0_11
        jmp     .LBB0_10
.LBB0_10:
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_15
.LBB0_11:
        mov     eax, dword ptr [rip + x]
        test    eax, eax
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        je      .LBB0_12
        jmp     .LBB0_16
.LBB0_16:
        mov     eax, dword ptr [rbp - 8] # 4-byte Reload
        sub     eax, 1
        je      .LBB0_13
        jmp     .LBB0_14
.LBB0_12:
        mov     eax, dword ptr [x]
        mov     dword ptr [rbp - 4], eax
        jmp     .LBB0_15
.LBB0_13:
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_15
.LBB0_14:
        mov     dword ptr [rbp - 4], 1
.LBB0_15:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
x:
        .long   0                       # 0x0

Standard error:
[1m<source>:25:4: [0m[0;1;35mwarning: [0m[1munused label 'foo' [-Wunused-label][0m
                        foo:
[0;1;32m                        ^~~~
[0m1 warning generated.
",-Wall
source\00052.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.T = type { i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.T, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.T* %2, metadata !12, metadata !DIExpression()), !dbg !17
  %3 = getelementptr inbounds %struct.T, %struct.T* %2, i32 0, i32 0, !dbg !18
  store i32 0, i32* %3, align 4, !dbg !19
  %4 = getelementptr inbounds %struct.T, %struct.T* %2, i32 0, i32 0, !dbg !20
  %5 = load i32, i32* %4, align 4, !dbg !20
  ret i32 %5, !dbg !21
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00053.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.T = type { i32 }
%struct.T.0 = type { i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.T, align 4
  %3 = alloca %struct.T.0, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.T* %2, metadata !12, metadata !DIExpression()), !dbg !16
  %4 = getelementptr inbounds %struct.T, %struct.T* %2, i32 0, i32 0, !dbg !17
  store i32 1, i32* %4, align 4, !dbg !18
  call void @llvm.dbg.declare(metadata %struct.T.0* %3, metadata !19, metadata !DIExpression()), !dbg !24
  %5 = getelementptr inbounds %struct.T.0, %struct.T.0* %3, i32 0, i32 0, !dbg !25
  store i32 1, i32* %5, align 4, !dbg !26
  %6 = getelementptr inbounds %struct.T, %struct.T* %2, i32 0, i32 0, !dbg !27
  %7 = load i32, i32* %6, align 4, !dbg !27
  %8 = getelementptr inbounds %struct.T.0, %struct.T.0* %3, i32 0, i32 0, !dbg !29
  %9 = load i32, i32* %8, align 4, !dbg !29
  %10 = sub nsw i32 %7, %9, !dbg !30
  %11 = icmp ne i32 %10, 0, !dbg !31
  br i1 %11, label %12, label %13, !dbg !32

12:
  store i32 1, i32* %1, align 4, !dbg !33
  br label %14, !dbg !33

13:
  store i32 0, i32* %1, align 4, !dbg !34
  br label %14, !dbg !34

14:
  %15 = load i32, i32* %1, align 4, !dbg !35
  ret i32 %15, !dbg !35
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     dword ptr [rbp - 16], 1
        mov     eax, dword ptr [rbp - 8]
        sub     eax, dword ptr [rbp - 16]
        cmp     eax, 0
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00054.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !14 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !19, metadata !DIExpression()), !dbg !20
  store i32 0, i32* %2, align 4, !dbg !21
  %3 = load i32, i32* %2, align 4, !dbg !22
  ret i32 %3, !dbg !23
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00055.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !14 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !19, metadata !DIExpression()), !dbg !20
  store i32 0, i32* %2, align 4, !dbg !21
  %3 = load i32, i32* %2, align 4, !dbg !22
  ret i32 %3, !dbg !23
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00056.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c""%d, %d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 42, i32* %2, align 4, !dbg !14
  %6 = load i32, i32* %2, align 4, !dbg !15
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %6), !dbg !16
  call void @llvm.dbg.declare(metadata i32* %3, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 64, i32* %3, align 4, !dbg !18
  %8 = load i32, i32* %3, align 4, !dbg !19
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %8), !dbg !20
  call void @llvm.dbg.declare(metadata i32* %4, metadata !21, metadata !DIExpression()), !dbg !22
  store i32 12, i32* %4, align 4, !dbg !22
  call void @llvm.dbg.declare(metadata i32* %5, metadata !23, metadata !DIExpression()), !dbg !24
  store i32 34, i32* %5, align 4, !dbg !24
  %10 = load i32, i32* %4, align 4, !dbg !25
  %11 = load i32, i32* %5, align 4, !dbg !26
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i32 %10, i32 %11), !dbg !27
  ret i32 0, !dbg !28
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 42
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 12], 64
        mov     esi, dword ptr [rbp - 12]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 16], 12
        mov     dword ptr [rbp - 20], 34
        mov     esi, dword ptr [rbp - 16]
        mov     edx, dword ptr [rbp - 20]
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 32], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 32
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

.L.str.1:
        .asciz  ""%d, %d\n""

",-Wall
source\00057.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [16 x i8], align 16
  %3 = alloca [16 x i8], align 16
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [16 x i8]* %2, metadata !12, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata [16 x i8]* %3, metadata !18, metadata !DIExpression()), !dbg !19
  ret i32 0, !dbg !20
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00058.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [7 x i8] c""abcdef\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8** %2, metadata !12, metadata !DIExpression()), !dbg !15
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8** %2, align 8, !dbg !16
  %3 = load i8*, i8** %2, align 8, !dbg !17
  %4 = getelementptr inbounds i8, i8* %3, i64 0, !dbg !17
  %5 = load i8, i8* %4, align 1, !dbg !17
  %6 = sext i8 %5 to i32, !dbg !17
  %7 = icmp ne i32 %6, 97, !dbg !19
  br i1 %7, label %8, label %9, !dbg !20

8:
  store i32 1, i32* %1, align 4, !dbg !21
  br label %52, !dbg !21

9:
  %10 = load i8*, i8** %2, align 8, !dbg !22
  %11 = getelementptr inbounds i8, i8* %10, i64 1, !dbg !22
  %12 = load i8, i8* %11, align 1, !dbg !22
  %13 = sext i8 %12 to i32, !dbg !22
  %14 = icmp ne i32 %13, 98, !dbg !24
  br i1 %14, label %15, label %16, !dbg !25

15:
  store i32 2, i32* %1, align 4, !dbg !26
  br label %52, !dbg !26

16:
  %17 = load i8*, i8** %2, align 8, !dbg !27
  %18 = getelementptr inbounds i8, i8* %17, i64 2, !dbg !27
  %19 = load i8, i8* %18, align 1, !dbg !27
  %20 = sext i8 %19 to i32, !dbg !27
  %21 = icmp ne i32 %20, 99, !dbg !29
  br i1 %21, label %22, label %23, !dbg !30

22:
  store i32 3, i32* %1, align 4, !dbg !31
  br label %52, !dbg !31

23:
  %24 = load i8*, i8** %2, align 8, !dbg !32
  %25 = getelementptr inbounds i8, i8* %24, i64 3, !dbg !32
  %26 = load i8, i8* %25, align 1, !dbg !32
  %27 = sext i8 %26 to i32, !dbg !32
  %28 = icmp ne i32 %27, 100, !dbg !34
  br i1 %28, label %29, label %30, !dbg !35

29:
  store i32 4, i32* %1, align 4, !dbg !36
  br label %52, !dbg !36

30:
  %31 = load i8*, i8** %2, align 8, !dbg !37
  %32 = getelementptr inbounds i8, i8* %31, i64 4, !dbg !37
  %33 = load i8, i8* %32, align 1, !dbg !37
  %34 = sext i8 %33 to i32, !dbg !37
  %35 = icmp ne i32 %34, 101, !dbg !39
  br i1 %35, label %36, label %37, !dbg !40

36:
  store i32 5, i32* %1, align 4, !dbg !41
  br label %52, !dbg !41

37:
  %38 = load i8*, i8** %2, align 8, !dbg !42
  %39 = getelementptr inbounds i8, i8* %38, i64 5, !dbg !42
  %40 = load i8, i8* %39, align 1, !dbg !42
  %41 = sext i8 %40 to i32, !dbg !42
  %42 = icmp ne i32 %41, 102, !dbg !44
  br i1 %42, label %43, label %44, !dbg !45

43:
  store i32 6, i32* %1, align 4, !dbg !46
  br label %52, !dbg !46

44:
  %45 = load i8*, i8** %2, align 8, !dbg !47
  %46 = getelementptr inbounds i8, i8* %45, i64 6, !dbg !47
  %47 = load i8, i8* %46, align 1, !dbg !47
  %48 = sext i8 %47 to i32, !dbg !47
  %49 = icmp ne i32 %48, 0, !dbg !49
  br i1 %49, label %50, label %51, !dbg !50

50:
  store i32 7, i32* %1, align 4, !dbg !51
  br label %52, !dbg !51

51:
  store i32 0, i32* %1, align 4, !dbg !52
  br label %52, !dbg !52

52:
  %53 = load i32, i32* %1, align 4, !dbg !53
  ret i32 %53, !dbg !53
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

Standard error:
[1m<source>:5:6: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        s = ""abc"" ""def"";
[0;1;32m            ^
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        movabs  rax, offset .L.str
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        movsx   ecx, byte ptr [rax]
        cmp     ecx, 97
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_15
.LBB0_2:
        mov     rax, qword ptr [rbp - 16]
        movsx   ecx, byte ptr [rax + 1]
        cmp     ecx, 98
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_15
.LBB0_4:
        mov     rax, qword ptr [rbp - 16]
        movsx   ecx, byte ptr [rax + 2]
        cmp     ecx, 99
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_15
.LBB0_6:
        mov     rax, qword ptr [rbp - 16]
        movsx   ecx, byte ptr [rax + 3]
        cmp     ecx, 100
        je      .LBB0_8
        mov     dword ptr [rbp - 4], 4
        jmp     .LBB0_15
.LBB0_8:
        mov     rax, qword ptr [rbp - 16]
        movsx   ecx, byte ptr [rax + 4]
        cmp     ecx, 101
        je      .LBB0_10
        mov     dword ptr [rbp - 4], 5
        jmp     .LBB0_15
.LBB0_10:
        mov     rax, qword ptr [rbp - 16]
        movsx   ecx, byte ptr [rax + 5]
        cmp     ecx, 102
        je      .LBB0_12
        mov     dword ptr [rbp - 4], 6
        jmp     .LBB0_15
.LBB0_12:
        mov     rax, qword ptr [rbp - 16]
        movsx   ecx, byte ptr [rax + 6]
        cmp     ecx, 0
        je      .LBB0_14
        mov     dword ptr [rbp - 4], 7
        jmp     .LBB0_15
.LBB0_14:
        mov     dword ptr [rbp - 4], 0
.LBB0_15:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
.L.str:
        .asciz  ""abcdef""

Standard error:
[1m<source>:5:6: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        s = ""abc"" ""def"";
[0;1;32m            ^
[0m1 warning generated.
",-Wall
source\00059.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00060.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00061.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00062.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @x, align 4, !dbg !15
  ret i32 %2, !dbg !16
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [x]
        pop     rbp
        ret
x:
        .long   0                       # 0x0

",-Wall
source\00063.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !15
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
x:
        .long   0                       # 0x0

",-Wall
source\00064.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00065.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00066.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00067.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @x, align 4, !dbg !15
  ret i32 %2, !dbg !16
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [x]
        pop     rbp
        ret
x:
        .long   0                       # 0x0

",-Wall
source\00068.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @x, align 4, !dbg !15
  ret i32 %2, !dbg !16
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [x]
        pop     rbp
        ret
x:
        .long   0                       # 0x0

",-Wall
source\00069.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @x, align 4, !dbg !15
  ret i32 %2, !dbg !16
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [x]
        pop     rbp
        ret
x:
        .long   0                       # 0x0

",-Wall
source\00070.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @x, align 4, !dbg !15
  ret i32 %2, !dbg !16
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [x]
        pop     rbp
        ret
x:
        .long   0                       # 0x0

",-Wall
source\00071.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00072.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [2 x i32], align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [2 x i32]* %2, metadata !12, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32** %3, metadata !17, metadata !DIExpression()), !dbg !19
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0, !dbg !20
  store i32* %4, i32** %3, align 8, !dbg !21
  %5 = load i32*, i32** %3, align 8, !dbg !22
  %6 = getelementptr inbounds i32, i32* %5, i64 1, !dbg !22
  store i32* %6, i32** %3, align 8, !dbg !22
  %7 = load i32*, i32** %3, align 8, !dbg !23
  store i32 123, i32* %7, align 4, !dbg !24
  %8 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !25
  %9 = load i32, i32* %8, align 4, !dbg !25
  %10 = icmp ne i32 %9, 123, !dbg !27
  br i1 %10, label %11, label %12, !dbg !28

11:
  store i32 1, i32* %1, align 4, !dbg !29
  br label %13, !dbg !29

12:
  store i32 0, i32* %1, align 4, !dbg !30
  br label %13, !dbg !30

13:
  %14 = load i32, i32* %1, align 4, !dbg !31
  ret i32 %14, !dbg !31
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        lea     rax, [rbp - 12]
        mov     dword ptr [rbp - 4], 0
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        add     rax, 4
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     dword ptr [rax], 123
        cmp     dword ptr [rbp - 8], 123
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00073.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [2 x i32], align 4
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [2 x i32]* %2, metadata !12, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32** %3, metadata !17, metadata !DIExpression()), !dbg !19
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !20
  store i32* %4, i32** %3, align 8, !dbg !21
  %5 = load i32*, i32** %3, align 8, !dbg !22
  %6 = getelementptr inbounds i32, i32* %5, i64 -1, !dbg !22
  store i32* %6, i32** %3, align 8, !dbg !22
  %7 = load i32*, i32** %3, align 8, !dbg !23
  store i32 123, i32* %7, align 4, !dbg !24
  %8 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 0, !dbg !25
  %9 = load i32, i32* %8, align 4, !dbg !25
  %10 = icmp ne i32 %9, 123, !dbg !27
  br i1 %10, label %11, label %12, !dbg !28

11:
  store i32 1, i32* %1, align 4, !dbg !29
  br label %13, !dbg !29

12:
  store i32 0, i32* %1, align 4, !dbg !30
  br label %13, !dbg !30

13:
  %14 = load i32, i32* %1, align 4, !dbg !31
  ret i32 %14, !dbg !31
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        lea     rax, [rbp - 12]
        add     rax, 4
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        add     rax, -4
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     dword ptr [rax], 123
        cmp     dword ptr [rbp - 12], 123
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00074.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !15
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
x:
        .long   0                       # 0x0

",-Wall
source\00075.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00076.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00077.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @foo(int*)(i32* %0) #0 !dbg !7 {
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca [100 x i32], align 16
  %5 = alloca i32*, align 8
  store i32* %0, i32** %3, align 8
  call void @llvm.dbg.declare(metadata i32** %3, metadata !13, metadata !DIExpression()), !dbg !14
  call void @llvm.dbg.declare(metadata [100 x i32]* %4, metadata !15, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.declare(metadata i32** %5, metadata !20, metadata !DIExpression()), !dbg !21
  %6 = getelementptr inbounds [100 x i32], [100 x i32]* %4, i64 0, i64 0, !dbg !22
  store i32 2000, i32* %6, align 16, !dbg !23
  %7 = load i32*, i32** %3, align 8, !dbg !24
  %8 = getelementptr inbounds i32, i32* %7, i64 0, !dbg !24
  %9 = load i32, i32* %8, align 4, !dbg !24
  %10 = icmp ne i32 %9, 1000, !dbg !26
  br i1 %10, label %11, label %12, !dbg !27

11:
  store i32 1, i32* %2, align 4, !dbg !28
  br label %27, !dbg !28

12:
  %13 = load i32*, i32** %3, align 8, !dbg !30
  store i32* %13, i32** %5, align 8, !dbg !31
  %14 = load i32*, i32** %5, align 8, !dbg !32
  %15 = getelementptr inbounds i32, i32* %14, i64 0, !dbg !32
  %16 = load i32, i32* %15, align 4, !dbg !32
  %17 = icmp ne i32 %16, 1000, !dbg !34
  br i1 %17, label %18, label %19, !dbg !35

18:
  store i32 2, i32* %2, align 4, !dbg !36
  br label %27, !dbg !36

19:
  %20 = getelementptr inbounds [100 x i32], [100 x i32]* %4, i64 0, i64 0, !dbg !38
  store i32* %20, i32** %5, align 8, !dbg !39
  %21 = load i32*, i32** %5, align 8, !dbg !40
  %22 = getelementptr inbounds i32, i32* %21, i64 0, !dbg !40
  %23 = load i32, i32* %22, align 4, !dbg !40
  %24 = icmp ne i32 %23, 2000, !dbg !42
  br i1 %24, label %25, label %26, !dbg !43

25:
  store i32 3, i32* %2, align 4, !dbg !44
  br label %27, !dbg !44

26:
  store i32 0, i32* %2, align 4, !dbg !46
  br label %27, !dbg !46

27:
  %28 = load i32, i32* %2, align 4, !dbg !47
  ret i32 %28, !dbg !47
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 @main() #2 !dbg !48 {
  %1 = alloca i32, align 4
  %2 = alloca [100 x i32], align 16
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [100 x i32]* %2, metadata !51, metadata !DIExpression()), !dbg !52
  %3 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 0, !dbg !53
  store i32 1000, i32* %3, align 16, !dbg !54
  %4 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 0, !dbg !55
  %5 = call i32 @foo(int*)(i32* %4), !dbg !56
  ret i32 %5, !dbg !57
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:28:11: [0m[0;1;35mwarning: [0m[1msizeof on array function parameter will return size of 'int *' instead of 'int [100]' [-Wsizeof-array-argument][0m
        if(sizeof(x) != sizeof(void*))
[0;1;32m                 ^
[0m[1m<source>:2:9: [0m[0;1;30mnote: [0mdeclared here[0m
foo(int x[100])
[0;1;32m        ^
[0m[1m<source>:33:24: [0m[0;1;35mwarning: [0m[1msizeof on array function parameter will return size of 'int *' instead of 'int [100]' [-Wsizeof-array-argument][0m
        if(sizeof(y) <= sizeof(x))
[0;1;32m                              ^
[0m[1m<source>:2:9: [0m[0;1;30mnote: [0mdeclared here[0m
foo(int x[100])
[0;1;32m        ^
[0m2 warnings generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
foo(int*):                               # @foo(int*)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 304
        mov     qword ptr [rbp - 16], rdi
        mov     dword ptr [rbp - 416], 2000
        mov     rax, qword ptr [rbp - 16]
        cmp     dword ptr [rax], 1000
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_2:
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 424], rax
        mov     rax, qword ptr [rbp - 424]
        cmp     dword ptr [rax], 1000
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_7
.LBB0_4:
        lea     rax, [rbp - 416]
        mov     qword ptr [rbp - 424], rax
        mov     rax, qword ptr [rbp - 424]
        cmp     dword ptr [rax], 2000
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_7
.LBB0_6:
        mov     dword ptr [rbp - 4], 0
.LBB0_7:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 304
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 416
        lea     rdi, [rbp - 416]
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 416], 1000
        call    foo(int*)
        add     rsp, 416
        pop     rbp
        ret
Standard error:
[1m<source>:28:11: [0m[0;1;35mwarning: [0m[1msizeof on array function parameter will return size of 'int *' instead of 'int [100]' [-Wsizeof-array-argument][0m
        if(sizeof(x) != sizeof(void*))
[0;1;32m                 ^
[0m[1m<source>:2:9: [0m[0;1;30mnote: [0mdeclared here[0m
foo(int x[100])
[0;1;32m        ^
[0m[1m<source>:33:24: [0m[0;1;35mwarning: [0m[1msizeof on array function parameter will return size of 'int *' instead of 'int [100]' [-Wsizeof-array-argument][0m
        if(sizeof(y) <= sizeof(x))
[0;1;32m                              ^
[0m[1m<source>:2:9: [0m[0;1;30mnote: [0mdeclared here[0m
foo(int x[100])
[0;1;32m        ^
[0m2 warnings generated.
",-Wall
source\00078.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @f1(char*)(i8* %0) #0 !dbg !7 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !14, metadata !DIExpression()), !dbg !15
  %3 = load i8*, i8** %2, align 8, !dbg !16
  %4 = load i8, i8* %3, align 1, !dbg !17
  %5 = sext i8 %4 to i32, !dbg !17
  %6 = add nsw i32 %5, 1, !dbg !18
  ret i32 %6, !dbg !19
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 @main() #2 !dbg !20 {
  %1 = alloca i32, align 4
  %2 = alloca i8, align 1
  %3 = alloca [1000 x i32], align 16
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8* %2, metadata !23, metadata !DIExpression()), !dbg !24
  store i8 1, i8* %2, align 1, !dbg !24
  call void @llvm.dbg.declare(metadata [1000 x i32]* %3, metadata !25, metadata !DIExpression()), !dbg !29
  %4 = call i32 @f1(char*)(i8* %2), !dbg !30
  %5 = icmp ne i32 %4, 2, !dbg !32
  br i1 %5, label %6, label %7, !dbg !33

6:
  store i32 1, i32* %1, align 4, !dbg !34
  br label %8, !dbg !34

7:
  store i32 0, i32* %1, align 4, !dbg !35
  br label %8, !dbg !35

8:
  %9 = load i32, i32* %1, align 4, !dbg !36
  ret i32 %9, !dbg !36
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
f1(char*):                                # @f1(char*)
        push    rbp
        mov     rbp, rsp
        mov     qword ptr [rbp - 8], rdi
        mov     rax, qword ptr [rbp - 8]
        movsx   ecx, byte ptr [rax]
        add     ecx, 1
        mov     eax, ecx
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 4016
        mov     dword ptr [rbp - 4], 0
        mov     byte ptr [rbp - 5], 1
        lea     rdi, [rbp - 5]
        call    f1(char*)
        cmp     eax, 2
        je      .LBB1_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_3
.LBB1_2:
        mov     dword ptr [rbp - 4], 0
.LBB1_3:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 4016
        pop     rbp
        ret
Standard error:
[1m<source>:11:6: [0m[0;1;35mwarning: [0m[1munused variable 'v' [-Wunused-variable][0m
        int v[1000];
[0;1;32m            ^
[0m1 warning generated.
",-Wall
source\00079.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 0, i32* %3, align 4, !dbg !16
  %4 = load i32, i32* %3, align 4, !dbg !17
  %5 = add nsw i32 %4, 1, !dbg !17
  store i32 %5, i32* %2, align 4, !dbg !18
  %6 = load i32, i32* %2, align 4, !dbg !19
  %7 = icmp ne i32 %6, 1, !dbg !21
  br i1 %7, label %8, label %9, !dbg !22

8:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %10, !dbg !23

9:
  store i32 0, i32* %1, align 4, !dbg !24
  br label %10, !dbg !24

10:
  %11 = load i32, i32* %1, align 4, !dbg !25
  ret i32 %11, !dbg !25
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 12], 0
        mov     eax, dword ptr [rbp - 12]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        cmp     dword ptr [rbp - 8], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00080.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local void @voidfn()() #0 !dbg !7 {
  ret void, !dbg !11
}

define dso_local i32 @main() #1 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @voidfn()(), !dbg !16
  ret i32 0, !dbg !17
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
voidfn():                             # @voidfn()
        push    rbp
        mov     rbp, rsp
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        call    voidfn()
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00081.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i64* %2, metadata !12, metadata !DIExpression()), !dbg !14
  store i64 0, i64* %2, align 8, !dbg !15
  %3 = load i64, i64* %2, align 8, !dbg !16
  %4 = add nsw i64 %3, 1, !dbg !17
  store i64 %4, i64* %2, align 8, !dbg !18
  %5 = load i64, i64* %2, align 8, !dbg !19
  %6 = icmp ne i64 %5, 1, !dbg !21
  br i1 %6, label %7, label %8, !dbg !22

7:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %9, !dbg !23

8:
  store i32 0, i32* %1, align 4, !dbg !24
  br label %9, !dbg !24

9:
  %10 = load i32, i32* %1, align 4, !dbg !25
  ret i32 %10, !dbg !25
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     qword ptr [rbp - 16], 0
        mov     rax, qword ptr [rbp - 16]
        add     rax, 1
        mov     qword ptr [rbp - 16], rax
        cmp     qword ptr [rbp - 16], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00082.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i64* %2, metadata !12, metadata !DIExpression()), !dbg !14
  store i64 0, i64* %2, align 8, !dbg !15
  %3 = load i64, i64* %2, align 8, !dbg !16
  %4 = add i64 %3, 1, !dbg !17
  store i64 %4, i64* %2, align 8, !dbg !18
  %5 = load i64, i64* %2, align 8, !dbg !19
  %6 = icmp ne i64 %5, 1, !dbg !21
  br i1 %6, label %7, label %8, !dbg !22

7:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %9, !dbg !23

8:
  store i32 0, i32* %1, align 4, !dbg !24
  br label %9, !dbg !24

9:
  %10 = load i32, i32* %1, align 4, !dbg !25
  ret i32 %10, !dbg !25
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     qword ptr [rbp - 16], 0
        mov     rax, qword ptr [rbp - 16]
        add     rax, 1
        mov     qword ptr [rbp - 16], rax
        cmp     qword ptr [rbp - 16], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00083.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @one(int)(i32 %0) #0 !dbg !7 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !12, metadata !DIExpression()), !dbg !13
  %4 = load i32, i32* %3, align 4, !dbg !14
  %5 = icmp ne i32 %4, 1, !dbg !16
  br i1 %5, label %6, label %7, !dbg !17

6:
  store i32 1, i32* %2, align 4, !dbg !18
  br label %8, !dbg !18

7:
  store i32 0, i32* %2, align 4, !dbg !19
  br label %8, !dbg !19

8:
  %9 = load i32, i32* %2, align 4, !dbg !20
  ret i32 %9, !dbg !20
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 @two(int, int)(i32 %0, i32 %1) #0 !dbg !21 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !24, metadata !DIExpression()), !dbg !25
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !26, metadata !DIExpression()), !dbg !27
  %6 = load i32, i32* %4, align 4, !dbg !28
  %7 = icmp ne i32 %6, 1, !dbg !30
  br i1 %7, label %8, label %9, !dbg !31

8:
  store i32 1, i32* %3, align 4, !dbg !32
  br label %14, !dbg !32

9:
  %10 = load i32, i32* %5, align 4, !dbg !33
  %11 = icmp ne i32 %10, 2, !dbg !35
  br i1 %11, label %12, label %13, !dbg !36

12:
  store i32 1, i32* %3, align 4, !dbg !37
  br label %14, !dbg !37

13:
  store i32 0, i32* %3, align 4, !dbg !38
  br label %14, !dbg !38

14:
  %15 = load i32, i32* %3, align 4, !dbg !39
  ret i32 %15, !dbg !39
}

define dso_local i32 @three(int, int, int)(i32 %0, i32 %1, i32 %2) #0 !dbg !40 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !43, metadata !DIExpression()), !dbg !44
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !45, metadata !DIExpression()), !dbg !46
  store i32 %2, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !47, metadata !DIExpression()), !dbg !48
  %8 = load i32, i32* %5, align 4, !dbg !49
  %9 = icmp ne i32 %8, 1, !dbg !51
  br i1 %9, label %10, label %11, !dbg !52

10:
  store i32 1, i32* %4, align 4, !dbg !53
  br label %20, !dbg !53

11:
  %12 = load i32, i32* %6, align 4, !dbg !54
  %13 = icmp ne i32 %12, 2, !dbg !56
  br i1 %13, label %14, label %15, !dbg !57

14:
  store i32 1, i32* %4, align 4, !dbg !58
  br label %20, !dbg !58

15:
  %16 = load i32, i32* %7, align 4, !dbg !59
  %17 = icmp ne i32 %16, 3, !dbg !61
  br i1 %17, label %18, label %19, !dbg !62

18:
  store i32 1, i32* %4, align 4, !dbg !63
  br label %20, !dbg !63

19:
  store i32 0, i32* %4, align 4, !dbg !64
  br label %20, !dbg !64

20:
  %21 = load i32, i32* %4, align 4, !dbg !65
  ret i32 %21, !dbg !65
}

define dso_local i32 @main() #2 !dbg !66 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @one(int)(i32 1), !dbg !69
  %3 = icmp ne i32 %2, 0, !dbg !69
  br i1 %3, label %4, label %5, !dbg !71

4:
  store i32 2, i32* %1, align 4, !dbg !72
  br label %14, !dbg !72

5:
  %6 = call i32 @two(int, int)(i32 1, i32 2), !dbg !73
  %7 = icmp ne i32 %6, 0, !dbg !73
  br i1 %7, label %8, label %9, !dbg !75

8:
  store i32 3, i32* %1, align 4, !dbg !76
  br label %14, !dbg !76

9:
  %10 = call i32 @three(int, int, int)(i32 1, i32 2, i32 3), !dbg !77
  %11 = icmp ne i32 %10, 0, !dbg !77
  br i1 %11, label %12, label %13, !dbg !79

12:
  store i32 4, i32* %1, align 4, !dbg !80
  br label %14, !dbg !80

13:
  store i32 0, i32* %1, align 4, !dbg !81
  br label %14, !dbg !81

14:
  %15 = load i32, i32* %1, align 4, !dbg !82
  ret i32 %15, !dbg !82
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
one(int):                                # @one(int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 8], edi
        cmp     dword ptr [rbp - 8], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
two(int, int):                               # @two(int, int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 8], edi
        mov     dword ptr [rbp - 12], esi
        cmp     dword ptr [rbp - 8], 1
        je      .LBB1_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_5
.LBB1_2:
        cmp     dword ptr [rbp - 12], 2
        je      .LBB1_4
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_5
.LBB1_4:
        mov     dword ptr [rbp - 4], 0
.LBB1_5:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
three(int, int, int):                            # @three(int, int, int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 8], edi
        mov     dword ptr [rbp - 12], esi
        mov     dword ptr [rbp - 16], edx
        cmp     dword ptr [rbp - 8], 1
        je      .LBB2_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_7
.LBB2_2:
        cmp     dword ptr [rbp - 12], 2
        je      .LBB2_4
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_7
.LBB2_4:
        cmp     dword ptr [rbp - 16], 3
        je      .LBB2_6
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_7
.LBB2_6:
        mov     dword ptr [rbp - 4], 0
.LBB2_7:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     edi, 1
        call    one(int)
        cmp     eax, 0
        je      .LBB3_2
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB3_7
.LBB3_2:
        mov     edi, 1
        mov     esi, 2
        call    two(int, int)
        cmp     eax, 0
        je      .LBB3_4
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB3_7
.LBB3_4:
        mov     edi, 1
        mov     esi, 2
        mov     edx, 3
        call    three(int, int, int)
        cmp     eax, 0
        je      .LBB3_6
        mov     dword ptr [rbp - 4], 4
        jmp     .LBB3_7
.LBB3_6:
        mov     dword ptr [rbp - 4], 0
.LBB3_7:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00084.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @none()() #0 !dbg !7 {
  ret i32 0, !dbg !12
}

define dso_local i32 @one(int)(i32 %0) #0 !dbg !13 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !16, metadata !DIExpression()), !dbg !17
  %4 = load i32, i32* %3, align 4, !dbg !18
  %5 = icmp ne i32 %4, 1, !dbg !20
  br i1 %5, label %6, label %7, !dbg !21

6:
  store i32 1, i32* %2, align 4, !dbg !22
  br label %8, !dbg !22

7:
  store i32 0, i32* %2, align 4, !dbg !23
  br label %8, !dbg !23

8:
  %9 = load i32, i32* %2, align 4, !dbg !24
  ret i32 %9, !dbg !24
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 @two(int, int)(i32 %0, i32 %1) #0 !dbg !25 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !28, metadata !DIExpression()), !dbg !29
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !30, metadata !DIExpression()), !dbg !31
  %6 = load i32, i32* %4, align 4, !dbg !32
  %7 = icmp ne i32 %6, 1, !dbg !34
  br i1 %7, label %8, label %9, !dbg !35

8:
  store i32 1, i32* %3, align 4, !dbg !36
  br label %14, !dbg !36

9:
  %10 = load i32, i32* %5, align 4, !dbg !37
  %11 = icmp ne i32 %10, 2, !dbg !39
  br i1 %11, label %12, label %13, !dbg !40

12:
  store i32 1, i32* %3, align 4, !dbg !41
  br label %14, !dbg !41

13:
  store i32 0, i32* %3, align 4, !dbg !42
  br label %14, !dbg !42

14:
  %15 = load i32, i32* %3, align 4, !dbg !43
  ret i32 %15, !dbg !43
}

define dso_local i32 @three(int, int, int)(i32 %0, i32 %1, i32 %2) #0 !dbg !44 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !47, metadata !DIExpression()), !dbg !48
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !49, metadata !DIExpression()), !dbg !50
  store i32 %2, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !51, metadata !DIExpression()), !dbg !52
  %8 = load i32, i32* %5, align 4, !dbg !53
  %9 = icmp ne i32 %8, 1, !dbg !55
  br i1 %9, label %10, label %11, !dbg !56

10:
  store i32 1, i32* %4, align 4, !dbg !57
  br label %20, !dbg !57

11:
  %12 = load i32, i32* %6, align 4, !dbg !58
  %13 = icmp ne i32 %12, 2, !dbg !60
  br i1 %13, label %14, label %15, !dbg !61

14:
  store i32 1, i32* %4, align 4, !dbg !62
  br label %20, !dbg !62

15:
  %16 = load i32, i32* %7, align 4, !dbg !63
  %17 = icmp ne i32 %16, 3, !dbg !65
  br i1 %17, label %18, label %19, !dbg !66

18:
  store i32 1, i32* %4, align 4, !dbg !67
  br label %20, !dbg !67

19:
  store i32 0, i32* %4, align 4, !dbg !68
  br label %20, !dbg !68

20:
  %21 = load i32, i32* %4, align 4, !dbg !69
  ret i32 %21, !dbg !69
}

define dso_local i32 @main() #2 !dbg !70 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @none()(), !dbg !71
  %3 = icmp ne i32 %2, 0, !dbg !71
  br i1 %3, label %4, label %5, !dbg !73

4:
  store i32 1, i32* %1, align 4, !dbg !74
  br label %18, !dbg !74

5:
  %6 = call i32 @one(int)(i32 1), !dbg !75
  %7 = icmp ne i32 %6, 0, !dbg !75
  br i1 %7, label %8, label %9, !dbg !77

8:
  store i32 2, i32* %1, align 4, !dbg !78
  br label %18, !dbg !78

9:
  %10 = call i32 @two(int, int)(i32 1, i32 2), !dbg !79
  %11 = icmp ne i32 %10, 0, !dbg !79
  br i1 %11, label %12, label %13, !dbg !81

12:
  store i32 3, i32* %1, align 4, !dbg !82
  br label %18, !dbg !82

13:
  %14 = call i32 @three(int, int, int)(i32 1, i32 2, i32 3), !dbg !83
  %15 = icmp ne i32 %14, 0, !dbg !83
  br i1 %15, label %16, label %17, !dbg !85

16:
  store i32 4, i32* %1, align 4, !dbg !86
  br label %18, !dbg !86

17:
  store i32 0, i32* %1, align 4, !dbg !87
  br label %18, !dbg !87

18:
  %19 = load i32, i32* %1, align 4, !dbg !88
  ret i32 %19, !dbg !88
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
none():                               # @none()
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        pop     rbp
        ret
one(int):                                # @one(int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 8], edi
        cmp     dword ptr [rbp - 8], 1
        je      .LBB1_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB1_3
.LBB1_2:
        mov     dword ptr [rbp - 4], 0
.LBB1_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
two(int, int):                               # @two(int, int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 8], edi
        mov     dword ptr [rbp - 12], esi
        cmp     dword ptr [rbp - 8], 1
        je      .LBB2_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_5
.LBB2_2:
        cmp     dword ptr [rbp - 12], 2
        je      .LBB2_4
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB2_5
.LBB2_4:
        mov     dword ptr [rbp - 4], 0
.LBB2_5:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
three(int, int, int):                            # @three(int, int, int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 8], edi
        mov     dword ptr [rbp - 12], esi
        mov     dword ptr [rbp - 16], edx
        cmp     dword ptr [rbp - 8], 1
        je      .LBB3_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB3_7
.LBB3_2:
        cmp     dword ptr [rbp - 12], 2
        je      .LBB3_4
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB3_7
.LBB3_4:
        cmp     dword ptr [rbp - 16], 3
        je      .LBB3_6
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB3_7
.LBB3_6:
        mov     dword ptr [rbp - 4], 0
.LBB3_7:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        call    none()
        cmp     eax, 0
        je      .LBB4_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB4_9
.LBB4_2:
        mov     edi, 1
        call    one(int)
        cmp     eax, 0
        je      .LBB4_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB4_9
.LBB4_4:
        mov     edi, 1
        mov     esi, 2
        call    two(int, int)
        cmp     eax, 0
        je      .LBB4_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB4_9
.LBB4_6:
        mov     edi, 1
        mov     esi, 2
        mov     edx, 3
        call    three(int, int, int)
        cmp     eax, 0
        je      .LBB4_8
        mov     dword ptr [rbp - 4], 4
        jmp     .LBB4_9
.LBB4_8:
        mov     dword ptr [rbp - 4], 0
.LBB4_9:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00085.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00086.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i16, align 2
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i16* %2, metadata !12, metadata !DIExpression()), !dbg !14
  store i16 0, i16* %2, align 2, !dbg !15
  %3 = load i16, i16* %2, align 2, !dbg !16
  %4 = sext i16 %3 to i32, !dbg !16
  %5 = add nsw i32 %4, 1, !dbg !17
  %6 = trunc i32 %5 to i16, !dbg !16
  store i16 %6, i16* %2, align 2, !dbg !18
  %7 = load i16, i16* %2, align 2, !dbg !19
  %8 = sext i16 %7 to i32, !dbg !19
  %9 = icmp ne i32 %8, 1, !dbg !21
  br i1 %9, label %10, label %11, !dbg !22

10:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %12, !dbg !23

11:
  store i32 0, i32* %1, align 4, !dbg !24
  br label %12, !dbg !24

12:
  %13 = load i32, i32* %1, align 4, !dbg !25
  ret i32 %13, !dbg !25
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     word ptr [rbp - 6], 0
        movsx   eax, word ptr [rbp - 6]
        add     eax, 1
        mov     word ptr [rbp - 6], ax
        movsx   ecx, word ptr [rbp - 6]
        cmp     ecx, 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00087.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { i32 ()* }

define dso_local i32 @foo()() #0 !dbg !7 {
  ret i32 0, !dbg !12
}

define dso_local i32 @main() #1 !dbg !13 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.S, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.S* %2, metadata !14, metadata !DIExpression()), !dbg !19
  %3 = getelementptr inbounds %struct.S, %struct.S* %2, i32 0, i32 0, !dbg !20
  store i32 ()* @foo(), i32 ()** %3, align 8, !dbg !21
  %4 = getelementptr inbounds %struct.S, %struct.S* %2, i32 0, i32 0, !dbg !22
  %5 = load i32 ()*, i32 ()** %4, align 8, !dbg !22
  %6 = call i32 %5(), !dbg !23
  ret i32 %6, !dbg !24
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
foo():                                # @foo()
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        movabs  rax, offset foo()
        mov     qword ptr [rbp - 16], rax
        call    qword ptr [rbp - 16]
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00088.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@fptr = dso_local global i32 ()* null, align 8, !dbg !0

define dso_local i32 @main() #0 !dbg !15 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32 ()*, i32 ()** @fptr, align 8, !dbg !16
  %3 = icmp ne i32 ()* %2, null, !dbg !16
  br i1 %3, label %4, label %5, !dbg !18

4:
  store i32 1, i32* %1, align 4, !dbg !19
  br label %6, !dbg !19

5:
  store i32 0, i32* %1, align 4, !dbg !20
  br label %6, !dbg !20

6:
  %7 = load i32, i32* %1, align 4, !dbg !21
  ret i32 %7, !dbg !21
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     qword ptr [fptr], 0
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
fptr:
        .quad   0

",-Wall
source\00089.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { i32 ()* }

@s = dso_local global %struct.S { i32 ()* @zero() }, align 8, !dbg !0

define dso_local i32 @zero()() #0 !dbg !18 {
  ret i32 0, !dbg !19
}

define dso_local %struct.S* @anon()() #0 !dbg !20 {
  ret %struct.S* @s, !dbg !24
}

define dso_local %struct.S* ()* @go()() #0 !dbg !25 {
  ret %struct.S* ()* @anon(), !dbg !30
}

define dso_local i32 @main() #1 !dbg !31 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call %struct.S* ()* @go()(), !dbg !32
  %3 = call %struct.S* %2(), !dbg !32
  %4 = getelementptr inbounds %struct.S, %struct.S* %3, i32 0, i32 0, !dbg !33
  %5 = load i32 ()*, i32 ()** %4, align 8, !dbg !33
  %6 = call i32 %5(), !dbg !32
  ret i32 %6, !dbg !34
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
zero():                               # @zero()
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        pop     rbp
        ret
anon():                               # @anon()
        push    rbp
        mov     rbp, rsp
        movabs  rax, offset s
        pop     rbp
        ret
go():                                 # @go()
        push    rbp
        mov     rbp, rsp
        movabs  rax, offset anon()
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        call    go()
        call    rax
        call    qword ptr [rax]
        add     rsp, 16
        pop     rbp
        ret
s:
        .quad   zero()

",-Wall
source\00090.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@a = dso_local global [3 x i32] [i32 0, i32 1, i32 2], align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !15 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @a, i64 0, i64 0), align 4, !dbg !18
  %3 = icmp ne i32 %2, 0, !dbg !20
  br i1 %3, label %4, label %5, !dbg !21

4:
  store i32 1, i32* %1, align 4, !dbg !22
  br label %14, !dbg !22

5:
  %6 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @a, i64 0, i64 1), align 4, !dbg !23
  %7 = icmp ne i32 %6, 1, !dbg !25
  br i1 %7, label %8, label %9, !dbg !26

8:
  store i32 2, i32* %1, align 4, !dbg !27
  br label %14, !dbg !27

9:
  %10 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @a, i64 0, i64 2), align 4, !dbg !28
  %11 = icmp ne i32 %10, 2, !dbg !30
  br i1 %11, label %12, label %13, !dbg !31

12:
  store i32 3, i32* %1, align 4, !dbg !32
  br label %14, !dbg !32

13:
  store i32 0, i32* %1, align 4, !dbg !33
  br label %14, !dbg !33

14:
  %15 = load i32, i32* %1, align 4, !dbg !34
  ret i32 %15, !dbg !34
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [a], 0
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_2:
        cmp     dword ptr [a+4], 1
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_7
.LBB0_4:
        cmp     dword ptr [a+8], 2
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_7
.LBB0_6:
        mov     dword ptr [rbp - 4], 0
.LBB0_7:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
a:
        .long   0                       # 0x0
        .long   1                       # 0x1
        .long   2                       # 0x2

",-Wall
source\00091.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { i32, [2 x i32] }

@a = dso_local global [1 x %struct.S] [%struct.S { i32 1, [2 x i32] [i32 2, i32 3] }], align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !23 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds ([1 x %struct.S], [1 x %struct.S]* @a, i64 0, i64 0, i32 0), align 4, !dbg !26
  %3 = icmp ne i32 %2, 1, !dbg !28
  br i1 %3, label %4, label %5, !dbg !29

4:
  store i32 1, i32* %1, align 4, !dbg !30
  br label %14, !dbg !30

5:
  %6 = load i32, i32* getelementptr inbounds ([1 x %struct.S], [1 x %struct.S]* @a, i64 0, i64 0, i32 1, i64 0), align 4, !dbg !31
  %7 = icmp ne i32 %6, 2, !dbg !33
  br i1 %7, label %8, label %9, !dbg !34

8:
  store i32 2, i32* %1, align 4, !dbg !35
  br label %14, !dbg !35

9:
  %10 = load i32, i32* getelementptr inbounds ([1 x %struct.S], [1 x %struct.S]* @a, i64 0, i64 0, i32 1, i64 1), align 4, !dbg !36
  %11 = icmp ne i32 %10, 3, !dbg !38
  br i1 %11, label %12, label %13, !dbg !39

12:
  store i32 3, i32* %1, align 4, !dbg !40
  br label %14, !dbg !40

13:
  store i32 0, i32* %1, align 4, !dbg !41
  br label %14, !dbg !41

14:
  %15 = load i32, i32* %1, align 4, !dbg !42
  ret i32 %15, !dbg !42
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [a], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_2:
        cmp     dword ptr [a+4], 2
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_7
.LBB0_4:
        cmp     dword ptr [a+8], 3
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_7
.LBB0_6:
        mov     dword ptr [rbp - 4], 0
.LBB0_7:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
a:
        .long   1                       # 0x1
        .long   2                       # 0x2
        .long   3                       # 0x3

",-Wall
source\00092.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@a = dso_local global [4 x i32] [i32 5, i32 0, i32 2, i32 3], align 16, !dbg !0

define dso_local i32 @main() #0 !dbg !15 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @a, i64 0, i64 0), align 16, !dbg !18
  %3 = icmp ne i32 %2, 5, !dbg !20
  br i1 %3, label %4, label %5, !dbg !21

4:
  store i32 2, i32* %1, align 4, !dbg !22
  br label %18, !dbg !22

5:
  %6 = load i32, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @a, i64 0, i64 1), align 4, !dbg !23
  %7 = icmp ne i32 %6, 0, !dbg !25
  br i1 %7, label %8, label %9, !dbg !26

8:
  store i32 3, i32* %1, align 4, !dbg !27
  br label %18, !dbg !27

9:
  %10 = load i32, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @a, i64 0, i64 2), align 8, !dbg !28
  %11 = icmp ne i32 %10, 2, !dbg !30
  br i1 %11, label %12, label %13, !dbg !31

12:
  store i32 4, i32* %1, align 4, !dbg !32
  br label %18, !dbg !32

13:
  %14 = load i32, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @a, i64 0, i64 3), align 4, !dbg !33
  %15 = icmp ne i32 %14, 3, !dbg !35
  br i1 %15, label %16, label %17, !dbg !36

16:
  store i32 5, i32* %1, align 4, !dbg !37
  br label %18, !dbg !37

17:
  store i32 0, i32* %1, align 4, !dbg !38
  br label %18, !dbg !38

18:
  %19 = load i32, i32* %1, align 4, !dbg !39
  ret i32 %19, !dbg !39
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:1:15: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
int a[] = {5, [2] = 2, 3};
[0;1;32m              ^~~
[0m[1m<source>:1:15: [0m[0;1;35mwarning: [0m[1mmixture of designated and non-designated initializers in the same initializer list is a C99 extension [-Wc99-designator][0m
int a[] = {5, [2] = 2, 3};
[0;1;32m              ^~~~~~~
[0m[1m<source>:1:12: [0m[0;1;30mnote: [0mfirst non-designated initializer is here[0m
int a[] = {5, [2] = 2, 3};
[0;1;32m           ^
[0m2 warnings generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [a], 5
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_9
.LBB0_2:
        cmp     dword ptr [a+4], 0
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_9
.LBB0_4:
        cmp     dword ptr [a+8], 2
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 4
        jmp     .LBB0_9
.LBB0_6:
        cmp     dword ptr [a+12], 3
        je      .LBB0_8
        mov     dword ptr [rbp - 4], 5
        jmp     .LBB0_9
.LBB0_8:
        mov     dword ptr [rbp - 4], 0
.LBB0_9:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
a:
        .long   5                       # 0x5
        .long   0                       # 0x0
        .long   2                       # 0x2
        .long   3                       # 0x3

Standard error:
[1m<source>:1:15: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
int a[] = {5, [2] = 2, 3};
[0;1;32m              ^~~
[0m[1m<source>:1:15: [0m[0;1;35mwarning: [0m[1mmixture of designated and non-designated initializers in the same initializer list is a C99 extension [-Wc99-designator][0m
int a[] = {5, [2] = 2, 3};
[0;1;32m              ^~~~~~~
[0m[1m<source>:1:12: [0m[0;1;30mnote: [0mfirst non-designated initializer is here[0m
int a[] = {5, [2] = 2, 3};
[0;1;32m           ^
[0m2 warnings generated.
",-Wall
source\00093.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@a = dso_local global [4 x i32] [i32 1, i32 2, i32 3, i32 4], align 16, !dbg !0

define dso_local i32 @main() #0 !dbg !15 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !18
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
a:
        .long   1                       # 0x1
        .long   2                       # 0x2
        .long   3                       # 0x3
        .long   4                       # 0x4

",-Wall
source\00094.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00095.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:2:5: [0m[0;1;31merror: [0m[1mredefinition of 'x'[0m
int x = 3;
[0;1;32m    ^
[0m[1m<source>:1:5: [0m[0;1;30mnote: [0mprevious definition is here[0m
int x;
[0;1;32m    ^
[0m[1m<source>:3:5: [0m[0;1;31merror: [0m[1mredefinition of 'x'[0m
int x;
[0;1;32m    ^
[0m[1m<source>:1:5: [0m[0;1;30mnote: [0mprevious definition is here[0m
int x;
[0;1;32m    ^
[0m[1m<source>:10:9: [0m[0;1;31merror: [0m[1mcannot initialize return object of type 'void *' with an rvalue of type 'int (*)()'[0m
        return &main;
[0;1;32m               ^~~~~
[0m3 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:2:5: [0m[0;1;31merror: [0m[1mredefinition of 'x'[0m
int x = 3;
[0;1;32m    ^
[0m[1m<source>:1:5: [0m[0;1;30mnote: [0mprevious definition is here[0m
int x;
[0;1;32m    ^
[0m[1m<source>:3:5: [0m[0;1;31merror: [0m[1mredefinition of 'x'[0m
int x;
[0;1;32m    ^
[0m[1m<source>:1:5: [0m[0;1;30mnote: [0mprevious definition is here[0m
int x;
[0;1;32m    ^
[0m[1m<source>:10:9: [0m[0;1;31merror: [0m[1mcannot initialize return object of type 'void *' with an rvalue of type 'int (*)()'[0m
        return &main;
[0;1;32m               ^~~~~
[0m3 errors generated.
",-Wall
source\00096.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:1:8: [0m[0;1;31merror: [0m[1mredefinition of 'x'[0m
int x, x = 3, x;
[0;1;32m       ^
[0m[1m<source>:1:5: [0m[0;1;30mnote: [0mprevious definition is here[0m
int x, x = 3, x;
[0;1;32m    ^
[0m[1m<source>:1:15: [0m[0;1;31merror: [0m[1mredefinition of 'x'[0m
int x, x = 3, x;
[0;1;32m              ^
[0m[1m<source>:1:5: [0m[0;1;30mnote: [0mprevious definition is here[0m
int x, x = 3, x;
[0;1;32m    ^
[0m2 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:1:8: [0m[0;1;31merror: [0m[1mredefinition of 'x'[0m
int x, x = 3, x;
[0;1;32m       ^
[0m[1m<source>:1:5: [0m[0;1;30mnote: [0mprevious definition is here[0m
int x, x = 3, x;
[0;1;32m    ^
[0m[1m<source>:1:15: [0m[0;1;31merror: [0m[1mredefinition of 'x'[0m
int x, x = 3, x;
[0;1;32m              ^
[0m[1m<source>:1:5: [0m[0;1;30mnote: [0mprevious definition is here[0m
int x, x = 3, x;
[0;1;32m    ^
[0m2 errors generated.
",-Wall
source\00097.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00098.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00099.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
Standard error:
[1m<source>:5:1: [0m[0;1;35mwarning: [0m[1munused function 'vecresize' [-Wunused-function][0m
vecresize(Vec *v, int cap)
[0;1;32m^
[0m1 warning generated.
",-Wall
source\00100.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @foo()() #0 !dbg !7 {
  ret i32 0, !dbg !12
}

define dso_local i32 @main() #1 !dbg !13 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @foo()(), !dbg !14
  ret i32 %2, !dbg !15
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
foo():                                # @foo()
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        call    foo()
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00101.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !14
  br label %3, !dbg !15

3:
  br label %4, !dbg !15

4:
  %5 = load i32, i32* %2, align 4, !dbg !16
  ret i32 %5, !dbg !17
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        jmp     .LBB0_2
.LBB0_2:
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00102.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 1, i32* %2, align 4, !dbg !14
  %3 = load i32, i32* %2, align 4, !dbg !15
  %4 = shl i32 %3, 1, !dbg !17
  %5 = icmp ne i32 %4, 2, !dbg !18
  br i1 %5, label %6, label %7, !dbg !19

6:
  store i32 1, i32* %1, align 4, !dbg !20
  br label %8, !dbg !20

7:
  store i32 0, i32* %1, align 4, !dbg !21
  br label %8, !dbg !21

8:
  %9 = load i32, i32* %1, align 4, !dbg !22
  ret i32 %9, !dbg !22
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     eax, dword ptr [rbp - 8]
        shl     eax, 1
        cmp     eax, 2
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00103.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i8**, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata i8** %3, metadata !18, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.declare(metadata i8*** %4, metadata !20, metadata !DIExpression()), !dbg !22
  store i32 0, i32* %2, align 4, !dbg !23
  %5 = bitcast i32* %2 to i8*, !dbg !24
  store i8* %5, i8** %3, align 8, !dbg !25
  store i8** %3, i8*** %4, align 8, !dbg !26
  %6 = load i8**, i8*** %4, align 8, !dbg !27
  %7 = bitcast i8** %6 to i32**, !dbg !28
  %8 = load i32*, i32** %7, align 8, !dbg !28
  %9 = load i32, i32* %8, align 4, !dbg !29
  ret i32 %9, !dbg !30
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        lea     rax, [rbp - 8]
        mov     qword ptr [rbp - 16], rax
        lea     rax, [rbp - 16]
        mov     qword ptr [rbp - 24], rax
        mov     rax, qword ptr [rbp - 24]
        mov     rax, qword ptr [rax]
        mov     eax, dword ptr [rax]
        pop     rbp
        ret
",-Wall
source\00104.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata i64* %3, metadata !18, metadata !DIExpression()), !dbg !22
  store i32 0, i32* %2, align 4, !dbg !23
  store i64 0, i64* %3, align 8, !dbg !24
  %4 = load i32, i32* %2, align 4, !dbg !25
  %5 = xor i32 %4, -1, !dbg !26
  store i32 %5, i32* %2, align 4, !dbg !27
  %6 = load i32, i32* %2, align 4, !dbg !28
  %7 = icmp ne i32 %6, -1, !dbg !30
  br i1 %7, label %8, label %9, !dbg !31

8:
  store i32 1, i32* %1, align 4, !dbg !32
  br label %17, !dbg !32

9:
  %10 = load i64, i64* %3, align 8, !dbg !33
  %11 = xor i64 %10, -1, !dbg !34
  store i64 %11, i64* %3, align 8, !dbg !35
  %12 = load i32, i32* %2, align 4, !dbg !36
  %13 = sext i32 %12 to i64, !dbg !36
  %14 = icmp ne i64 %13, -1, !dbg !38
  br i1 %14, label %15, label %16, !dbg !39

15:
  store i32 2, i32* %1, align 4, !dbg !40
  br label %17, !dbg !40

16:
  store i32 0, i32* %1, align 4, !dbg !41
  br label %17, !dbg !41

17:
  %18 = load i32, i32* %1, align 4, !dbg !42
  ret i32 %18, !dbg !42
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     qword ptr [rbp - 16], 0
        mov     eax, dword ptr [rbp - 8]
        xor     eax, -1
        mov     dword ptr [rbp - 8], eax
        cmp     dword ptr [rbp - 8], -1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_5
.LBB0_2:
        mov     rax, qword ptr [rbp - 16]
        xor     rax, -1
        mov     qword ptr [rbp - 16], rax
        movsxd  rax, dword ptr [rbp - 8]
        cmp     rax, -1
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_5
.LBB0_4:
        mov     dword ptr [rbp - 4], 0
.LBB0_5:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00105.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !14
  br label %3, !dbg !16

3:
  %4 = load i32, i32* %2, align 4, !dbg !17
  %5 = icmp slt i32 %4, 10, !dbg !19
  br i1 %5, label %6, label %14, !dbg !20

6:
  %7 = load i32, i32* %2, align 4, !dbg !21
  %8 = icmp ne i32 %7, 0, !dbg !21
  br i1 %8, label %10, label %9, !dbg !23

9:
  br label %11, !dbg !24

10:
  br label %11, !dbg !21

11:
  %12 = load i32, i32* %2, align 4, !dbg !25
  %13 = add nsw i32 %12, 1, !dbg !25
  store i32 %13, i32* %2, align 4, !dbg !25
  br label %3, !dbg !26

14:
  ret i32 0, !dbg !29
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 10
        jge     .LBB0_6
        cmp     dword ptr [rbp - 8], 0
        jne     .LBB0_4
        jmp     .LBB0_5
.LBB0_4:                                #   in Loop: Header=BB0_1 Depth=1
        jmp     .LBB0_5
.LBB0_5:                                #   in Loop: Header=BB0_1 Depth=1
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_6:
        xor     eax, eax
        pop     rbp
        ret
",-Wall
source\00106.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S2 = type { %struct.S1 }
%struct.S1 = type { i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.S2, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.S2* %2, metadata !12, metadata !DIExpression()), !dbg !19
  %3 = getelementptr inbounds %struct.S2, %struct.S2* %2, i32 0, i32 0, !dbg !20
  %4 = getelementptr inbounds %struct.S1, %struct.S1* %3, i32 0, i32 0, !dbg !21
  store i32 1, i32* %4, align 4, !dbg !22
  ret i32 0, !dbg !23
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        pop     rbp
        ret
",-Wall
source\00107.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 1, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !13 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @x, align 4, !dbg !16
  %3 = sub nsw i32 %2, 1, !dbg !17
  ret i32 %3, !dbg !18
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [x]
        sub     eax, 1
        pop     rbp
        ret
x:
        .long   1                       # 0x1

",-Wall
source\00108.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00109.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 1, i32* %3, align 4, !dbg !15
  %4 = load i32, i32* %2, align 4, !dbg !16
  %5 = icmp ne i32 %4, 0, !dbg !16
  %6 = zext i1 %5 to i64, !dbg !16
  %7 = select i1 %5, i32 1, i32 0, !dbg !16
  %8 = icmp ne i32 %7, 0, !dbg !16
  br i1 %8, label %9, label %10, !dbg !18

9:
  store i32 1, i32* %1, align 4, !dbg !19
  br label %18, !dbg !19

10:
  %11 = load i32, i32* %3, align 4, !dbg !20
  %12 = icmp ne i32 %11, 0, !dbg !20
  %13 = zext i1 %12 to i64, !dbg !20
  %14 = select i1 %12, i32 0, i32 1, !dbg !20
  %15 = icmp ne i32 %14, 0, !dbg !20
  br i1 %15, label %16, label %17, !dbg !22

16:
  store i32 2, i32* %1, align 4, !dbg !23
  br label %18, !dbg !23

17:
  store i32 0, i32* %1, align 4, !dbg !24
  br label %18, !dbg !24

18:
  %19 = load i32, i32* %1, align 4, !dbg !25
  ret i32 %19, !dbg !25
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     dword ptr [rbp - 12], 1
        mov     ecx, dword ptr [rbp - 8]
        cmp     ecx, 0
        mov     ecx, 1
        cmovne  eax, ecx
        cmp     eax, 0
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_5
.LBB0_2:
        xor     eax, eax
        mov     ecx, dword ptr [rbp - 12]
        cmp     ecx, 0
        mov     ecx, 1
        cmovne  ecx, eax
        cmp     ecx, 0
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_5
.LBB0_4:
        mov     dword ptr [rbp - 4], 0
.LBB0_5:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00110.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @x, align 4, !dbg !15
  ret i32 %2, !dbg !16
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [x]
        pop     rbp
        ret
x:
        .long   0                       # 0x0

",-Wall
source\00111.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i16, align 2
  %3 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i16* %2, metadata !12, metadata !DIExpression()), !dbg !14
  store i16 1, i16* %2, align 2, !dbg !14
  call void @llvm.dbg.declare(metadata i64* %3, metadata !15, metadata !DIExpression()), !dbg !17
  store i64 1, i64* %3, align 8, !dbg !17
  %4 = load i64, i64* %3, align 8, !dbg !18
  %5 = load i16, i16* %2, align 2, !dbg !19
  %6 = sext i16 %5 to i64, !dbg !19
  %7 = sub nsw i64 %6, %4, !dbg !19
  %8 = trunc i64 %7 to i16, !dbg !19
  store i16 %8, i16* %2, align 2, !dbg !19
  %9 = load i16, i16* %2, align 2, !dbg !20
  %10 = sext i16 %9 to i32, !dbg !20
  ret i32 %10, !dbg !21
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     word ptr [rbp - 6], 1
        mov     qword ptr [rbp - 16], 1
        mov     rax, qword ptr [rbp - 16]
        movsx   rcx, word ptr [rbp - 6]
        sub     rcx, rax
        mov     word ptr [rbp - 6], cx
        movsx   eax, word ptr [rbp - 6]
        pop     rbp
        ret
",-Wall
source\00112.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""abc\00"", align 1

define dso_local i32 @main() #0 !dbg !9 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !14
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret

",-Wall
source\00113.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca float, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !13
  call void @llvm.dbg.declare(metadata float* %3, metadata !14, metadata !DIExpression()), !dbg !16
  %4 = load i32, i32* %2, align 4, !dbg !17
  %5 = add nsw i32 %4, 1, !dbg !18
  %6 = sitofp i32 %5 to float, !dbg !17
  store float %6, float* %3, align 4, !dbg !16
  %7 = load float, float* %3, align 4, !dbg !19
  %8 = load i32, i32* %2, align 4, !dbg !20
  %9 = sitofp i32 %8 to float, !dbg !20
  %10 = fcmp oeq float %7, %9, !dbg !21
  %11 = zext i1 %10 to i32, !dbg !19
  ret i32 %11, !dbg !22
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        cvtsi2ss        xmm0, eax
        movss   dword ptr [rbp - 12], xmm0
        movss   xmm0, dword ptr [rbp - 12] # xmm0 = mem[0],zero,zero,zero
        cvtsi2ss        xmm1, dword ptr [rbp - 8]
        ucomiss xmm0, xmm1
        sete    cl
        setnp   dl
        and     cl, dl
        and     cl, 1
        movzx   eax, cl
        pop     rbp
        ret
",-Wall
source\00114.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00115.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@s = dso_local global [4 x i8] c""abc\00"", align 1, !dbg !0

define dso_local i32 @main() #0 !dbg !15 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @s, i64 0, i64 0), align 1, !dbg !19
  %3 = sext i8 %2 to i32, !dbg !19
  %4 = icmp ne i32 %3, 97, !dbg !21
  br i1 %4, label %5, label %6, !dbg !22

5:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %22, !dbg !23

6:
  %7 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @s, i64 0, i64 1), align 1, !dbg !24
  %8 = sext i8 %7 to i32, !dbg !24
  %9 = icmp ne i32 %8, 98, !dbg !26
  br i1 %9, label %10, label %11, !dbg !27

10:
  store i32 2, i32* %1, align 4, !dbg !28
  br label %22, !dbg !28

11:
  %12 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @s, i64 0, i64 2), align 1, !dbg !29
  %13 = sext i8 %12 to i32, !dbg !29
  %14 = icmp ne i32 %13, 99, !dbg !31
  br i1 %14, label %15, label %16, !dbg !32

15:
  store i32 3, i32* %1, align 4, !dbg !33
  br label %22, !dbg !33

16:
  %17 = load i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @s, i64 0, i64 3), align 1, !dbg !34
  %18 = sext i8 %17 to i32, !dbg !34
  %19 = icmp ne i32 %18, 0, !dbg !36
  br i1 %19, label %20, label %21, !dbg !37

20:
  store i32 4, i32* %1, align 4, !dbg !38
  br label %22, !dbg !38

21:
  store i32 0, i32* %1, align 4, !dbg !39
  br label %22, !dbg !39

22:
  %23 = load i32, i32* %1, align 4, !dbg !40
  ret i32 %23, !dbg !40
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        movsx   eax, byte ptr [s]
        cmp     eax, 97
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_9
.LBB0_2:
        movsx   eax, byte ptr [s+1]
        cmp     eax, 98
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_9
.LBB0_4:
        movsx   eax, byte ptr [s+2]
        cmp     eax, 99
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_9
.LBB0_6:
        movsx   eax, byte ptr [s+3]
        cmp     eax, 0
        je      .LBB0_8
        mov     dword ptr [rbp - 4], 4
        jmp     .LBB0_9
.LBB0_8:
        mov     dword ptr [rbp - 4], 0
.LBB0_9:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
s:
        .asciz  ""abc""

",-Wall
source\00116.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @f(int)(i32 %0) #0 !dbg !7 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  %3 = load i32, i32* %2, align 4, !dbg !14
  ret i32 %3, !dbg !15
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 @main() #2 !dbg !16 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @f(int)(i32 0), !dbg !19
  ret i32 %2, !dbg !20
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
f(int):                                  # @f(int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        xor     edi, edi
        mov     dword ptr [rbp - 4], 0
        call    f(int)
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00117.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@__const.main.x = private unnamed_addr constant [2 x i32] [i32 1, i32 0], align 4

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [2 x i32], align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [2 x i32]* %2, metadata !12, metadata !DIExpression()), !dbg !16
  %3 = bitcast [2 x i32]* %2 to i8*, !dbg !16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 bitcast ([2 x i32]* @__const.main.x to i8*), i64 8, i1 false), !dbg !16
  %4 = getelementptr inbounds [2 x i32], [2 x i32]* %2, i64 0, i64 1, !dbg !17
  %5 = load i32, i32* %4, align 4, !dbg !17
  ret i32 %5, !dbg !18
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     rax, qword ptr [.L__const.main.x]
        mov     qword ptr [rbp - 12], rax
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
.L__const.main.x:
        .long   1                       # 0x1
        .long   0                       # 0x0

",-Wall
source\00118.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.anon = type { i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.anon, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.anon* %2, metadata !12, metadata !DIExpression()), !dbg !16
  %3 = bitcast %struct.anon* %2 to i8*, !dbg !16
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 4, i1 false), !dbg !16
  %4 = getelementptr inbounds %struct.anon, %struct.anon* %2, i32 0, i32 0, !dbg !17
  %5 = load i32, i32* %4, align 4, !dbg !17
  ret i32 %5, !dbg !18
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        xor     esi, esi
        mov     dword ptr [rbp - 4], 0
        lea     rax, [rbp - 8]
        mov     rdi, rax
        mov     edx, 4
        call    memset
        mov     eax, dword ptr [rbp - 8]
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00119.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global double 1.000000e+02, align 8, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load double, double* @x, align 8, !dbg !16
  %3 = fcmp olt double %2, 1.000000e+00, !dbg !17
  %4 = zext i1 %3 to i32, !dbg !16
  ret i32 %4, !dbg !18
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
.LCPI0_0:
        .quad   4607182418800017408     # double 1
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        movsd   xmm0, qword ptr [rip + .LCPI0_0] # xmm0 = mem[0],zero
        mov     dword ptr [rbp - 4], 0
        ucomisd xmm0, qword ptr [x]
        seta    al
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
x:
        .quad   4636737291354636288     # double 100

",-Wall
source\00120.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:9:9: [0m[0;1;31merror: [0m[1muse of undeclared identifier 'X'[0m
        return X;
[0;1;32m               ^
[0m1 error generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:9:9: [0m[0;1;31merror: [0m[1muse of undeclared identifier 'X'[0m
        return X;
[0;1;32m               ^
[0m1 error generated.
",-Wall
source\00121.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@a = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @f(int)(i32 1), !dbg !15
  %3 = call i32 @g(int)(i32 1), !dbg !16
  %4 = sub nsw i32 %2, %3, !dbg !17
  ret i32 %4, !dbg !18
}

define dso_local i32 @f(int)(i32 %0) #1 !dbg !19 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !22, metadata !DIExpression()), !dbg !23
  %3 = load i32, i32* %2, align 4, !dbg !24
  ret i32 %3, !dbg !25
}

define dso_local i32 @g(int)(i32 %0) #1 !dbg !26 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !27, metadata !DIExpression()), !dbg !28
  %3 = load i32, i32* %2, align 4, !dbg !29
  ret i32 %3, !dbg !30
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     edi, 1
        call    f(int)
        mov     edi, 1
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        call    g(int)
        mov     ecx, dword ptr [rbp - 8] # 4-byte Reload
        sub     ecx, eax
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
f(int):                                  # @f(int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
g(int):                                  # @g(int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
a:
        .long   0                       # 0x0

",-Wall
source\00122.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00123.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@x = dso_local global double 1.000000e+02, align 8, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load double, double* @x, align 8, !dbg !16
  %3 = fcmp olt double %2, 1.000000e+00, !dbg !17
  %4 = zext i1 %3 to i32, !dbg !16
  ret i32 %4, !dbg !18
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
.LCPI0_0:
        .quad   4607182418800017408     # double 1
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        movsd   xmm0, qword ptr [rip + .LCPI0_0] # xmm0 = mem[0],zero
        mov     dword ptr [rbp - 4], 0
        ucomisd xmm0, qword ptr [x]
        seta    al
        and     al, 1
        movzx   eax, al
        pop     rbp
        ret
x:
        .quad   4636737291354636288     # double 100

",-Wall
source\00124.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @f2(int, int)(i32 %0, i32 %1) #0 !dbg !7 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !14, metadata !DIExpression()), !dbg !15
  %5 = load i32, i32* %3, align 4, !dbg !16
  %6 = load i32, i32* %4, align 4, !dbg !17
  %7 = sub nsw i32 %5, %6, !dbg !18
  ret i32 %7, !dbg !19
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 (i32, i32)* @f1(int, int)(i32 %0, i32 %1) #0 !dbg !20 {
  %3 = alloca i32 (i32, i32)*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !24, metadata !DIExpression()), !dbg !25
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !26, metadata !DIExpression()), !dbg !27
  %6 = load i32, i32* %4, align 4, !dbg !28
  %7 = load i32, i32* %5, align 4, !dbg !30
  %8 = icmp ne i32 %6, %7, !dbg !31
  br i1 %8, label %9, label %10, !dbg !32

9:
  store i32 (i32, i32)* @f2(int, int), i32 (i32, i32)** %3, align 8, !dbg !33
  br label %11, !dbg !33

10:
  store i32 (i32, i32)* null, i32 (i32, i32)** %3, align 8, !dbg !34
  br label %11, !dbg !34

11:
  %12 = load i32 (i32, i32)*, i32 (i32, i32)** %3, align 8, !dbg !35
  ret i32 (i32, i32)* %12, !dbg !35
}

define dso_local i32 @main() #2 !dbg !36 {
  %1 = alloca i32, align 4
  %2 = alloca i32 (i32, i32)* (i32, i32)*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32 (i32, i32)* (i32, i32)** %2, metadata !39, metadata !DIExpression()), !dbg !41
  store i32 (i32, i32)* (i32, i32)* @f1(int, int), i32 (i32, i32)* (i32, i32)** %2, align 8, !dbg !41
  %3 = load i32 (i32, i32)* (i32, i32)*, i32 (i32, i32)* (i32, i32)** %2, align 8, !dbg !42
  %4 = call i32 (i32, i32)* %3(i32 0, i32 2), !dbg !43
  %5 = call i32 %4(i32 2, i32 2), !dbg !44
  ret i32 %5, !dbg !45
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
f2(int, int):                                # @f2(int, int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     dword ptr [rbp - 8], esi
        mov     eax, dword ptr [rbp - 4]
        sub     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
f1(int, int):                                # @f1(int, int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 12], edi
        mov     dword ptr [rbp - 16], esi
        mov     eax, dword ptr [rbp - 12]
        cmp     eax, dword ptr [rbp - 16]
        je      .LBB1_2
        movabs  rax, offset f2(int, int)
        mov     qword ptr [rbp - 8], rax
        jmp     .LBB1_3
.LBB1_2:
        mov     qword ptr [rbp - 8], 0
.LBB1_3:
        mov     rax, qword ptr [rbp - 8]
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        xor     edi, edi
        mov     dword ptr [rbp - 4], 0
        movabs  rax, offset f1(int, int)
        mov     qword ptr [rbp - 16], rax
        mov     esi, 2
        call    qword ptr [rbp - 16]
        mov     ecx, 2
        mov     edi, ecx
        mov     esi, ecx
        call    rax
        add     rsp, 16
        pop     rbp
        ret
",-Wall
source\00125.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [13 x i8] c""hello world\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !12
  ret i32 0, !dbg !13
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""hello world\n""

",-Wall
source\00126.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 3, i32* %2, align 4, !dbg !14
  %3 = load i32, i32* %2, align 4, !dbg !15
  %4 = icmp ne i32 %3, 0, !dbg !15
  %5 = xor i1 %4, true, !dbg !16
  %6 = zext i1 %5 to i32, !dbg !16
  store i32 %6, i32* %2, align 4, !dbg !17
  %7 = load i32, i32* %2, align 4, !dbg !18
  %8 = icmp ne i32 %7, 0, !dbg !18
  %9 = xor i1 %8, true, !dbg !19
  %10 = zext i1 %9 to i32, !dbg !19
  store i32 %10, i32* %2, align 4, !dbg !20
  %11 = load i32, i32* %2, align 4, !dbg !21
  %12 = xor i32 %11, -1, !dbg !22
  store i32 %12, i32* %2, align 4, !dbg !23
  %13 = load i32, i32* %2, align 4, !dbg !24
  %14 = sub nsw i32 0, %13, !dbg !25
  store i32 %14, i32* %2, align 4, !dbg !26
  %15 = load i32, i32* %2, align 4, !dbg !27
  %16 = icmp ne i32 %15, 2, !dbg !29
  br i1 %16, label %17, label %18, !dbg !30

17:
  store i32 1, i32* %1, align 4, !dbg !31
  br label %19, !dbg !31

18:
  store i32 0, i32* %1, align 4, !dbg !32
  br label %19, !dbg !32

19:
  %20 = load i32, i32* %1, align 4, !dbg !33
  ret i32 %20, !dbg !33
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 3
        cmp     dword ptr [rbp - 8], 0
        setne   cl
        xor     cl, -1
        and     cl, 1
        movzx   edx, cl
        mov     dword ptr [rbp - 8], edx
        cmp     dword ptr [rbp - 8], 0
        setne   cl
        xor     cl, -1
        and     cl, 1
        movzx   edx, cl
        mov     dword ptr [rbp - 8], edx
        mov     edx, dword ptr [rbp - 8]
        xor     edx, -1
        mov     dword ptr [rbp - 8], edx
        sub     eax, dword ptr [rbp - 8]
        mov     dword ptr [rbp - 8], eax
        cmp     dword ptr [rbp - 8], 2
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00127.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@c = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @c, align 4, !dbg !15
  %3 = icmp ne i32 %2, 0, !dbg !15
  br i1 %3, label %4, label %5, !dbg !22

4:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %6, !dbg !23

5:
  store i32 0, i32* %1, align 4, !dbg !24
  br label %6, !dbg !24

6:
  %7 = load i32, i32* %1, align 4, !dbg !25
  ret i32 %7, !dbg !25
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [c], 0
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_3
.LBB0_2:
        mov     dword ptr [rbp - 4], 0
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
c:
        .long   0                       # 0x0

",-Wall
source\00128.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@a = dso_local global i32 0, align 4, !dbg !0
@b = dso_local global i32 0, align 4, !dbg !6
@c = dso_local global i8 0, align 1, !dbg !10
@d = dso_local global i8 0, align 1, !dbg !13
@e = dso_local global i8 0, align 1, !dbg !16
@f = dso_local global i64 0, align 8, !dbg !19
@g = dso_local global i64 0, align 8, !dbg !22
@h = dso_local global i64 0, align 8, !dbg !25
@i = dso_local global i64 0, align 8, !dbg !28
@j = dso_local global i16 0, align 2, !dbg !31
@k = dso_local global i16 0, align 2, !dbg !34

define dso_local i32 @main() #0 !dbg !42 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @b, align 4, !dbg !45
  store i32 %2, i32* @a, align 4, !dbg !46
  %3 = load i8, i8* @c, align 1, !dbg !47
  %4 = sext i8 %3 to i32, !dbg !47
  store i32 %4, i32* @a, align 4, !dbg !48
  %5 = load i8, i8* @d, align 1, !dbg !49
  %6 = sext i8 %5 to i32, !dbg !49
  store i32 %6, i32* @a, align 4, !dbg !50
  %7 = load i8, i8* @e, align 1, !dbg !51
  %8 = zext i8 %7 to i32, !dbg !51
  store i32 %8, i32* @a, align 4, !dbg !52
  %9 = load i64, i64* @f, align 8, !dbg !53
  %10 = trunc i64 %9 to i32, !dbg !53
  store i32 %10, i32* @a, align 4, !dbg !54
  %11 = load i64, i64* @g, align 8, !dbg !55
  %12 = trunc i64 %11 to i32, !dbg !55
  store i32 %12, i32* @a, align 4, !dbg !56
  %13 = load i64, i64* @h, align 8, !dbg !57
  %14 = trunc i64 %13 to i32, !dbg !57
  store i32 %14, i32* @a, align 4, !dbg !58
  %15 = load i64, i64* @i, align 8, !dbg !59
  %16 = trunc i64 %15 to i32, !dbg !59
  store i32 %16, i32* @a, align 4, !dbg !60
  %17 = load i16, i16* @j, align 2, !dbg !61
  %18 = sext i16 %17 to i32, !dbg !61
  store i32 %18, i32* @a, align 4, !dbg !62
  %19 = load i16, i16* @k, align 2, !dbg !63
  %20 = zext i16 %19 to i32, !dbg !63
  store i32 %20, i32* @a, align 4, !dbg !64
  %21 = load i32, i32* @a, align 4, !dbg !65
  store i32 %21, i32* @b, align 4, !dbg !66
  %22 = load i8, i8* @c, align 1, !dbg !67
  %23 = sext i8 %22 to i32, !dbg !67
  store i32 %23, i32* @b, align 4, !dbg !68
  %24 = load i8, i8* @d, align 1, !dbg !69
  %25 = sext i8 %24 to i32, !dbg !69
  store i32 %25, i32* @b, align 4, !dbg !70
  %26 = load i8, i8* @e, align 1, !dbg !71
  %27 = zext i8 %26 to i32, !dbg !71
  store i32 %27, i32* @b, align 4, !dbg !72
  %28 = load i64, i64* @f, align 8, !dbg !73
  %29 = trunc i64 %28 to i32, !dbg !73
  store i32 %29, i32* @b, align 4, !dbg !74
  %30 = load i64, i64* @g, align 8, !dbg !75
  %31 = trunc i64 %30 to i32, !dbg !75
  store i32 %31, i32* @b, align 4, !dbg !76
  %32 = load i64, i64* @h, align 8, !dbg !77
  %33 = trunc i64 %32 to i32, !dbg !77
  store i32 %33, i32* @b, align 4, !dbg !78
  %34 = load i64, i64* @i, align 8, !dbg !79
  %35 = trunc i64 %34 to i32, !dbg !79
  store i32 %35, i32* @b, align 4, !dbg !80
  %36 = load i16, i16* @j, align 2, !dbg !81
  %37 = sext i16 %36 to i32, !dbg !81
  store i32 %37, i32* @b, align 4, !dbg !82
  %38 = load i16, i16* @k, align 2, !dbg !83
  %39 = zext i16 %38 to i32, !dbg !83
  store i32 %39, i32* @b, align 4, !dbg !84
  %40 = load i32, i32* @a, align 4, !dbg !85
  %41 = trunc i32 %40 to i8, !dbg !85
  store i8 %41, i8* @c, align 1, !dbg !86
  %42 = load i32, i32* @b, align 4, !dbg !87
  %43 = trunc i32 %42 to i8, !dbg !87
  store i8 %43, i8* @c, align 1, !dbg !88
  %44 = load i8, i8* @d, align 1, !dbg !89
  store i8 %44, i8* @c, align 1, !dbg !90
  %45 = load i8, i8* @e, align 1, !dbg !91
  store i8 %45, i8* @c, align 1, !dbg !92
  %46 = load i64, i64* @f, align 8, !dbg !93
  %47 = trunc i64 %46 to i8, !dbg !93
  store i8 %47, i8* @c, align 1, !dbg !94
  %48 = load i64, i64* @g, align 8, !dbg !95
  %49 = trunc i64 %48 to i8, !dbg !95
  store i8 %49, i8* @c, align 1, !dbg !96
  %50 = load i64, i64* @h, align 8, !dbg !97
  %51 = trunc i64 %50 to i8, !dbg !97
  store i8 %51, i8* @c, align 1, !dbg !98
  %52 = load i64, i64* @i, align 8, !dbg !99
  %53 = trunc i64 %52 to i8, !dbg !99
  store i8 %53, i8* @c, align 1, !dbg !100
  %54 = load i16, i16* @j, align 2, !dbg !101
  %55 = trunc i16 %54 to i8, !dbg !101
  store i8 %55, i8* @c, align 1, !dbg !102
  %56 = load i16, i16* @k, align 2, !dbg !103
  %57 = trunc i16 %56 to i8, !dbg !103
  store i8 %57, i8* @c, align 1, !dbg !104
  %58 = load i32, i32* @a, align 4, !dbg !105
  %59 = trunc i32 %58 to i8, !dbg !105
  store i8 %59, i8* @d, align 1, !dbg !106
  %60 = load i32, i32* @b, align 4, !dbg !107
  %61 = trunc i32 %60 to i8, !dbg !107
  store i8 %61, i8* @d, align 1, !dbg !108
  %62 = load i8, i8* @c, align 1, !dbg !109
  store i8 %62, i8* @d, align 1, !dbg !110
  %63 = load i8, i8* @e, align 1, !dbg !111
  store i8 %63, i8* @d, align 1, !dbg !112
  %64 = load i64, i64* @f, align 8, !dbg !113
  %65 = trunc i64 %64 to i8, !dbg !113
  store i8 %65, i8* @d, align 1, !dbg !114
  %66 = load i64, i64* @g, align 8, !dbg !115
  %67 = trunc i64 %66 to i8, !dbg !115
  store i8 %67, i8* @d, align 1, !dbg !116
  %68 = load i64, i64* @h, align 8, !dbg !117
  %69 = trunc i64 %68 to i8, !dbg !117
  store i8 %69, i8* @d, align 1, !dbg !118
  %70 = load i64, i64* @i, align 8, !dbg !119
  %71 = trunc i64 %70 to i8, !dbg !119
  store i8 %71, i8* @d, align 1, !dbg !120
  %72 = load i16, i16* @j, align 2, !dbg !121
  %73 = trunc i16 %72 to i8, !dbg !121
  store i8 %73, i8* @d, align 1, !dbg !122
  %74 = load i16, i16* @k, align 2, !dbg !123
  %75 = trunc i16 %74 to i8, !dbg !123
  store i8 %75, i8* @d, align 1, !dbg !124
  %76 = load i32, i32* @a, align 4, !dbg !125
  %77 = trunc i32 %76 to i8, !dbg !125
  store i8 %77, i8* @e, align 1, !dbg !126
  %78 = load i32, i32* @b, align 4, !dbg !127
  %79 = trunc i32 %78 to i8, !dbg !127
  store i8 %79, i8* @e, align 1, !dbg !128
  %80 = load i8, i8* @c, align 1, !dbg !129
  store i8 %80, i8* @e, align 1, !dbg !130
  %81 = load i8, i8* @d, align 1, !dbg !131
  store i8 %81, i8* @e, align 1, !dbg !132
  %82 = load i64, i64* @f, align 8, !dbg !133
  %83 = trunc i64 %82 to i8, !dbg !133
  store i8 %83, i8* @e, align 1, !dbg !134
  %84 = load i64, i64* @g, align 8, !dbg !135
  %85 = trunc i64 %84 to i8, !dbg !135
  store i8 %85, i8* @e, align 1, !dbg !136
  %86 = load i64, i64* @h, align 8, !dbg !137
  %87 = trunc i64 %86 to i8, !dbg !137
  store i8 %87, i8* @e, align 1, !dbg !138
  %88 = load i64, i64* @i, align 8, !dbg !139
  %89 = trunc i64 %88 to i8, !dbg !139
  store i8 %89, i8* @e, align 1, !dbg !140
  %90 = load i16, i16* @j, align 2, !dbg !141
  %91 = trunc i16 %90 to i8, !dbg !141
  store i8 %91, i8* @e, align 1, !dbg !142
  %92 = load i16, i16* @k, align 2, !dbg !143
  %93 = trunc i16 %92 to i8, !dbg !143
  store i8 %93, i8* @e, align 1, !dbg !144
  %94 = load i32, i32* @a, align 4, !dbg !145
  %95 = sext i32 %94 to i64, !dbg !145
  store i64 %95, i64* @f, align 8, !dbg !146
  %96 = load i32, i32* @b, align 4, !dbg !147
  %97 = zext i32 %96 to i64, !dbg !147
  store i64 %97, i64* @f, align 8, !dbg !148
  %98 = load i8, i8* @c, align 1, !dbg !149
  %99 = sext i8 %98 to i64, !dbg !149
  store i64 %99, i64* @f, align 8, !dbg !150
  %100 = load i8, i8* @d, align 1, !dbg !151
  %101 = sext i8 %100 to i64, !dbg !151
  store i64 %101, i64* @f, align 8, !dbg !152
  %102 = load i8, i8* @e, align 1, !dbg !153
  %103 = zext i8 %102 to i64, !dbg !153
  store i64 %103, i64* @f, align 8, !dbg !154
  %104 = load i64, i64* @g, align 8, !dbg !155
  store i64 %104, i64* @f, align 8, !dbg !156
  %105 = load i64, i64* @h, align 8, !dbg !157
  store i64 %105, i64* @f, align 8, !dbg !158
  %106 = load i64, i64* @i, align 8, !dbg !159
  store i64 %106, i64* @f, align 8, !dbg !160
  %107 = load i16, i16* @j, align 2, !dbg !161
  %108 = sext i16 %107 to i64, !dbg !161
  store i64 %108, i64* @f, align 8, !dbg !162
  %109 = load i16, i16* @k, align 2, !dbg !163
  %110 = zext i16 %109 to i64, !dbg !163
  store i64 %110, i64* @f, align 8, !dbg !164
  %111 = load i32, i32* @a, align 4, !dbg !165
  %112 = sext i32 %111 to i64, !dbg !165
  store i64 %112, i64* @g, align 8, !dbg !166
  %113 = load i32, i32* @b, align 4, !dbg !167
  %114 = zext i32 %113 to i64, !dbg !167
  store i64 %114, i64* @g, align 8, !dbg !168
  %115 = load i8, i8* @c, align 1, !dbg !169
  %116 = sext i8 %115 to i64, !dbg !169
  store i64 %116, i64* @g, align 8, !dbg !170
  %117 = load i8, i8* @d, align 1, !dbg !171
  %118 = sext i8 %117 to i64, !dbg !171
  store i64 %118, i64* @g, align 8, !dbg !172
  %119 = load i8, i8* @e, align 1, !dbg !173
  %120 = zext i8 %119 to i64, !dbg !173
  store i64 %120, i64* @g, align 8, !dbg !174
  %121 = load i64, i64* @f, align 8, !dbg !175
  store i64 %121, i64* @g, align 8, !dbg !176
  %122 = load i64, i64* @h, align 8, !dbg !177
  store i64 %122, i64* @g, align 8, !dbg !178
  %123 = load i64, i64* @i, align 8, !dbg !179
  store i64 %123, i64* @g, align 8, !dbg !180
  %124 = load i16, i16* @j, align 2, !dbg !181
  %125 = sext i16 %124 to i64, !dbg !181
  store i64 %125, i64* @g, align 8, !dbg !182
  %126 = load i16, i16* @k, align 2, !dbg !183
  %127 = zext i16 %126 to i64, !dbg !183
  store i64 %127, i64* @g, align 8, !dbg !184
  %128 = load i32, i32* @a, align 4, !dbg !185
  %129 = sext i32 %128 to i64, !dbg !185
  store i64 %129, i64* @h, align 8, !dbg !186
  %130 = load i32, i32* @b, align 4, !dbg !187
  %131 = zext i32 %130 to i64, !dbg !187
  store i64 %131, i64* @h, align 8, !dbg !188
  %132 = load i8, i8* @c, align 1, !dbg !189
  %133 = sext i8 %132 to i64, !dbg !189
  store i64 %133, i64* @h, align 8, !dbg !190
  %134 = load i8, i8* @d, align 1, !dbg !191
  %135 = sext i8 %134 to i64, !dbg !191
  store i64 %135, i64* @h, align 8, !dbg !192
  %136 = load i8, i8* @e, align 1, !dbg !193
  %137 = zext i8 %136 to i64, !dbg !193
  store i64 %137, i64* @h, align 8, !dbg !194
  %138 = load i64, i64* @f, align 8, !dbg !195
  store i64 %138, i64* @h, align 8, !dbg !196
  %139 = load i64, i64* @g, align 8, !dbg !197
  store i64 %139, i64* @h, align 8, !dbg !198
  %140 = load i64, i64* @i, align 8, !dbg !199
  store i64 %140, i64* @h, align 8, !dbg !200
  %141 = load i16, i16* @j, align 2, !dbg !201
  %142 = sext i16 %141 to i64, !dbg !201
  store i64 %142, i64* @h, align 8, !dbg !202
  %143 = load i16, i16* @k, align 2, !dbg !203
  %144 = zext i16 %143 to i64, !dbg !203
  store i64 %144, i64* @h, align 8, !dbg !204
  %145 = load i32, i32* @a, align 4, !dbg !205
  %146 = sext i32 %145 to i64, !dbg !205
  store i64 %146, i64* @i, align 8, !dbg !206
  %147 = load i32, i32* @b, align 4, !dbg !207
  %148 = zext i32 %147 to i64, !dbg !207
  store i64 %148, i64* @i, align 8, !dbg !208
  %149 = load i8, i8* @c, align 1, !dbg !209
  %150 = sext i8 %149 to i64, !dbg !209
  store i64 %150, i64* @i, align 8, !dbg !210
  %151 = load i8, i8* @d, align 1, !dbg !211
  %152 = sext i8 %151 to i64, !dbg !211
  store i64 %152, i64* @i, align 8, !dbg !212
  %153 = load i8, i8* @e, align 1, !dbg !213
  %154 = zext i8 %153 to i64, !dbg !213
  store i64 %154, i64* @i, align 8, !dbg !214
  %155 = load i64, i64* @f, align 8, !dbg !215
  store i64 %155, i64* @i, align 8, !dbg !216
  %156 = load i64, i64* @g, align 8, !dbg !217
  store i64 %156, i64* @i, align 8, !dbg !218
  %157 = load i64, i64* @h, align 8, !dbg !219
  store i64 %157, i64* @i, align 8, !dbg !220
  %158 = load i16, i16* @j, align 2, !dbg !221
  %159 = sext i16 %158 to i64, !dbg !221
  store i64 %159, i64* @i, align 8, !dbg !222
  %160 = load i16, i16* @k, align 2, !dbg !223
  %161 = zext i16 %160 to i64, !dbg !223
  store i64 %161, i64* @i, align 8, !dbg !224
  %162 = load i32, i32* @a, align 4, !dbg !225
  %163 = trunc i32 %162 to i16, !dbg !225
  store i16 %163, i16* @j, align 2, !dbg !226
  %164 = load i32, i32* @b, align 4, !dbg !227
  %165 = trunc i32 %164 to i16, !dbg !227
  store i16 %165, i16* @j, align 2, !dbg !228
  %166 = load i8, i8* @c, align 1, !dbg !229
  %167 = sext i8 %166 to i16, !dbg !229
  store i16 %167, i16* @j, align 2, !dbg !230
  %168 = load i8, i8* @d, align 1, !dbg !231
  %169 = sext i8 %168 to i16, !dbg !231
  store i16 %169, i16* @j, align 2, !dbg !232
  %170 = load i8, i8* @e, align 1, !dbg !233
  %171 = zext i8 %170 to i16, !dbg !233
  store i16 %171, i16* @j, align 2, !dbg !234
  %172 = load i64, i64* @f, align 8, !dbg !235
  %173 = trunc i64 %172 to i16, !dbg !235
  store i16 %173, i16* @j, align 2, !dbg !236
  %174 = load i64, i64* @g, align 8, !dbg !237
  %175 = trunc i64 %174 to i16, !dbg !237
  store i16 %175, i16* @j, align 2, !dbg !238
  %176 = load i64, i64* @h, align 8, !dbg !239
  %177 = trunc i64 %176 to i16, !dbg !239
  store i16 %177, i16* @j, align 2, !dbg !240
  %178 = load i64, i64* @i, align 8, !dbg !241
  %179 = trunc i64 %178 to i16, !dbg !241
  store i16 %179, i16* @j, align 2, !dbg !242
  %180 = load i16, i16* @k, align 2, !dbg !243
  store i16 %180, i16* @j, align 2, !dbg !244
  %181 = load i32, i32* @a, align 4, !dbg !245
  %182 = trunc i32 %181 to i16, !dbg !245
  store i16 %182, i16* @k, align 2, !dbg !246
  %183 = load i32, i32* @b, align 4, !dbg !247
  %184 = trunc i32 %183 to i16, !dbg !247
  store i16 %184, i16* @k, align 2, !dbg !248
  %185 = load i8, i8* @c, align 1, !dbg !249
  %186 = sext i8 %185 to i16, !dbg !249
  store i16 %186, i16* @k, align 2, !dbg !250
  %187 = load i8, i8* @d, align 1, !dbg !251
  %188 = sext i8 %187 to i16, !dbg !251
  store i16 %188, i16* @k, align 2, !dbg !252
  %189 = load i8, i8* @e, align 1, !dbg !253
  %190 = zext i8 %189 to i16, !dbg !253
  store i16 %190, i16* @k, align 2, !dbg !254
  %191 = load i64, i64* @f, align 8, !dbg !255
  %192 = trunc i64 %191 to i16, !dbg !255
  store i16 %192, i16* @k, align 2, !dbg !256
  %193 = load i64, i64* @g, align 8, !dbg !257
  %194 = trunc i64 %193 to i16, !dbg !257
  store i16 %194, i16* @k, align 2, !dbg !258
  %195 = load i64, i64* @h, align 8, !dbg !259
  %196 = trunc i64 %195 to i16, !dbg !259
  store i16 %196, i16* @k, align 2, !dbg !260
  %197 = load i16, i16* @j, align 2, !dbg !261
  store i16 %197, i16* @k, align 2, !dbg !262
  %198 = load i64, i64* @i, align 8, !dbg !263
  %199 = trunc i64 %198 to i16, !dbg !263
  store i16 %199, i16* @k, align 2, !dbg !264
  ret i32 0, !dbg !265
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        push    r15
        push    r14
        push    r13
        push    r12
        push    rbx
        xor     eax, eax
        mov     dword ptr [rbp - 44], 0
        mov     ecx, dword ptr [b]
        mov     dword ptr [a], ecx
        movsx   ecx, byte ptr [c]
        mov     dword ptr [a], ecx
        movsx   ecx, byte ptr [d]
        mov     dword ptr [a], ecx
        movzx   ecx, byte ptr [e]
        mov     dword ptr [a], ecx
        mov     rdx, qword ptr [f]
        mov     dword ptr [a], edx
        mov     rsi, qword ptr [g]
        mov     dword ptr [a], esi
        mov     rdi, qword ptr [h]
        mov     dword ptr [a], edi
        mov     r8, qword ptr [i]
        mov     dword ptr [a], r8d
        movsx   ecx, word ptr [j]
        mov     dword ptr [a], ecx
        movzx   ecx, word ptr [k]
        mov     dword ptr [a], ecx
        mov     ecx, dword ptr [a]
        mov     dword ptr [b], ecx
        movsx   ecx, byte ptr [c]
        mov     dword ptr [b], ecx
        movsx   ecx, byte ptr [d]
        mov     dword ptr [b], ecx
        movzx   ecx, byte ptr [e]
        mov     dword ptr [b], ecx
        mov     r9, qword ptr [f]
        mov     dword ptr [b], r9d
        mov     r10, qword ptr [g]
        mov     dword ptr [b], r10d
        mov     r11, qword ptr [h]
        mov     dword ptr [b], r11d
        mov     rbx, qword ptr [i]
        mov     dword ptr [b], ebx
        movsx   ecx, word ptr [j]
        mov     dword ptr [b], ecx
        movzx   ecx, word ptr [k]
        mov     dword ptr [b], ecx
        mov     ecx, dword ptr [a]
        mov     byte ptr [c], cl
        mov     edx, dword ptr [b]
        mov     byte ptr [c], dl
        mov     cl, byte ptr [d]
        mov     byte ptr [c], cl
        mov     cl, byte ptr [e]
        mov     byte ptr [c], cl
        mov     r14, qword ptr [f]
        mov     byte ptr [c], r14b
        mov     r15, qword ptr [g]
        mov     byte ptr [c], r15b
        mov     r12, qword ptr [h]
        mov     byte ptr [c], r12b
        mov     r13, qword ptr [i]
        mov     byte ptr [c], r13b
        mov     cx, word ptr [j]
        mov     byte ptr [c], cl
        mov     cx, word ptr [k]
        mov     byte ptr [c], cl
        mov     esi, dword ptr [a]
        mov     byte ptr [d], sil
        mov     edi, dword ptr [b]
        mov     byte ptr [d], dil
        mov     cl, byte ptr [c]
        mov     byte ptr [d], cl
        mov     cl, byte ptr [e]
        mov     byte ptr [d], cl
        mov     rcx, qword ptr [f]
        mov     byte ptr [d], cl
        mov     rcx, qword ptr [g]
        mov     byte ptr [d], cl
        mov     rcx, qword ptr [h]
        mov     byte ptr [d], cl
        mov     rcx, qword ptr [i]
        mov     byte ptr [d], cl
        mov     cx, word ptr [j]
        mov     byte ptr [d], cl
        mov     cx, word ptr [k]
        mov     byte ptr [d], cl
        mov     r8d, dword ptr [a]
        mov     byte ptr [e], r8b
        mov     r9d, dword ptr [b]
        mov     byte ptr [e], r9b
        mov     cl, byte ptr [c]
        mov     byte ptr [e], cl
        mov     cl, byte ptr [d]
        mov     byte ptr [e], cl
        mov     rcx, qword ptr [f]
        mov     byte ptr [e], cl
        mov     rcx, qword ptr [g]
        mov     byte ptr [e], cl
        mov     rcx, qword ptr [h]
        mov     byte ptr [e], cl
        mov     rcx, qword ptr [i]
        mov     byte ptr [e], cl
        mov     cx, word ptr [j]
        mov     byte ptr [e], cl
        mov     cx, word ptr [k]
        mov     byte ptr [e], cl
        movsxd  rcx, dword ptr [a]
        mov     qword ptr [f], rcx
        mov     r10d, dword ptr [b]
        mov     ecx, r10d
        mov     qword ptr [f], rcx
        movsx   rcx, byte ptr [c]
        mov     qword ptr [f], rcx
        movsx   rcx, byte ptr [d]
        mov     qword ptr [f], rcx
        movzx   r10d, byte ptr [e]
        mov     ecx, r10d
        mov     qword ptr [f], rcx
        mov     rcx, qword ptr [g]
        mov     qword ptr [f], rcx
        mov     rcx, qword ptr [h]
        mov     qword ptr [f], rcx
        mov     rcx, qword ptr [i]
        mov     qword ptr [f], rcx
        movsx   rcx, word ptr [j]
        mov     qword ptr [f], rcx
        movzx   r10d, word ptr [k]
        mov     ecx, r10d
        mov     qword ptr [f], rcx
        movsxd  rcx, dword ptr [a]
        mov     qword ptr [g], rcx
        mov     r10d, dword ptr [b]
        mov     ecx, r10d
        mov     qword ptr [g], rcx
        movsx   rcx, byte ptr [c]
        mov     qword ptr [g], rcx
        movsx   rcx, byte ptr [d]
        mov     qword ptr [g], rcx
        movzx   r10d, byte ptr [e]
        mov     ecx, r10d
        mov     qword ptr [g], rcx
        mov     rcx, qword ptr [f]
        mov     qword ptr [g], rcx
        mov     rcx, qword ptr [h]
        mov     qword ptr [g], rcx
        mov     rcx, qword ptr [i]
        mov     qword ptr [g], rcx
        movsx   rcx, word ptr [j]
        mov     qword ptr [g], rcx
        movzx   r10d, word ptr [k]
        mov     ecx, r10d
        mov     qword ptr [g], rcx
        movsxd  rcx, dword ptr [a]
        mov     qword ptr [h], rcx
        mov     r10d, dword ptr [b]
        mov     ecx, r10d
        mov     qword ptr [h], rcx
        movsx   rcx, byte ptr [c]
        mov     qword ptr [h], rcx
        movsx   rcx, byte ptr [d]
        mov     qword ptr [h], rcx
        movzx   r10d, byte ptr [e]
        mov     ecx, r10d
        mov     qword ptr [h], rcx
        mov     rcx, qword ptr [f]
        mov     qword ptr [h], rcx
        mov     rcx, qword ptr [g]
        mov     qword ptr [h], rcx
        mov     rcx, qword ptr [i]
        mov     qword ptr [h], rcx
        movsx   rcx, word ptr [j]
        mov     qword ptr [h], rcx
        movzx   r10d, word ptr [k]
        mov     ecx, r10d
        mov     qword ptr [h], rcx
        movsxd  rcx, dword ptr [a]
        mov     qword ptr [i], rcx
        mov     r10d, dword ptr [b]
        mov     ecx, r10d
        mov     qword ptr [i], rcx
        movsx   rcx, byte ptr [c]
        mov     qword ptr [i], rcx
        movsx   rcx, byte ptr [d]
        mov     qword ptr [i], rcx
        movzx   r10d, byte ptr [e]
        mov     ecx, r10d
        mov     qword ptr [i], rcx
        mov     rcx, qword ptr [f]
        mov     qword ptr [i], rcx
        mov     rcx, qword ptr [g]
        mov     qword ptr [i], rcx
        mov     rcx, qword ptr [h]
        mov     qword ptr [i], rcx
        movsx   rcx, word ptr [j]
        mov     qword ptr [i], rcx
        movzx   r10d, word ptr [k]
        mov     ecx, r10d
        mov     qword ptr [i], rcx
        mov     r10d, dword ptr [a]
        mov     word ptr [j], r10w
        mov     r11d, dword ptr [b]
        mov     word ptr [j], r11w
        movsx   ebx, byte ptr [c]
        mov     word ptr [j], bx
        movsx   edx, byte ptr [d]
        mov     word ptr [j], dx
        movzx   esi, byte ptr [e]
        mov     word ptr [j], si
        mov     rcx, qword ptr [f]
        mov     word ptr [j], cx
        mov     rdi, qword ptr [g]
        mov     word ptr [j], di
        mov     r8, qword ptr [h]
        mov     word ptr [j], r8w
        mov     r9, qword ptr [i]
        mov     word ptr [j], r9w
        mov     cx, word ptr [k]
        mov     word ptr [j], cx
        mov     r14d, dword ptr [a]
        mov     word ptr [k], r14w
        mov     r15d, dword ptr [b]
        mov     word ptr [k], r15w
        movsx   r12d, byte ptr [c]
        mov     word ptr [k], r12w
        movsx   r13d, byte ptr [d]
        mov     word ptr [k], r13w
        movzx   ecx, byte ptr [e]
        mov     word ptr [k], cx
        mov     rcx, qword ptr [f]
        mov     word ptr [k], cx
        mov     rcx, qword ptr [g]
        mov     word ptr [k], cx
        mov     rcx, qword ptr [h]
        mov     word ptr [k], cx
        mov     cx, word ptr [j]
        mov     word ptr [k], cx
        mov     rcx, qword ptr [i]
        mov     word ptr [k], cx
        pop     rbx
        pop     r12
        pop     r13
        pop     r14
        pop     r15
        pop     rbp
        ret
a:
        .long   0                       # 0x0

b:
        .long   0                       # 0x0

c:
        .byte   0                       # 0x0

d:
        .byte   0                       # 0x0

e:
        .byte   0                       # 0x0

f:
        .quad   0                       # 0x0

g:
        .quad   0                       # 0x0

h:
        .quad   0                       # 0x0

i:
        .quad   0                       # 0x0

j:
        .short  0                       # 0x0

k:
        .short  0                       # 0x0

",-Wall
source\00129.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.s = type { %""struct.s::s1"" }
%""struct.s::s1"" = type { i32, %""struct.s::s1::s2"" }
%""struct.s::s1::s2"" = type { i32 }

@s2 = dso_local global %struct.s zeroinitializer, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !22 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.s, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  br label %4, !dbg !25

4:
  call void @llvm.dbg.label(metadata !26), !dbg !27
  ret i32 0, !dbg !28
}

declare void @llvm.dbg.label(metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        xor     eax, eax
        pop     rbp
        ret
s2:
        .zero   8

",-Wall
source\00130.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [2 x [4 x i8]], align 1
  %3 = alloca [4 x i8]*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca [4 x i32], align 16
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [2 x [4 x i8]]* %2, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.declare(metadata [4 x i8]** %3, metadata !19, metadata !DIExpression()), !dbg !23
  call void @llvm.dbg.declare(metadata i8** %4, metadata !24, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.declare(metadata [4 x i32]* %5, metadata !27, metadata !DIExpression()), !dbg !29
  %6 = getelementptr inbounds [2 x [4 x i8]], [2 x [4 x i8]]* %2, i64 0, i64 0, !dbg !30
  store [4 x i8]* %6, [4 x i8]** %3, align 8, !dbg !31
  %7 = getelementptr inbounds [2 x [4 x i8]], [2 x [4 x i8]]* %2, i64 0, i64 1, !dbg !32
  %8 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 3, !dbg !32
  store i8* %8, i8** %4, align 8, !dbg !33
  %9 = getelementptr inbounds [2 x [4 x i8]], [2 x [4 x i8]]* %2, i64 0, i64 1, !dbg !34
  %10 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i64 0, i64 3, !dbg !34
  store i8 2, i8* %10, align 1, !dbg !35
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0, !dbg !36
  store i32 2, i32* %11, align 16, !dbg !37
  %12 = getelementptr inbounds [2 x [4 x i8]], [2 x [4 x i8]]* %2, i64 0, i64 1, !dbg !38
  %13 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 3, !dbg !38
  %14 = load i8, i8* %13, align 1, !dbg !38
  %15 = sext i8 %14 to i32, !dbg !38
  %16 = icmp ne i32 %15, 2, !dbg !40
  br i1 %16, label %17, label %18, !dbg !41

17:
  store i32 1, i32* %1, align 4, !dbg !42
  br label %38, !dbg !42

18:
  %19 = load [4 x i8]*, [4 x i8]** %3, align 8, !dbg !43
  %20 = getelementptr inbounds [4 x i8], [4 x i8]* %19, i64 1, !dbg !43
  %21 = getelementptr inbounds [4 x i8], [4 x i8]* %20, i64 0, i64 3, !dbg !43
  %22 = load i8, i8* %21, align 1, !dbg !43
  %23 = sext i8 %22 to i32, !dbg !43
  %24 = icmp ne i32 %23, 2, !dbg !45
  br i1 %24, label %25, label %26, !dbg !46

25:
  store i32 1, i32* %1, align 4, !dbg !47
  br label %38, !dbg !47

26:
  %27 = load i8*, i8** %4, align 8, !dbg !48
  %28 = load i8, i8* %27, align 1, !dbg !50
  %29 = sext i8 %28 to i32, !dbg !50
  %30 = icmp ne i32 %29, 2, !dbg !51
  br i1 %30, label %31, label %32, !dbg !52

31:
  store i32 1, i32* %1, align 4, !dbg !53
  br label %38, !dbg !53

32:
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0, !dbg !54
  %34 = load i32, i32* %33, align 16, !dbg !54
  %35 = icmp ne i32 %34, 2, !dbg !56
  br i1 %35, label %36, label %37, !dbg !57

36:
  store i32 1, i32* %1, align 4, !dbg !58
  br label %38, !dbg !58

37:
  store i32 0, i32* %1, align 4, !dbg !59
  br label %38, !dbg !59

38:
  %39 = load i32, i32* %1, align 4, !dbg !60
  ret i32 %39, !dbg !60
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        lea     rax, [rbp - 12]
        mov     dword ptr [rbp - 4], 0
        mov     qword ptr [rbp - 24], rax
        add     rax, 4
        add     rax, 3
        mov     qword ptr [rbp - 32], rax
        mov     byte ptr [rbp - 5], 2
        mov     dword ptr [rbp - 48], 2
        movsx   ecx, byte ptr [rbp - 5]
        cmp     ecx, 2
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_9
.LBB0_2:
        mov     rax, qword ptr [rbp - 24]
        movsx   ecx, byte ptr [rax + 7]
        cmp     ecx, 2
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_9
.LBB0_4:
        mov     rax, qword ptr [rbp - 32]
        movsx   ecx, byte ptr [rax]
        cmp     ecx, 2
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_9
.LBB0_6:
        cmp     dword ptr [rbp - 48], 2
        je      .LBB0_8
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_9
.LBB0_8:
        mov     dword ptr [rbp - 4], 0
.LBB0_9:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
",-Wall
source\00131.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [7 x i8] c""Hello\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !12
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !13
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !14
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !15
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !16
  ret i32 0, !dbg !17
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 32
        pop     rbp
        ret
.L.str:
        .asciz  ""Hello\n""

",-Wall
source\00132.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [13 x i8] c""Hello world\0A\00"", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c""Count = %d\0A\00"", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c""String 'hello', 'there' is '%s', '%s'\0A\00"", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c""hello\00"", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c""there\00"", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c""Character 'A' is '%c'\0A\00"", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c""Character 'a' is '%c'\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !12
  call void @llvm.dbg.declare(metadata i32* %2, metadata !13, metadata !DIExpression()), !dbg !14
  store i32 -5, i32* %2, align 4, !dbg !15
  br label %4, !dbg !17

4:
  %5 = load i32, i32* %2, align 4, !dbg !18
  %6 = icmp sle i32 %5, 5, !dbg !20
  br i1 %6, label %7, label %13, !dbg !21

7:
  %8 = load i32, i32* %2, align 4, !dbg !22
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 %8), !dbg !23
  br label %10, !dbg !23

10:
  %11 = load i32, i32* %2, align 4, !dbg !24
  %12 = add nsw i32 %11, 1, !dbg !24
  store i32 %12, i32* %2, align 4, !dbg !24
  br label %4, !dbg !25

13:
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0)), !dbg !28
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 65), !dbg !29
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0), i32 97), !dbg !30
  ret i32 0, !dbg !31
}

declare dso_local i32 @printf(i8*, ...) #1

declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 8], -5
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 5
        jg      .LBB0_4
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_4:
        movabs  rdi, offset .L.str.2
        movabs  rsi, offset .L.str.3
        movabs  rdx, offset .L.str.4
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.5
        mov     esi, 65
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.6
        mov     esi, 97
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 32
        pop     rbp
        ret
.L.str:
        .asciz  ""Hello world\n""

.L.str.1:
        .asciz  ""Count = %d\n""

.L.str.2:
        .asciz  ""String 'hello', 'there' is '%s', '%s'\n""

.L.str.3:
        .asciz  ""hello""

.L.str.4:
        .asciz  ""there""

.L.str.5:
        .asciz  ""Character 'A' is '%c'\n""

.L.str.6:
        .asciz  ""Character 'a' is '%c'\n""

",-Wall
source\00133.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !10 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i32* %3, metadata !16, metadata !DIExpression()), !dbg !17
  store i32 1, i32* %2, align 4, !dbg !18
  store i32 -1, i32* %2, align 4, !dbg !19
  store i32 -1, i32* %2, align 4, !dbg !20
  store i32 -1, i32* %2, align 4, !dbg !21
  store i32 -1, i32* %2, align 4, !dbg !22
  store i32 3, i32* %2, align 4, !dbg !23
  store i32 0, i32* %2, align 4, !dbg !24
  store i32 0, i32* %2, align 4, !dbg !25
  store i32 1, i32* %3, align 4, !dbg !26
  store i32 -1, i32* %3, align 4, !dbg !27
  store i32 -1, i32* %3, align 4, !dbg !28
  store i32 -1, i32* %3, align 4, !dbg !29
  store i32 -1, i32* %3, align 4, !dbg !30
  store i32 0, i32* %3, align 4, !dbg !31
  store i32 3, i32* %3, align 4, !dbg !32
  store i32 0, i32* %3, align 4, !dbg !33
  ret i32 0, !dbg !34
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     dword ptr [rbp - 8], -1
        mov     dword ptr [rbp - 8], -1
        mov     dword ptr [rbp - 8], -1
        mov     dword ptr [rbp - 8], -1
        mov     dword ptr [rbp - 8], 3
        mov     dword ptr [rbp - 8], 0
        mov     dword ptr [rbp - 8], 0
        mov     dword ptr [rbp - 12], 1
        mov     dword ptr [rbp - 12], -1
        mov     dword ptr [rbp - 12], -1
        mov     dword ptr [rbp - 12], -1
        mov     dword ptr [rbp - 12], -1
        mov     dword ptr [rbp - 12], 0
        mov     dword ptr [rbp - 12], 3
        mov     dword ptr [rbp - 12], 0
        pop     rbp
        ret
",-Wall
source\00134.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !9 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i64* %2, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i64* %3, metadata !16, metadata !DIExpression()), !dbg !18
  store i64 1, i64* %2, align 8, !dbg !19
  store i64 -1, i64* %2, align 8, !dbg !20
  store i64 -1, i64* %2, align 8, !dbg !21
  store i64 4294967295, i64* %2, align 8, !dbg !22
  store i64 -1, i64* %2, align 8, !dbg !23
  store i64 3, i64* %2, align 8, !dbg !24
  store i64 0, i64* %2, align 8, !dbg !25
  store i64 0, i64* %2, align 8, !dbg !26
  store i64 1, i64* %3, align 8, !dbg !27
  store i64 -1, i64* %3, align 8, !dbg !28
  store i64 -1, i64* %3, align 8, !dbg !29
  store i64 4294967295, i64* %3, align 8, !dbg !30
  store i64 -1, i64* %3, align 8, !dbg !31
  store i64 3, i64* %3, align 8, !dbg !32
  store i64 0, i64* %3, align 8, !dbg !33
  store i64 0, i64* %3, align 8, !dbg !34
  ret i32 0, !dbg !35
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        mov     qword ptr [rbp - 16], 1
        mov     qword ptr [rbp - 16], -1
        mov     qword ptr [rbp - 16], -1
        mov     ecx, 4294967295
        mov     qword ptr [rbp - 16], rcx
        mov     qword ptr [rbp - 16], -1
        mov     qword ptr [rbp - 16], 3
        mov     qword ptr [rbp - 16], 0
        mov     qword ptr [rbp - 16], 0
        mov     qword ptr [rbp - 24], 1
        mov     qword ptr [rbp - 24], -1
        mov     qword ptr [rbp - 24], -1
        mov     qword ptr [rbp - 24], rcx
        mov     qword ptr [rbp - 24], -1
        mov     qword ptr [rbp - 24], 3
        mov     qword ptr [rbp - 24], 0
        mov     qword ptr [rbp - 24], 0
        pop     rbp
        ret
",-Wall
source\00135.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i64* %2, metadata !12, metadata !DIExpression()), !dbg !14
  call void @llvm.dbg.declare(metadata i64* %3, metadata !15, metadata !DIExpression()), !dbg !17
  store i64 1, i64* %2, align 8, !dbg !18
  store i64 -1, i64* %2, align 8, !dbg !19
  store i64 -1, i64* %2, align 8, !dbg !20
  store i64 4294967295, i64* %2, align 8, !dbg !21
  store i64 -1, i64* %2, align 8, !dbg !22
  store i64 3, i64* %2, align 8, !dbg !23
  store i64 1, i64* %2, align 8, !dbg !24
  store i64 1, i64* %3, align 8, !dbg !25
  store i64 -1, i64* %3, align 8, !dbg !26
  store i64 -1, i64* %3, align 8, !dbg !27
  store i64 4294967295, i64* %3, align 8, !dbg !28
  store i64 -1, i64* %3, align 8, !dbg !29
  store i64 3, i64* %3, align 8, !dbg !30
  store i64 0, i64* %3, align 8, !dbg !31
  ret i32 0, !dbg !32
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        mov     qword ptr [rbp - 16], 1
        mov     qword ptr [rbp - 16], -1
        mov     qword ptr [rbp - 16], -1
        mov     ecx, 4294967295
        mov     qword ptr [rbp - 16], rcx
        mov     qword ptr [rbp - 16], -1
        mov     qword ptr [rbp - 16], 3
        mov     qword ptr [rbp - 16], 1
        mov     qword ptr [rbp - 24], 1
        mov     qword ptr [rbp - 24], -1
        mov     qword ptr [rbp - 24], -1
        mov     qword ptr [rbp - 24], rcx
        mov     qword ptr [rbp - 24], -1
        mov     qword ptr [rbp - 24], 3
        mov     qword ptr [rbp - 24], 0
        pop     rbp
        ret
",-Wall
source\00136.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:23:6: [0m[0;1;31merror: [0m[1mredefinition of 'e_'[0m
        int e_;
[0;1;32m            ^
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mprevious definition is here[0m
                int e_;
[0;1;32m                    ^
[0m[1m<source>:24:6: [0m[0;1;31merror: [0m[1mredefinition of 'f_'[0m
        int f_;
[0;1;32m            ^
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mprevious definition is here[0m
                int f_;
[0;1;32m                    ^
[0m2 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:23:6: [0m[0;1;31merror: [0m[1mredefinition of 'e_'[0m
        int e_;
[0;1;32m            ^
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mprevious definition is here[0m
                int e_;
[0;1;32m                    ^
[0m[1m<source>:24:6: [0m[0;1;31merror: [0m[1mredefinition of 'f_'[0m
        int f_;
[0;1;32m            ^
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mprevious definition is here[0m
                int f_;
[0;1;32m                    ^
[0m2 errors generated.
",-Wall
source\00137.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [25 x i8] c""hello is better than bye\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8** %2, metadata !12, metadata !DIExpression()), !dbg !15
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8** %2, align 8, !dbg !16
  %3 = load i8*, i8** %2, align 8, !dbg !17
  %4 = load i8, i8* %3, align 1, !dbg !18
  %5 = sext i8 %4 to i32, !dbg !18
  %6 = icmp eq i32 %5, 104, !dbg !19
  %7 = zext i1 %6 to i64, !dbg !20
  %8 = select i1 %6, i32 0, i32 1, !dbg !20
  ret i32 %8, !dbg !21
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

Standard error:
[1m<source>:7:6: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        p = x(hello)  "" is better than bye"";
[0;1;32m            ^
[0m[1m<source>:1:14: [0m[0;1;30mnote: [0mexpanded from macro 'x'[0m
#define x(y) #y
[0;1;32m             ^
[0m[1m<scratch space>:2:1: [0m[0;1;30mnote: [0mexpanded from here[0m
""hello""
[0;1;32m^
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        movabs  rcx, offset .L.str
        mov     qword ptr [rbp - 16], rcx
        mov     rcx, qword ptr [rbp - 16]
        movsx   edx, byte ptr [rcx]
        cmp     edx, 104
        mov     edx, 1
        cmove   edx, eax
        mov     eax, edx
        pop     rbp
        ret
.L.str:
        .asciz  ""hello is better than bye""

Standard error:
[1m<source>:7:6: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        p = x(hello)  "" is better than bye"";
[0;1;32m            ^
[0m[1m<source>:1:14: [0m[0;1;30mnote: [0mexpanded from macro 'x'[0m
#define x(y) #y
[0;1;32m             ^
[0m[1m<scratch space>:2:1: [0m[0;1;30mnote: [0mexpanded from here[0m
""hello""
[0;1;32m^
[0m1 warning generated.
",-Wall
source\00138.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [3 x i8] c""hi\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8** %2, metadata !12, metadata !DIExpression()), !dbg !15
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %2, align 8, !dbg !15
  %3 = load i8*, i8** %2, align 8, !dbg !16
  %4 = getelementptr inbounds i8, i8* %3, i64 1, !dbg !16
  %5 = load i8, i8* %4, align 1, !dbg !16
  %6 = sext i8 %5 to i32, !dbg !16
  %7 = icmp eq i32 %6, 105, !dbg !17
  %8 = zext i1 %7 to i64, !dbg !18
  %9 = select i1 %7, i32 0, i32 1, !dbg !18
  ret i32 %9, !dbg !19
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

Standard error:
[1m<source>:7:16: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        char *a = A(M,""hi"");
[0;1;32m                      ^
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        movabs  rcx, offset .L.str
        mov     qword ptr [rbp - 16], rcx
        mov     rcx, qword ptr [rbp - 16]
        movsx   edx, byte ptr [rcx + 1]
        cmp     edx, 105
        mov     edx, 1
        cmove   edx, eax
        mov     eax, edx
        pop     rbp
        ret
.L.str:
        .asciz  ""hi""

Standard error:
[1m<source>:7:16: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
        char *a = A(M,""hi"");
[0;1;32m                      ^
[0m1 warning generated.
",-Wall
source\00139.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !13
  %3 = load i32, i32* %2, align 4, !dbg !14
  %4 = mul nsw i32 2, %3, !dbg !14
  ret i32 %4, !dbg !15
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     eax, dword ptr [rbp - 8]
        shl     eax, 1
        pop     rbp
        ret
",-Wall
source\00140.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.foo = type { i32, i32, i32, i8*, float }

define dso_local i32 @f1(foo, foo*, int, ...)(%struct.foo* byval(%struct.foo) align 8 %0, %struct.foo* %1, i32 %2, ...) #0 !dbg !7 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.foo*, align 8
  %6 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.foo* %0, metadata !23, metadata !DIExpression()), !dbg !24
  store %struct.foo* %1, %struct.foo** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.foo** %5, metadata !25, metadata !DIExpression()), !dbg !26
  store i32 %2, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !27, metadata !DIExpression()), !dbg !28
  %7 = getelementptr inbounds %struct.foo, %struct.foo* %0, i32 0, i32 0, !dbg !29
  %8 = load i32, i32* %7, align 8, !dbg !29
  %9 = load %struct.foo*, %struct.foo** %5, align 8, !dbg !31
  %10 = getelementptr inbounds %struct.foo, %struct.foo* %9, i32 0, i32 0, !dbg !32
  %11 = load i32, i32* %10, align 8, !dbg !32
  %12 = icmp ne i32 %8, %11, !dbg !33
  br i1 %12, label %13, label %14, !dbg !34

13:
  store i32 0, i32* %4, align 4, !dbg !35
  br label %20, !dbg !35

14:
  %15 = load %struct.foo*, %struct.foo** %5, align 8, !dbg !36
  %16 = getelementptr inbounds %struct.foo, %struct.foo* %15, i32 0, i32 1, !dbg !37
  %17 = load i32, i32* %16, align 4, !dbg !37
  %18 = load i32, i32* %6, align 4, !dbg !38
  %19 = add nsw i32 %17, %18, !dbg !39
  store i32 %19, i32* %4, align 4, !dbg !40
  br label %20, !dbg !40

20:
  %21 = load i32, i32* %4, align 4, !dbg !41
  ret i32 %21, !dbg !41
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 @main() #2 !dbg !42 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.foo, align 8
  %3 = alloca %struct.foo, align 8
  %4 = alloca %struct.foo, align 8
  %5 = alloca %struct.foo, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.foo* %2, metadata !45, metadata !DIExpression()), !dbg !46
  %6 = getelementptr inbounds %struct.foo, %struct.foo* %2, i32 0, i32 1, !dbg !47
  store i32 1, i32* %6, align 4, !dbg !48
  %7 = getelementptr inbounds %struct.foo, %struct.foo* %2, i32 0, i32 0, !dbg !49
  store i32 1, i32* %7, align 8, !dbg !50
  %8 = bitcast %struct.foo* %3 to i8*, !dbg !51
  %9 = bitcast %struct.foo* %2 to i8*, !dbg !51
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 32, i1 false), !dbg !51
  %10 = call i32 (%struct.foo*, %struct.foo*, i32, ...) @f1(foo, foo*, int, ...)(%struct.foo* byval(%struct.foo) align 8 %3, %struct.foo* %2, i32 2), !dbg !52
  %11 = bitcast %struct.foo* %4 to i8*, !dbg !53
  %12 = bitcast %struct.foo* %2 to i8*, !dbg !53
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 32, i1 false), !dbg !53
  %13 = bitcast %struct.foo* %5 to i8*, !dbg !54
  %14 = bitcast %struct.foo* %2 to i8*, !dbg !54
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 32, i1 false), !dbg !54
  %15 = call i32 (%struct.foo*, %struct.foo*, i32, ...) @f1(foo, foo*, int, ...)(%struct.foo* byval(%struct.foo) align 8 %4, %struct.foo* %2, i32 2, i32 1, %struct.foo* byval(%struct.foo) align 8 %5, %struct.foo* %2), !dbg !55
  ret i32 0, !dbg !56
}

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { argmemonly nounwind willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
f1(foo, foo*, int, ...):                         # @f1(foo, foo*, int, ...)
        push    rbp
        mov     rbp, rsp
        lea     rax, [rbp + 16]
        mov     qword ptr [rbp - 16], rdi
        mov     dword ptr [rbp - 20], esi
        mov     ecx, dword ptr [rax]
        mov     rax, qword ptr [rbp - 16]
        cmp     ecx, dword ptr [rax]
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 0
        jmp     .LBB0_3
.LBB0_2:
        mov     rax, qword ptr [rbp - 16]
        mov     ecx, dword ptr [rax + 4]
        add     ecx, dword ptr [rbp - 20]
        mov     dword ptr [rbp - 4], ecx
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 208
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 36], 1
        mov     dword ptr [rbp - 40], 1
        mov     rax, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 72], rax
        mov     rax, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 64], rax
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 56], rax
        mov     rax, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 48], rax
        lea     rax, [rbp - 72]
        mov     rcx, qword ptr [rax]
        mov     qword ptr [rsp], rcx
        mov     rcx, qword ptr [rax + 8]
        mov     qword ptr [rsp + 8], rcx
        mov     rcx, qword ptr [rax + 16]
        mov     qword ptr [rsp + 16], rcx
        mov     rax, qword ptr [rax + 24]
        mov     qword ptr [rsp + 24], rax
        lea     rdi, [rbp - 40]
        mov     esi, 2
        mov     al, 0
        call    f1(foo, foo*, int, ...)
        mov     rcx, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 104], rcx
        mov     rcx, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 96], rcx
        mov     rcx, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 88], rcx
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 80], rcx
        mov     rcx, qword ptr [rbp - 40]
        mov     qword ptr [rbp - 136], rcx
        mov     rcx, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 128], rcx
        mov     rcx, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 120], rcx
        mov     rcx, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 112], rcx
        lea     rcx, [rbp - 104]
        mov     rdx, qword ptr [rcx]
        mov     qword ptr [rsp], rdx
        mov     rdx, qword ptr [rcx + 8]
        mov     qword ptr [rsp + 8], rdx
        mov     rdx, qword ptr [rcx + 16]
        mov     qword ptr [rsp + 16], rdx
        mov     rcx, qword ptr [rcx + 24]
        mov     qword ptr [rsp + 24], rcx
        lea     rcx, [rbp - 40]
        mov     rdi, rcx
        mov     esi, 2
        mov     edx, 1
        lea     r8, [rbp - 136]
        mov     r9, qword ptr [r8]
        mov     qword ptr [rsp + 32], r9
        mov     r9, qword ptr [r8 + 8]
        mov     qword ptr [rsp + 40], r9
        mov     r9, qword ptr [r8 + 16]
        mov     qword ptr [rsp + 48], r9
        mov     r8, qword ptr [r8 + 24]
        mov     qword ptr [rsp + 56], r8
        mov     dword ptr [rbp - 140], eax # 4-byte Spill
        mov     al, 0
        call    f1(foo, foo*, int, ...)
        xor     edx, edx
        mov     dword ptr [rbp - 144], eax # 4-byte Spill
        mov     eax, edx
        add     rsp, 208
        pop     rbp
        ret
",-Wall
source\00141.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i32* %4, metadata !16, metadata !DIExpression()), !dbg !17
  %5 = load i32, i32* %2, align 4, !dbg !18
  %6 = load i32, i32* %3, align 4, !dbg !19
  %7 = add nsw i32 %5, %6, !dbg !20
  store i32 %7, i32* %4, align 4, !dbg !21
  %8 = load i32, i32* %2, align 4, !dbg !22
  %9 = load i32, i32* %3, align 4, !dbg !23
  %10 = add nsw i32 %8, %9, !dbg !24
  store i32 %10, i32* %4, align 4, !dbg !25
  ret i32 0, !dbg !26
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        mov     ecx, dword ptr [rbp - 8]
        add     ecx, dword ptr [rbp - 12]
        mov     dword ptr [rbp - 16], ecx
        mov     ecx, dword ptr [rbp - 8]
        add     ecx, dword ptr [rbp - 12]
        mov     dword ptr [rbp - 16], ecx
        pop     rbp
        ret
Standard error:
[1m<source>:11:17: [0m[0;1;35mwarning: [0m[1mvariable 'foo' is uninitialized when used here [-Wuninitialized][0m
        CAT(foo,bar) = foo + bar;
[0;1;32m                       ^~~
[0m[1m<source>:9:9: [0m[0;1;30mnote: [0minitialize the variable 'foo' to silence this warning[0m
        int foo, bar, foobar;
[0;1;32m               ^
[0m[0;32m                = 0
[0m[1m<source>:11:23: [0m[0;1;35mwarning: [0m[1mvariable 'bar' is uninitialized when used here [-Wuninitialized][0m
        CAT(foo,bar) = foo + bar;
[0;1;32m                             ^~~
[0m[1m<source>:9:14: [0m[0;1;30mnote: [0minitialize the variable 'bar' to silence this warning[0m
        int foo, bar, foobar;
[0;1;32m                    ^
[0m[0;32m                     = 0
[0m2 warnings generated.
",-Wall
source\00142.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@c = dso_local global i32 0, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !12 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @c, align 4, !dbg !15
  ret i32 %2, !dbg !16
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [c]
        pop     rbp
        ret
c:
        .long   0                       # 0x0

",-Wall
source\00143.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i16*, align 8
  %5 = alloca i16*, align 8
  %6 = alloca [39 x i16], align 16
  %7 = alloca [39 x i16], align 16
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i16** %4, metadata !16, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.declare(metadata i16** %5, metadata !20, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.declare(metadata [39 x i16]* %6, metadata !22, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.declare(metadata [39 x i16]* %7, metadata !27, metadata !DIExpression()), !dbg !28
  store i32 0, i32* %3, align 4, !dbg !29
  br label %8, !dbg !31

8:
  %9 = load i32, i32* %3, align 4, !dbg !32
  %10 = icmp slt i32 %9, 39, !dbg !34
  br i1 %10, label %11, label %23, !dbg !35

11:
  %12 = load i32, i32* %3, align 4, !dbg !36
  %13 = trunc i32 %12 to i16, !dbg !36
  %14 = load i32, i32* %3, align 4, !dbg !38
  %15 = sext i32 %14 to i64, !dbg !39
  %16 = getelementptr inbounds [39 x i16], [39 x i16]* %6, i64 0, i64 %15, !dbg !39
  store i16 %13, i16* %16, align 2, !dbg !40
  %17 = load i32, i32* %3, align 4, !dbg !41
  %18 = sext i32 %17 to i64, !dbg !42
  %19 = getelementptr inbounds [39 x i16], [39 x i16]* %7, i64 0, i64 %18, !dbg !42
  store i16 0, i16* %19, align 2, !dbg !43
  br label %20, !dbg !44

20:
  %21 = load i32, i32* %3, align 4, !dbg !45
  %22 = add nsw i32 %21, 1, !dbg !45
  store i32 %22, i32* %3, align 4, !dbg !45
  br label %8, !dbg !46

23:
  %24 = getelementptr inbounds [39 x i16], [39 x i16]* %6, i64 0, i64 0, !dbg !49
  store i16* %24, i16** %4, align 8, !dbg !50
  %25 = getelementptr inbounds [39 x i16], [39 x i16]* %7, i64 0, i64 0, !dbg !51
  store i16* %25, i16** %5, align 8, !dbg !52
  store i32 39, i32* %2, align 4, !dbg !53
  %26 = load i32, i32* %2, align 4, !dbg !54
  %27 = add nsw i32 %26, 7, !dbg !55
  %28 = sdiv i32 %27, 8, !dbg !56
  store i32 %28, i32* %3, align 4, !dbg !57
  %29 = load i32, i32* %2, align 4, !dbg !58
  %30 = srem i32 %29, 8, !dbg !59
  switch i32 %30, label %85 [
    i32 0, label %31
    i32 7, label %38
    i32 6, label %44
    i32 5, label %50
    i32 4, label %56
    i32 3, label %62
    i32 2, label %68
    i32 1, label %74
  ], !dbg !60

31:
  br label %32, !dbg !61

32:
  %33 = load i16*, i16** %4, align 8, !dbg !63
  %34 = getelementptr inbounds i16, i16* %33, i32 1, !dbg !63
  store i16* %34, i16** %4, align 8, !dbg !63
  %35 = load i16, i16* %33, align 2, !dbg !65
  %36 = load i16*, i16** %5, align 8, !dbg !66
  %37 = getelementptr inbounds i16, i16* %36, i32 1, !dbg !66
  store i16* %37, i16** %5, align 8, !dbg !66
  store i16 %35, i16* %36, align 2, !dbg !67
  br label %38, !dbg !68

38:
  %39 = load i16*, i16** %4, align 8, !dbg !69
  %40 = getelementptr inbounds i16, i16* %39, i32 1, !dbg !69
  store i16* %40, i16** %4, align 8, !dbg !69
  %41 = load i16, i16* %39, align 2, !dbg !70
  %42 = load i16*, i16** %5, align 8, !dbg !71
  %43 = getelementptr inbounds i16, i16* %42, i32 1, !dbg !71
  store i16* %43, i16** %5, align 8, !dbg !71
  store i16 %41, i16* %42, align 2, !dbg !72
  br label %44, !dbg !73

44:
  %45 = load i16*, i16** %4, align 8, !dbg !74
  %46 = getelementptr inbounds i16, i16* %45, i32 1, !dbg !74
  store i16* %46, i16** %4, align 8, !dbg !74
  %47 = load i16, i16* %45, align 2, !dbg !75
  %48 = load i16*, i16** %5, align 8, !dbg !76
  %49 = getelementptr inbounds i16, i16* %48, i32 1, !dbg !76
  store i16* %49, i16** %5, align 8, !dbg !76
  store i16 %47, i16* %48, align 2, !dbg !77
  br label %50, !dbg !78

50:
  %51 = load i16*, i16** %4, align 8, !dbg !79
  %52 = getelementptr inbounds i16, i16* %51, i32 1, !dbg !79
  store i16* %52, i16** %4, align 8, !dbg !79
  %53 = load i16, i16* %51, align 2, !dbg !80
  %54 = load i16*, i16** %5, align 8, !dbg !81
  %55 = getelementptr inbounds i16, i16* %54, i32 1, !dbg !81
  store i16* %55, i16** %5, align 8, !dbg !81
  store i16 %53, i16* %54, align 2, !dbg !82
  br label %56, !dbg !83

56:
  %57 = load i16*, i16** %4, align 8, !dbg !84
  %58 = getelementptr inbounds i16, i16* %57, i32 1, !dbg !84
  store i16* %58, i16** %4, align 8, !dbg !84
  %59 = load i16, i16* %57, align 2, !dbg !85
  %60 = load i16*, i16** %5, align 8, !dbg !86
  %61 = getelementptr inbounds i16, i16* %60, i32 1, !dbg !86
  store i16* %61, i16** %5, align 8, !dbg !86
  store i16 %59, i16* %60, align 2, !dbg !87
  br label %62, !dbg !88

62:
  %63 = load i16*, i16** %4, align 8, !dbg !89
  %64 = getelementptr inbounds i16, i16* %63, i32 1, !dbg !89
  store i16* %64, i16** %4, align 8, !dbg !89
  %65 = load i16, i16* %63, align 2, !dbg !90
  %66 = load i16*, i16** %5, align 8, !dbg !91
  %67 = getelementptr inbounds i16, i16* %66, i32 1, !dbg !91
  store i16* %67, i16** %5, align 8, !dbg !91
  store i16 %65, i16* %66, align 2, !dbg !92
  br label %68, !dbg !93

68:
  %69 = load i16*, i16** %4, align 8, !dbg !94
  %70 = getelementptr inbounds i16, i16* %69, i32 1, !dbg !94
  store i16* %70, i16** %4, align 8, !dbg !94
  %71 = load i16, i16* %69, align 2, !dbg !95
  %72 = load i16*, i16** %5, align 8, !dbg !96
  %73 = getelementptr inbounds i16, i16* %72, i32 1, !dbg !96
  store i16* %73, i16** %5, align 8, !dbg !96
  store i16 %71, i16* %72, align 2, !dbg !97
  br label %74, !dbg !98

74:
  %75 = load i16*, i16** %4, align 8, !dbg !99
  %76 = getelementptr inbounds i16, i16* %75, i32 1, !dbg !99
  store i16* %76, i16** %4, align 8, !dbg !99
  %77 = load i16, i16* %75, align 2, !dbg !100
  %78 = load i16*, i16** %5, align 8, !dbg !101
  %79 = getelementptr inbounds i16, i16* %78, i32 1, !dbg !101
  store i16* %79, i16** %5, align 8, !dbg !101
  store i16 %77, i16* %78, align 2, !dbg !102
  br label %80, !dbg !103

80:
  %81 = load i32, i32* %3, align 4, !dbg !104
  %82 = add nsw i32 %81, -1, !dbg !104
  store i32 %82, i32* %3, align 4, !dbg !104
  %83 = icmp sgt i32 %82, 0, !dbg !105
  br i1 %83, label %32, label %84, !dbg !103

84:
  br label %85, !dbg !108

85:
  store i32 0, i32* %3, align 4, !dbg !109
  br label %86, !dbg !111

86:
  %87 = load i32, i32* %3, align 4, !dbg !112
  %88 = icmp slt i32 %87, 39, !dbg !114
  br i1 %88, label %89, label %106, !dbg !115

89:
  %90 = load i32, i32* %3, align 4, !dbg !116
  %91 = sext i32 %90 to i64, !dbg !118
  %92 = getelementptr inbounds [39 x i16], [39 x i16]* %6, i64 0, i64 %91, !dbg !118
  %93 = load i16, i16* %92, align 2, !dbg !118
  %94 = sext i16 %93 to i32, !dbg !118
  %95 = load i32, i32* %3, align 4, !dbg !119
  %96 = sext i32 %95 to i64, !dbg !120
  %97 = getelementptr inbounds [39 x i16], [39 x i16]* %7, i64 0, i64 %96, !dbg !120
  %98 = load i16, i16* %97, align 2, !dbg !120
  %99 = sext i16 %98 to i32, !dbg !120
  %100 = icmp ne i32 %94, %99, !dbg !121
  br i1 %100, label %101, label %102, !dbg !122

101:
  store i32 1, i32* %1, align 4, !dbg !123
  br label %107, !dbg !123

102:
  br label %103, !dbg !124

103:
  %104 = load i32, i32* %3, align 4, !dbg !125
  %105 = add nsw i32 %104, 1, !dbg !125
  store i32 %105, i32* %3, align 4, !dbg !125
  br label %86, !dbg !126

106:
  store i32 0, i32* %1, align 4, !dbg !129
  br label %107, !dbg !129

107:
  %108 = load i32, i32* %1, align 4, !dbg !130
  ret i32 %108, !dbg !130
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 12], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 12], 39
        jge     .LBB0_4
        mov     eax, dword ptr [rbp - 12]
        movsxd  rcx, dword ptr [rbp - 12]
        mov     word ptr [rbp + 2*rcx - 112], ax
        movsxd  rcx, dword ptr [rbp - 12]
        mov     word ptr [rbp + 2*rcx - 192], 0
        mov     eax, dword ptr [rbp - 12]
        add     eax, 1
        mov     dword ptr [rbp - 12], eax
        jmp     .LBB0_1
.LBB0_4:
        lea     rax, [rbp - 112]
        mov     qword ptr [rbp - 24], rax
        lea     rax, [rbp - 192]
        mov     qword ptr [rbp - 32], rax
        mov     dword ptr [rbp - 8], 39
        mov     ecx, dword ptr [rbp - 8]
        mov     edx, ecx
        add     edx, 7
        add     ecx, 14
        test    edx, edx
        cmovs   edx, ecx
        sar     edx, 3
        mov     dword ptr [rbp - 12], edx
        mov     ecx, dword ptr [rbp - 8]
        mov     edx, ecx
        add     edx, 7
        test    ecx, ecx
        mov     esi, ecx
        cmovs   esi, edx
        and     esi, -8
        sub     ecx, esi
        mov     eax, ecx
        sub     ecx, 7
        mov     qword ptr [rbp - 200], rax # 8-byte Spill
        ja      .LBB0_16
        mov     rax, qword ptr [rbp - 200] # 8-byte Reload
        mov     rcx, qword ptr [8*rax + .LJTI0_0]
        jmp     rcx
.LBB0_5:
        jmp     .LBB0_6
.LBB0_6:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 24], rcx
        mov     dx, word ptr [rax]
        mov     rax, qword ptr [rbp - 32]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 32], rcx
        mov     word ptr [rax], dx
.LBB0_7:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 24], rcx
        mov     dx, word ptr [rax]
        mov     rax, qword ptr [rbp - 32]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 32], rcx
        mov     word ptr [rax], dx
.LBB0_8:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 24], rcx
        mov     dx, word ptr [rax]
        mov     rax, qword ptr [rbp - 32]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 32], rcx
        mov     word ptr [rax], dx
.LBB0_9:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 24], rcx
        mov     dx, word ptr [rax]
        mov     rax, qword ptr [rbp - 32]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 32], rcx
        mov     word ptr [rax], dx
.LBB0_10:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 24], rcx
        mov     dx, word ptr [rax]
        mov     rax, qword ptr [rbp - 32]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 32], rcx
        mov     word ptr [rax], dx
.LBB0_11:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 24], rcx
        mov     dx, word ptr [rax]
        mov     rax, qword ptr [rbp - 32]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 32], rcx
        mov     word ptr [rax], dx
.LBB0_12:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 24], rcx
        mov     dx, word ptr [rax]
        mov     rax, qword ptr [rbp - 32]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 32], rcx
        mov     word ptr [rax], dx
.LBB0_13:
        mov     rax, qword ptr [rbp - 24]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 24], rcx
        mov     dx, word ptr [rax]
        mov     rax, qword ptr [rbp - 32]
        mov     rcx, rax
        add     rcx, 2
        mov     qword ptr [rbp - 32], rcx
        mov     word ptr [rax], dx
        mov     eax, dword ptr [rbp - 12]
        add     eax, -1
        mov     dword ptr [rbp - 12], eax
        cmp     eax, 0
        jg      .LBB0_6
        jmp     .LBB0_16
.LBB0_16:
        mov     dword ptr [rbp - 12], 0
.LBB0_17:                               # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 12], 39
        jge     .LBB0_22
        movsxd  rax, dword ptr [rbp - 12]
        movsx   ecx, word ptr [rbp + 2*rax - 112]
        movsxd  rax, dword ptr [rbp - 12]
        movsx   edx, word ptr [rbp + 2*rax - 192]
        cmp     ecx, edx
        je      .LBB0_20
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_23
.LBB0_20:                               #   in Loop: Header=BB0_17 Depth=1
        jmp     .LBB0_21
.LBB0_21:                               #   in Loop: Header=BB0_17 Depth=1
        mov     eax, dword ptr [rbp - 12]
        add     eax, 1
        mov     dword ptr [rbp - 12], eax
        jmp     .LBB0_17
.LBB0_22:
        mov     dword ptr [rbp - 4], 0
.LBB0_23:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 80
        pop     rbp
        ret
.LJTI0_0:
        .quad   .LBB0_5
        .quad   .LBB0_13
        .quad   .LBB0_12
        .quad   .LBB0_11
        .quad   .LBB0_10
        .quad   .LBB0_9
        .quad   .LBB0_8
        .quad   .LBB0_7
",-Wall
source\00144.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:10:6: [0m[0;1;31merror: [0m[1massigning to 'void *' from incompatible type 'const void *'[0m
        p = i ? 0 : (const void *) 0;
[0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:11:6: [0m[0;1;31merror: [0m[1massigning to 'int *' from incompatible type 'void *'[0m
        q = i ? 0 : p;
[0;1;32m            ^~~~~~~~~
[0m[1m<source>:12:6: [0m[0;1;31merror: [0m[1massigning to 'int *' from incompatible type 'void *'[0m
        q = i ? p : 0;
[0;1;32m            ^~~~~~~~~
[0m[1m<source>:16:9: [0m[0;1;31merror: [0m[1mcast from pointer to smaller type 'int' loses information[0m
        return (int) q;
[0;1;32m               ^~~~~~~
[0m4 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:10:6: [0m[0;1;31merror: [0m[1massigning to 'void *' from incompatible type 'const void *'[0m
        p = i ? 0 : (const void *) 0;
[0;1;32m            ^~~~~~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:11:6: [0m[0;1;31merror: [0m[1massigning to 'int *' from incompatible type 'void *'[0m
        q = i ? 0 : p;
[0;1;32m            ^~~~~~~~~
[0m[1m<source>:12:6: [0m[0;1;31merror: [0m[1massigning to 'int *' from incompatible type 'void *'[0m
        q = i ? p : 0;
[0;1;32m            ^~~~~~~~~
[0m[1m<source>:16:9: [0m[0;1;31merror: [0m[1mcast from pointer to smaller type 'int' loses information[0m
        return (int) q;
[0;1;32m               ^~~~~~~
[0m4 errors generated.
",-Wall
source\00145.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00146.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { i32, i32 }

@s = dso_local global %struct.S { i32 1, i32 2 }, align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !16 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds (%struct.S, %struct.S* @s, i32 0, i32 0), align 4, !dbg !19
  %3 = icmp ne i32 %2, 1, !dbg !21
  br i1 %3, label %4, label %5, !dbg !22

4:
  store i32 1, i32* %1, align 4, !dbg !23
  br label %10, !dbg !23

5:
  %6 = load i32, i32* getelementptr inbounds (%struct.S, %struct.S* @s, i32 0, i32 1), align 4, !dbg !24
  %7 = icmp ne i32 %6, 2, !dbg !26
  br i1 %7, label %8, label %9, !dbg !27

8:
  store i32 2, i32* %1, align 4, !dbg !28
  br label %10, !dbg !28

9:
  store i32 0, i32* %1, align 4, !dbg !29
  br label %10, !dbg !29

10:
  %11 = load i32, i32* %1, align 4, !dbg !30
  ret i32 %11, !dbg !30
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [s], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_5
.LBB0_2:
        cmp     dword ptr [s+4], 2
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_5
.LBB0_4:
        mov     dword ptr [rbp - 4], 0
.LBB0_5:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
s:
        .long   1                       # 0x1
        .long   2                       # 0x2

",-Wall
source\00147.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@arr = dso_local global [3 x i32] [i32 0, i32 1, i32 2], align 4, !dbg !0

define dso_local i32 @main() #0 !dbg !15 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @arr, i64 0, i64 0), align 4, !dbg !18
  %3 = icmp ne i32 %2, 0, !dbg !20
  br i1 %3, label %4, label %5, !dbg !21

4:
  store i32 1, i32* %1, align 4, !dbg !22
  br label %14, !dbg !22

5:
  %6 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @arr, i64 0, i64 1), align 4, !dbg !23
  %7 = icmp ne i32 %6, 1, !dbg !25
  br i1 %7, label %8, label %9, !dbg !26

8:
  store i32 2, i32* %1, align 4, !dbg !27
  br label %14, !dbg !27

9:
  %10 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @arr, i64 0, i64 2), align 4, !dbg !28
  %11 = icmp ne i32 %10, 2, !dbg !30
  br i1 %11, label %12, label %13, !dbg !31

12:
  store i32 3, i32* %1, align 4, !dbg !32
  br label %14, !dbg !32

13:
  store i32 0, i32* %1, align 4, !dbg !33
  br label %14, !dbg !33

14:
  %15 = load i32, i32* %1, align 4, !dbg !34
  ret i32 %15, !dbg !34
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:1:15: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
int arr[3] = {[2] = 2, [0] = 0, [1] = 1};
[0;1;32m              ^~~
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [arr], 0
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_2:
        cmp     dword ptr [arr+4], 1
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_7
.LBB0_4:
        cmp     dword ptr [arr+8], 2
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_7
.LBB0_6:
        mov     dword ptr [rbp - 4], 0
.LBB0_7:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
arr:
        .long   0                       # 0x0
        .long   1                       # 0x1
        .long   2                       # 0x2

Standard error:
[1m<source>:1:15: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
int arr[3] = {[2] = 2, [0] = 0, [1] = 1};
[0;1;32m              ^~~
[0m1 warning generated.
",-Wall
source\00148.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { i32, i32 }

@arr = dso_local global [2 x %struct.S] [%struct.S { i32 1, i32 2 }, %struct.S { i32 3, i32 4 }], align 16, !dbg !0

define dso_local i32 @main() #0 !dbg !19 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds ([2 x %struct.S], [2 x %struct.S]* @arr, i64 0, i64 0, i32 0), align 16, !dbg !22
  %3 = icmp ne i32 %2, 1, !dbg !24
  br i1 %3, label %4, label %5, !dbg !25

4:
  store i32 1, i32* %1, align 4, !dbg !26
  br label %18, !dbg !26

5:
  %6 = load i32, i32* getelementptr inbounds ([2 x %struct.S], [2 x %struct.S]* @arr, i64 0, i64 0, i32 1), align 4, !dbg !27
  %7 = icmp ne i32 %6, 2, !dbg !29
  br i1 %7, label %8, label %9, !dbg !30

8:
  store i32 2, i32* %1, align 4, !dbg !31
  br label %18, !dbg !31

9:
  %10 = load i32, i32* getelementptr inbounds ([2 x %struct.S], [2 x %struct.S]* @arr, i64 0, i64 1, i32 0), align 8, !dbg !32
  %11 = icmp ne i32 %10, 3, !dbg !34
  br i1 %11, label %12, label %13, !dbg !35

12:
  store i32 3, i32* %1, align 4, !dbg !36
  br label %18, !dbg !36

13:
  %14 = load i32, i32* getelementptr inbounds ([2 x %struct.S], [2 x %struct.S]* @arr, i64 0, i64 1, i32 1), align 4, !dbg !37
  %15 = icmp ne i32 %14, 4, !dbg !39
  br i1 %15, label %16, label %17, !dbg !40

16:
  store i32 4, i32* %1, align 4, !dbg !41
  br label %18, !dbg !41

17:
  store i32 0, i32* %1, align 4, !dbg !42
  br label %18, !dbg !42

18:
  %19 = load i32, i32* %1, align 4, !dbg !43
  ret i32 %19, !dbg !43
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:2:20: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
struct S arr[2] = {[1] = {3, 4}, [0] = {1, 2}};
[0;1;32m                   ^~~
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        cmp     dword ptr [arr], 1
        je      .LBB0_2
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_9
.LBB0_2:
        cmp     dword ptr [arr+4], 2
        je      .LBB0_4
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_9
.LBB0_4:
        cmp     dword ptr [arr+8], 3
        je      .LBB0_6
        mov     dword ptr [rbp - 4], 3
        jmp     .LBB0_9
.LBB0_6:
        cmp     dword ptr [arr+12], 4
        je      .LBB0_8
        mov     dword ptr [rbp - 4], 4
        jmp     .LBB0_9
.LBB0_8:
        mov     dword ptr [rbp - 4], 0
.LBB0_9:
        mov     eax, dword ptr [rbp - 4]
        pop     rbp
        ret
arr:
        .long   1                       # 0x1
        .long   2                       # 0x2
        .long   3                       # 0x3
        .long   4                       # 0x4

Standard error:
[1m<source>:2:20: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
struct S arr[2] = {[1] = {3, 4}, [0] = {1, 2}};
[0;1;32m                   ^~~
[0m1 warning generated.
",-Wall
source\00149.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:2:15: [0m[0;1;31merror: [0m[1mtaking the address of a temporary object of type 'struct S' [-Waddress-of-temporary][0m
struct S *s = &(struct S) { 1, 2 };
[0;1;32m              ^~~~~~~~~~~~~~~~~~~~
[0m1 error generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:2:15: [0m[0;1;31merror: [0m[1mtaking the address of a temporary object of type 'struct S' [-Waddress-of-temporary][0m
struct S *s = &(struct S) { 1, 2 };
[0;1;32m              ^~~~~~~~~~~~~~~~~~~~
[0m1 error generated.
",-Wall
source\00150.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:10:19: [0m[0;1;35mwarning: [0m[1mmixture of designated and non-designated initializers in the same initializer list is a C99 extension [-Wc99-designator][0m
struct S1 gs1 = { .a = 1, 2 };
[0;1;32m                  ^~~~~~
[0m[1m<source>:10:27: [0m[0;1;30mnote: [0mfirst non-designated initializer is here[0m
struct S1 gs1 = { .a = 1, 2 };
[0;1;32m                          ^
[0m[1m<source>:14:3: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
        {[0] = 1,  1+1}
[0;1;32m         ^~~
[0m[1m<source>:14:3: [0m[0;1;35mwarning: [0m[1mmixture of designated and non-designated initializers in the same initializer list is a C99 extension [-Wc99-designator][0m
        {[0] = 1,  1+1}
[0;1;32m         ^~~~~~~
[0m[1m<source>:14:13: [0m[0;1;30mnote: [0mfirst non-designated initializer is here[0m
        {[0] = 1,  1+1}
[0;1;32m                   ^~~
[0m[1m<source>:12:11: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'b' will be initialized after field 'a' [-Wreorder-init-list][0m
        {.b = 2, .a = 1},
[0;1;32m                 ^~~~~~
[0m[1m<source>:12:8: [0m[0;1;30mnote: [0mprevious initialization for field 'b' is here[0m
        {.b = 2, .a = 1},
[0;1;32m              ^
[0m[1m<source>:11:16: [0m[0;1;31merror: [0m[1mtaking the address of a temporary object of type 'struct S2' [-Waddress-of-temporary][0m
struct S2 *s = &(struct S2) {
[0;1;32m               ^~~~~~~~~~~~~~
[0m4 warnings and 1 error generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:10:19: [0m[0;1;35mwarning: [0m[1mmixture of designated and non-designated initializers in the same initializer list is a C99 extension [-Wc99-designator][0m
struct S1 gs1 = { .a = 1, 2 };
[0;1;32m                  ^~~~~~
[0m[1m<source>:10:27: [0m[0;1;30mnote: [0mfirst non-designated initializer is here[0m
struct S1 gs1 = { .a = 1, 2 };
[0;1;32m                          ^
[0m[1m<source>:14:3: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
        {[0] = 1,  1+1}
[0;1;32m         ^~~
[0m[1m<source>:14:3: [0m[0;1;35mwarning: [0m[1mmixture of designated and non-designated initializers in the same initializer list is a C99 extension [-Wc99-designator][0m
        {[0] = 1,  1+1}
[0;1;32m         ^~~~~~~
[0m[1m<source>:14:13: [0m[0;1;30mnote: [0mfirst non-designated initializer is here[0m
        {[0] = 1,  1+1}
[0;1;32m                   ^~~
[0m[1m<source>:12:11: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'b' will be initialized after field 'a' [-Wreorder-init-list][0m
        {.b = 2, .a = 1},
[0;1;32m                 ^~~~~~
[0m[1m<source>:12:8: [0m[0;1;30mnote: [0mprevious initialization for field 'b' is here[0m
        {.b = 2, .a = 1},
[0;1;32m              ^
[0m[1m<source>:11:16: [0m[0;1;31merror: [0m[1mtaking the address of a temporary object of type 'struct S2' [-Waddress-of-temporary][0m
struct S2 *s = &(struct S2) {
[0;1;32m               ^~~~~~~~~~~~~~
[0m4 warnings and 1 error generated.
",-Wall
source\00151.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@arr = dso_local global [2 x [3 x [5 x i32]]] [[3 x [5 x i32]] [[5 x i32] [i32 0, i32 0, i32 3, i32 5, i32 0], [5 x i32] [i32 1, i32 0, i32 0, i32 6, i32 7], [5 x i32] zeroinitializer], [3 x [5 x i32]] [[5 x i32] [i32 1, i32 2, i32 0, i32 0, i32 0], [5 x i32] [i32 0, i32 0, i32 0, i32 0, i32 7], [5 x i32] zeroinitializer]], align 16, !dbg !0

define dso_local i32 @main() #0 !dbg !17 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* getelementptr inbounds ([2 x [3 x [5 x i32]]], [2 x [3 x [5 x i32]]]* @arr, i64 0, i64 0, i64 1, i64 4), align 4, !dbg !20
  %3 = load i32, i32* getelementptr inbounds ([2 x [3 x [5 x i32]]], [2 x [3 x [5 x i32]]]* @arr, i64 0, i64 1, i64 1, i64 4), align 4, !dbg !21
  %4 = icmp eq i32 %2, %3, !dbg !22
  %5 = xor i1 %4, true, !dbg !23
  %6 = zext i1 %5 to i32, !dbg !23
  ret i32 %6, !dbg !24
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:4:8: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
                { 1, [3] = 6, 7 },
[0;1;32m                     ^~~
[0m[1m<source>:4:8: [0m[0;1;35mwarning: [0m[1mmixture of designated and non-designated initializers in the same initializer list is a C99 extension [-Wc99-designator][0m
                { 1, [3] = 6, 7 },
[0;1;32m                     ^~~~~~~
[0m[1m<source>:4:5: [0m[0;1;30mnote: [0mfirst non-designated initializer is here[0m
                { 1, [3] = 6, 7 },
[0;1;32m                  ^
[0m[1m<source>:8:5: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
                { [4] = 7, },
[0;1;32m                  ^~~
[0m3 warnings generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     eax, dword ptr [arr+36]
        cmp     eax, dword ptr [arr+96]
        sete    cl
        xor     cl, -1
        and     cl, 1
        movzx   eax, cl
        pop     rbp
        ret
arr:
        .long   0                       # 0x0
        .long   0                       # 0x0
        .long   3                       # 0x3
        .long   5                       # 0x5
        .long   0                       # 0x0
        .long   1                       # 0x1
        .long   0                       # 0x0
        .long   0                       # 0x0
        .long   6                       # 0x6
        .long   7                       # 0x7
        .zero   20
        .long   1                       # 0x1
        .long   2                       # 0x2
        .long   0                       # 0x0
        .long   0                       # 0x0
        .long   0                       # 0x0
        .long   0                       # 0x0
        .long   0                       # 0x0
        .long   0                       # 0x0
        .long   0                       # 0x0
        .long   7                       # 0x7
        .zero   20

Standard error:
[1m<source>:4:8: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
                { 1, [3] = 6, 7 },
[0;1;32m                     ^~~
[0m[1m<source>:4:8: [0m[0;1;35mwarning: [0m[1mmixture of designated and non-designated initializers in the same initializer list is a C99 extension [-Wc99-designator][0m
                { 1, [3] = 6, 7 },
[0;1;32m                     ^~~~~~~
[0m[1m<source>:4:5: [0m[0;1;30mnote: [0mfirst non-designated initializer is here[0m
                { 1, [3] = 6, 7 },
[0;1;32m                  ^
[0m[1m<source>:8:5: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
                { [4] = 7, },
[0;1;32m                  ^~~
[0m3 warnings generated.
",-Wall
source\00152.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
",-Wall
source\00153.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.S = type { i32 }

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.S, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.S* %2, metadata !12, metadata !DIExpression()), !dbg !17
  %3 = getelementptr inbounds %struct.S, %struct.S* %2, i32 0, i32 0, !dbg !18
  store i32 0, i32* %3, align 4, !dbg !19
  %4 = getelementptr inbounds %struct.S, %struct.S* %2, i32 0, i32 0, !dbg !20
  %5 = load i32, i32* %4, align 4, !dbg !20
  ret i32 %5, !dbg !21
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     eax, dword ptr [rbp - 8]
        pop     rbp
        ret
",-Wall
source\00154.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.fred = type { i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.fred, align 4
  %3 = alloca [2 x %struct.fred], align 16
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.fred* %2, metadata !12, metadata !DIExpression()), !dbg !17
  %4 = getelementptr inbounds %struct.fred, %struct.fred* %2, i32 0, i32 0, !dbg !18
  store i32 12, i32* %4, align 4, !dbg !19
  %5 = getelementptr inbounds %struct.fred, %struct.fred* %2, i32 0, i32 1, !dbg !20
  store i32 34, i32* %5, align 4, !dbg !21
  %6 = getelementptr inbounds %struct.fred, %struct.fred* %2, i32 0, i32 0, !dbg !22
  %7 = load i32, i32* %6, align 4, !dbg !22
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7), !dbg !23
  %9 = getelementptr inbounds %struct.fred, %struct.fred* %2, i32 0, i32 1, !dbg !24
  %10 = load i32, i32* %9, align 4, !dbg !24
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %10), !dbg !25
  call void @llvm.dbg.declare(metadata [2 x %struct.fred]* %3, metadata !26, metadata !DIExpression()), !dbg !30
  %12 = getelementptr inbounds [2 x %struct.fred], [2 x %struct.fred]* %3, i64 0, i64 0, !dbg !31
  %13 = getelementptr inbounds %struct.fred, %struct.fred* %12, i32 0, i32 0, !dbg !32
  store i32 12, i32* %13, align 16, !dbg !33
  %14 = getelementptr inbounds [2 x %struct.fred], [2 x %struct.fred]* %3, i64 0, i64 0, !dbg !34
  %15 = getelementptr inbounds %struct.fred, %struct.fred* %14, i32 0, i32 1, !dbg !35
  store i32 34, i32* %15, align 4, !dbg !36
  %16 = getelementptr inbounds [2 x %struct.fred], [2 x %struct.fred]* %3, i64 0, i64 1, !dbg !37
  %17 = getelementptr inbounds %struct.fred, %struct.fred* %16, i32 0, i32 0, !dbg !38
  store i32 56, i32* %17, align 8, !dbg !39
  %18 = getelementptr inbounds [2 x %struct.fred], [2 x %struct.fred]* %3, i64 0, i64 1, !dbg !40
  %19 = getelementptr inbounds %struct.fred, %struct.fred* %18, i32 0, i32 1, !dbg !41
  store i32 78, i32* %19, align 4, !dbg !42
  %20 = getelementptr inbounds [2 x %struct.fred], [2 x %struct.fred]* %3, i64 0, i64 0, !dbg !43
  %21 = getelementptr inbounds %struct.fred, %struct.fred* %20, i32 0, i32 0, !dbg !44
  %22 = load i32, i32* %21, align 16, !dbg !44
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %22), !dbg !45
  %24 = getelementptr inbounds [2 x %struct.fred], [2 x %struct.fred]* %3, i64 0, i64 0, !dbg !46
  %25 = getelementptr inbounds %struct.fred, %struct.fred* %24, i32 0, i32 1, !dbg !47
  %26 = load i32, i32* %25, align 4, !dbg !47
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %26), !dbg !48
  %28 = getelementptr inbounds [2 x %struct.fred], [2 x %struct.fred]* %3, i64 0, i64 1, !dbg !49
  %29 = getelementptr inbounds %struct.fred, %struct.fred* %28, i32 0, i32 0, !dbg !50
  %30 = load i32, i32* %29, align 8, !dbg !50
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %30), !dbg !51
  %32 = getelementptr inbounds [2 x %struct.fred], [2 x %struct.fred]* %3, i64 0, i64 1, !dbg !52
  %33 = getelementptr inbounds %struct.fred, %struct.fred* %32, i32 0, i32 1, !dbg !53
  %34 = load i32, i32* %33, align 4, !dbg !53
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %34), !dbg !54
  ret i32 0, !dbg !55
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 16], 12
        mov     dword ptr [rbp - 12], 34
        mov     esi, dword ptr [rbp - 16]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     esi, dword ptr [rbp - 12]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 32], 12
        mov     dword ptr [rbp - 28], 34
        mov     dword ptr [rbp - 24], 56
        mov     dword ptr [rbp - 20], 78
        mov     esi, dword ptr [rbp - 32]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 40], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     esi, dword ptr [rbp - 28]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 44], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     esi, dword ptr [rbp - 24]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 48], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     esi, dword ptr [rbp - 20]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 52], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 56], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 64
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00155.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  ret i32 0, !dbg !12
}

attributes #0 = { noinline norecurse nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:5:2: [0m[0;1;35mwarning: [0m[1mexpression result unused [-Wunused-value][0m
        sizeof((int) 1);
[0;1;32m        ^~~~~~~~~~~~~~~
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     dword ptr [rbp - 4], 0
        pop     rbp
        ret
Standard error:
[1m<source>:5:2: [0m[0;1;35mwarning: [0m[1mexpression result unused [-Wunused-value][0m
        sizeof((int) 1);
[0;1;32m        ^~~~~~~~~~~~~~~
[0m1 warning generated.
",-Wall
source\00156.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 1, i32* %2, align 4, !dbg !14
  br label %3, !dbg !16

3:
  %4 = load i32, i32* %2, align 4, !dbg !17
  %5 = icmp sle i32 %4, 10, !dbg !19
  br i1 %5, label %6, label %12, !dbg !20

6:
  %7 = load i32, i32* %2, align 4, !dbg !21
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7), !dbg !23
  br label %9, !dbg !24

9:
  %10 = load i32, i32* %2, align 4, !dbg !25
  %11 = add nsw i32 %10, 1, !dbg !25
  store i32 %11, i32* %2, align 4, !dbg !25
  br label %3, !dbg !26

12:
  ret i32 0, !dbg !29
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 10
        jg      .LBB0_4
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_4:
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00157.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [10 x i32], align 16
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata [10 x i32]* %3, metadata !14, metadata !DIExpression()), !dbg !18
  store i32 1, i32* %2, align 4, !dbg !19
  br label %4, !dbg !21

4:
  %5 = load i32, i32* %2, align 4, !dbg !22
  %6 = icmp sle i32 %5, 10, !dbg !24
  br i1 %6, label %7, label %18, !dbg !25

7:
  %8 = load i32, i32* %2, align 4, !dbg !26
  %9 = load i32, i32* %2, align 4, !dbg !28
  %10 = mul nsw i32 %8, %9, !dbg !29
  %11 = load i32, i32* %2, align 4, !dbg !30
  %12 = sub nsw i32 %11, 1, !dbg !31
  %13 = sext i32 %12 to i64, !dbg !32
  %14 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %13, !dbg !32
  store i32 %10, i32* %14, align 4, !dbg !33
  br label %15, !dbg !34

15:
  %16 = load i32, i32* %2, align 4, !dbg !35
  %17 = add nsw i32 %16, 1, !dbg !35
  store i32 %17, i32* %2, align 4, !dbg !35
  br label %4, !dbg !36

18:
  store i32 0, i32* %2, align 4, !dbg !39
  br label %19, !dbg !41

19:
  %20 = load i32, i32* %2, align 4, !dbg !42
  %21 = icmp slt i32 %20, 10, !dbg !44
  br i1 %21, label %22, label %31, !dbg !45

22:
  %23 = load i32, i32* %2, align 4, !dbg !46
  %24 = sext i32 %23 to i64, !dbg !48
  %25 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %24, !dbg !48
  %26 = load i32, i32* %25, align 4, !dbg !48
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %26), !dbg !49
  br label %28, !dbg !50

28:
  %29 = load i32, i32* %2, align 4, !dbg !51
  %30 = add nsw i32 %29, 1, !dbg !51
  store i32 %30, i32* %2, align 4, !dbg !51
  br label %19, !dbg !52

31:
  ret i32 0, !dbg !55
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 10
        jg      .LBB0_4
        mov     eax, dword ptr [rbp - 8]
        imul    eax, dword ptr [rbp - 8]
        mov     ecx, dword ptr [rbp - 8]
        sub     ecx, 1
        movsxd  rdx, ecx
        mov     dword ptr [rbp + 4*rdx - 48], eax
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_4:
        mov     dword ptr [rbp - 8], 0
.LBB0_5:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 10
        jge     .LBB0_8
        movsxd  rax, dword ptr [rbp - 8]
        mov     esi, dword ptr [rbp + 4*rax - 48]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_5
.LBB0_8:
        xor     eax, eax
        add     rsp, 48
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00158.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !14
  br label %3, !dbg !16

3:
  %4 = load i32, i32* %2, align 4, !dbg !17
  %5 = icmp slt i32 %4, 4, !dbg !19
  br i1 %5, label %6, label %20, !dbg !20

6:
  %7 = load i32, i32* %2, align 4, !dbg !21
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7), !dbg !23
  %9 = load i32, i32* %2, align 4, !dbg !24
  switch i32 %9, label %14 [
    i32 1, label %10
    i32 2, label %12
  ], !dbg !25

10:
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 1), !dbg !26
  br label %16, !dbg !28

12:
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 2), !dbg !29
  br label %16, !dbg !30

14:
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 0), !dbg !31
  br label %16, !dbg !32

16:
  br label %17, !dbg !33

17:
  %18 = load i32, i32* %2, align 4, !dbg !34
  %19 = add nsw i32 %18, 1, !dbg !34
  store i32 %19, i32* %2, align 4, !dbg !34
  br label %3, !dbg !35

20:
  ret i32 0, !dbg !38
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 4
        jge     .LBB0_8
        mov     esi, dword ptr [rbp - 8]
        mov     edi, offset .L.str
        xor     eax, eax
        call    printf
        mov     ecx, dword ptr [rbp - 8]
        mov     edx, ecx
        sub     edx, 1
        mov     dword ptr [rbp - 12], ecx # 4-byte Spill
        je      .LBB0_3
        jmp     .LBB0_9
.LBB0_9:                                #   in Loop: Header=BB0_1 Depth=1
        mov     eax, dword ptr [rbp - 12] # 4-byte Reload
        sub     eax, 2
        je      .LBB0_4
        jmp     .LBB0_5
.LBB0_3:                                #   in Loop: Header=BB0_1 Depth=1
        movabs  rdi, offset .L.str
        mov     esi, 1
        mov     al, 0
        call    printf
        jmp     .LBB0_6
.LBB0_4:                                #   in Loop: Header=BB0_1 Depth=1
        movabs  rdi, offset .L.str
        mov     esi, 2
        mov     al, 0
        call    printf
        jmp     .LBB0_6
.LBB0_5:                                #   in Loop: Header=BB0_1 Depth=1
        xor     esi, esi
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
.LBB0_6:                                #   in Loop: Header=BB0_1 Depth=1
        jmp     .LBB0_7
.LBB0_7:                                #   in Loop: Header=BB0_1 Depth=1
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_8:
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00159.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [6 x i8] c""a=%d\0A\00"", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c""qfunc()\0A\00"", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @myfunc(int)(i32 %0) #0 !dbg !11 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !16, metadata !DIExpression()), !dbg !17
  %3 = load i32, i32* %2, align 4, !dbg !18
  %4 = load i32, i32* %2, align 4, !dbg !19
  %5 = mul nsw i32 %3, %4, !dbg !20
  ret i32 %5, !dbg !21
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local void @vfunc(int)(i32 %0) #2 !dbg !22 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !25, metadata !DIExpression()), !dbg !26
  %3 = load i32, i32* %2, align 4, !dbg !27
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 %3), !dbg !28
  ret void, !dbg !29
}

declare dso_local i32 @printf(i8*, ...) #3

define dso_local void @qfunc()() #2 !dbg !30 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !31
  ret void, !dbg !32
}

define dso_local void @zfunc()() #2 !dbg !33 {
  call void null(), !dbg !34
  ret void, !dbg !35
}

define dso_local i32 @main() #4 !dbg !36 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @myfunc(int)(i32 3), !dbg !39
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %2), !dbg !40
  %4 = call i32 @myfunc(int)(i32 4), !dbg !41
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %4), !dbg !42
  call void @vfunc(int)(i32 1234), !dbg !43
  call void @qfunc()(), !dbg !44
  ret i32 0, !dbg !45
}

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #4 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
myfunc(int):                             # @myfunc(int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     eax, dword ptr [rbp - 4]
        imul    eax, dword ptr [rbp - 4]
        pop     rbp
        ret
vfunc(int):                              # @vfunc(int)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], edi
        mov     esi, dword ptr [rbp - 4]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        add     rsp, 16
        pop     rbp
        ret
qfunc():                              # @qfunc()
        push    rbp
        mov     rbp, rsp
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        pop     rbp
        ret
zfunc():                              # @zfunc()
        push    rbp
        mov     rbp, rsp
        xor     eax, eax
        mov     ecx, eax
        call    rcx
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     edi, 3
        call    myfunc(int)
        movabs  rdi, offset .L.str.2
        mov     esi, eax
        mov     al, 0
        call    printf
        mov     edi, 4
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        call    myfunc(int)
        movabs  rdi, offset .L.str.2
        mov     esi, eax
        mov     al, 0
        call    printf
        mov     edi, 1234
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        call    vfunc(int)
        call    qfunc()
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""a=%d\n""

.L.str.1:
        .asciz  ""qfunc()\n""

.L.str.2:
        .asciz  ""%d\n""

",-Wall
source\00160.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i32* %4, metadata !16, metadata !DIExpression()), !dbg !17
  store i32 1, i32* %2, align 4, !dbg !18
  store i32 0, i32* %3, align 4, !dbg !19
  store i32 0, i32* %4, align 4, !dbg !20
  br label %5, !dbg !21

5:
  %6 = load i32, i32* %2, align 4, !dbg !22
  %7 = icmp slt i32 %6, 100, !dbg !23
  br i1 %7, label %8, label %16, !dbg !21

8:
  %9 = load i32, i32* %2, align 4, !dbg !24
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %9), !dbg !26
  %11 = load i32, i32* %2, align 4, !dbg !27
  store i32 %11, i32* %4, align 4, !dbg !28
  %12 = load i32, i32* %4, align 4, !dbg !29
  %13 = load i32, i32* %3, align 4, !dbg !30
  %14 = add nsw i32 %12, %13, !dbg !31
  store i32 %14, i32* %2, align 4, !dbg !32
  %15 = load i32, i32* %4, align 4, !dbg !33
  store i32 %15, i32* %3, align 4, !dbg !34
  br label %5, !dbg !21

16:
  ret i32 0, !dbg !37
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     dword ptr [rbp - 12], 0
        mov     dword ptr [rbp - 16], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 100
        jge     .LBB0_3
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     ecx, dword ptr [rbp - 8]
        mov     dword ptr [rbp - 16], ecx
        mov     ecx, dword ptr [rbp - 16]
        add     ecx, dword ptr [rbp - 12]
        mov     dword ptr [rbp - 8], ecx
        mov     ecx, dword ptr [rbp - 16]
        mov     dword ptr [rbp - 12], ecx
        jmp     .LBB0_1
.LBB0_3:
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00161.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i32* %4, metadata !16, metadata !DIExpression()), !dbg !17
  store i32 1, i32* %2, align 4, !dbg !18
  store i32 0, i32* %3, align 4, !dbg !19
  store i32 0, i32* %4, align 4, !dbg !20
  br label %5, !dbg !21

5:
  %6 = load i32, i32* %2, align 4, !dbg !22
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %6), !dbg !24
  %8 = load i32, i32* %2, align 4, !dbg !25
  store i32 %8, i32* %4, align 4, !dbg !26
  %9 = load i32, i32* %4, align 4, !dbg !27
  %10 = load i32, i32* %3, align 4, !dbg !28
  %11 = add nsw i32 %9, %10, !dbg !29
  store i32 %11, i32* %2, align 4, !dbg !30
  %12 = load i32, i32* %4, align 4, !dbg !31
  store i32 %12, i32* %3, align 4, !dbg !32
  br label %13, !dbg !33

13:
  %14 = load i32, i32* %2, align 4, !dbg !34
  %15 = icmp slt i32 %14, 100, !dbg !35
  br i1 %15, label %5, label %16, !dbg !33

16:
  ret i32 0, !dbg !38
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        mov     dword ptr [rbp - 12], 0
        mov     dword ptr [rbp - 16], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     ecx, dword ptr [rbp - 8]
        mov     dword ptr [rbp - 16], ecx
        mov     ecx, dword ptr [rbp - 16]
        add     ecx, dword ptr [rbp - 12]
        mov     dword ptr [rbp - 8], ecx
        mov     ecx, dword ptr [rbp - 16]
        mov     dword ptr [rbp - 12], ecx
        cmp     dword ptr [rbp - 8], 100
        jl      .LBB0_1
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00162.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:2:16: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void fooc(int x[const 5]);
[0;1;32m               ^
[0m[1m<source>:3:16: [0m[0;1;31merror: [0m[1mstatic array size is a C99 feature, not permitted in C++[0m
void foos(int x[static 5]);
[0;1;32m               ^
[0m[1m<source>:4:16: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void foov(int x[volatile 5]);
[0;1;32m               ^
[0m[1m<source>:5:17: [0m[0;1;31merror: [0m[1muse of undeclared identifier 'restrict'[0m
void foor(int x[restrict 5]);
[0;1;32m                ^
[0m[1m<source>:6:15: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void fooc(int [const 5]);
[0;1;32m              ^
[0m[1m<source>:7:15: [0m[0;1;31merror: [0m[1mstatic array size is a C99 feature, not permitted in C++[0m
void foos(int [static 5]);
[0;1;32m              ^
[0m[1m<source>:8:15: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void foov(int [volatile 5]);
[0;1;32m              ^
[0m[1m<source>:9:16: [0m[0;1;31merror: [0m[1muse of undeclared identifier 'restrict'[0m
void foor(int [restrict 5]);
[0;1;32m               ^
[0m[1m<source>:13:26: [0m[0;1;31merror: [0m[1mexpected ')'[0m
void foor(int * restrict x);
[0;1;32m                         ^
[0m[1m<source>:13:10: [0m[0;1;30mnote: [0mto match this '('[0m
void foor(int * restrict x);
[0;1;32m         ^
[0m[1m<source>:14:16: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void fooc(int x[volatile 5])
[0;1;32m               ^
[0m10 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:2:16: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void fooc(int x[const 5]);
[0;1;32m               ^
[0m[1m<source>:3:16: [0m[0;1;31merror: [0m[1mstatic array size is a C99 feature, not permitted in C++[0m
void foos(int x[static 5]);
[0;1;32m               ^
[0m[1m<source>:4:16: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void foov(int x[volatile 5]);
[0;1;32m               ^
[0m[1m<source>:5:17: [0m[0;1;31merror: [0m[1muse of undeclared identifier 'restrict'[0m
void foor(int x[restrict 5]);
[0;1;32m                ^
[0m[1m<source>:6:15: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void fooc(int [const 5]);
[0;1;32m              ^
[0m[1m<source>:7:15: [0m[0;1;31merror: [0m[1mstatic array size is a C99 feature, not permitted in C++[0m
void foos(int [static 5]);
[0;1;32m              ^
[0m[1m<source>:8:15: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void foov(int [volatile 5]);
[0;1;32m              ^
[0m[1m<source>:9:16: [0m[0;1;31merror: [0m[1muse of undeclared identifier 'restrict'[0m
void foor(int [restrict 5]);
[0;1;32m               ^
[0m[1m<source>:13:26: [0m[0;1;31merror: [0m[1mexpected ')'[0m
void foor(int * restrict x);
[0;1;32m                         ^
[0m[1m<source>:13:10: [0m[0;1;30mnote: [0mto match this '('[0m
void foor(int * restrict x);
[0;1;32m         ^
[0m[1m<source>:14:16: [0m[0;1;31merror: [0m[1mqualifier in array size is a C99 feature, not permitted in C++[0m
void fooc(int x[volatile 5])
[0;1;32m               ^
[0m10 errors generated.
",-Wall
source\00163.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.ziggy = type { i32, i32, i32 }

@bolshevic = dso_local global %struct.ziggy zeroinitializer, align 4, !dbg !0
@.str = private unnamed_addr constant [8 x i8] c""a = %d\0A\00"", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c""bolshevic.a = %d\0A\00"", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c""bolshevic.b = %d\0A\00"", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c""bolshevic.c = %d\0A\00"", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c""tsar->a = %d\0A\00"", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c""tsar->b = %d\0A\00"", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c""tsar->c = %d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !17 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.ziggy*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !20, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.declare(metadata i32** %3, metadata !22, metadata !DIExpression()), !dbg !24
  call void @llvm.dbg.declare(metadata i32* %4, metadata !25, metadata !DIExpression()), !dbg !26
  store i32 42, i32* %2, align 4, !dbg !27
  store i32* %2, i32** %3, align 8, !dbg !28
  %6 = load i32*, i32** %3, align 8, !dbg !29
  %7 = load i32, i32* %6, align 4, !dbg !30
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 %7), !dbg !31
  store i32 12, i32* getelementptr inbounds (%struct.ziggy, %struct.ziggy* @bolshevic, i32 0, i32 0), align 4, !dbg !32
  store i32 34, i32* getelementptr inbounds (%struct.ziggy, %struct.ziggy* @bolshevic, i32 0, i32 1), align 4, !dbg !33
  store i32 56, i32* getelementptr inbounds (%struct.ziggy, %struct.ziggy* @bolshevic, i32 0, i32 2), align 4, !dbg !34
  %9 = load i32, i32* getelementptr inbounds (%struct.ziggy, %struct.ziggy* @bolshevic, i32 0, i32 0), align 4, !dbg !35
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i32 %9), !dbg !36
  %11 = load i32, i32* getelementptr inbounds (%struct.ziggy, %struct.ziggy* @bolshevic, i32 0, i32 1), align 4, !dbg !37
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 %11), !dbg !38
  %13 = load i32, i32* getelementptr inbounds (%struct.ziggy, %struct.ziggy* @bolshevic, i32 0, i32 2), align 4, !dbg !39
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i32 %13), !dbg !40
  call void @llvm.dbg.declare(metadata %struct.ziggy** %5, metadata !41, metadata !DIExpression()), !dbg !43
  store %struct.ziggy* @bolshevic, %struct.ziggy** %5, align 8, !dbg !43
  %15 = load %struct.ziggy*, %struct.ziggy** %5, align 8, !dbg !44
  %16 = getelementptr inbounds %struct.ziggy, %struct.ziggy* %15, i32 0, i32 0, !dbg !45
  %17 = load i32, i32* %16, align 4, !dbg !45
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 %17), !dbg !46
  %19 = load %struct.ziggy*, %struct.ziggy** %5, align 8, !dbg !47
  %20 = getelementptr inbounds %struct.ziggy, %struct.ziggy* %19, i32 0, i32 1, !dbg !48
  %21 = load i32, i32* %20, align 4, !dbg !48
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i32 %21), !dbg !49
  %23 = load %struct.ziggy*, %struct.ziggy** %5, align 8, !dbg !50
  %24 = getelementptr inbounds %struct.ziggy, %struct.ziggy* %23, i32 0, i32 2, !dbg !51
  %25 = load i32, i32* %24, align 4, !dbg !51
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i32 %25), !dbg !52
  store i32* getelementptr inbounds (%struct.ziggy, %struct.ziggy* @bolshevic, i32 0, i32 1), i32** %3, align 8, !dbg !53
  %27 = load i32*, i32** %3, align 8, !dbg !54
  %28 = load i32, i32* %27, align 4, !dbg !55
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 %28), !dbg !56
  ret i32 0, !dbg !57
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 42
        lea     rax, [rbp - 8]
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        mov     esi, dword ptr [rax]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     dword ptr [bolshevic], 12
        mov     dword ptr [bolshevic+4], 34
        mov     dword ptr [bolshevic+8], 56
        mov     esi, dword ptr [bolshevic]
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     esi, dword ptr [bolshevic+4]
        movabs  rdi, offset .L.str.2
        mov     dword ptr [rbp - 40], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     esi, dword ptr [bolshevic+8]
        movabs  rdi, offset .L.str.3
        mov     dword ptr [rbp - 44], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rcx, offset bolshevic
        mov     qword ptr [rbp - 32], rcx
        mov     rcx, qword ptr [rbp - 32]
        mov     esi, dword ptr [rcx]
        movabs  rdi, offset .L.str.4
        mov     dword ptr [rbp - 48], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     rcx, qword ptr [rbp - 32]
        mov     esi, dword ptr [rcx + 4]
        movabs  rdi, offset .L.str.5
        mov     dword ptr [rbp - 52], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     rcx, qword ptr [rbp - 32]
        mov     esi, dword ptr [rcx + 8]
        movabs  rdi, offset .L.str.6
        mov     dword ptr [rbp - 56], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rcx, offset bolshevic
        add     rcx, 4
        mov     qword ptr [rbp - 16], rcx
        mov     rcx, qword ptr [rbp - 16]
        mov     esi, dword ptr [rcx]
        movabs  rdi, offset .L.str.2
        mov     dword ptr [rbp - 60], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     edx, edx
        mov     dword ptr [rbp - 64], eax # 4-byte Spill
        mov     eax, edx
        add     rsp, 64
        pop     rbp
        ret
bolshevic:
        .zero   12

.L.str:
        .asciz  ""a = %d\n""

.L.str.1:
        .asciz  ""bolshevic.a = %d\n""

.L.str.2:
        .asciz  ""bolshevic.b = %d\n""

.L.str.3:
        .asciz  ""bolshevic.c = %d\n""

.L.str.4:
        .asciz  ""tsar->a = %d\n""

.L.str.5:
        .asciz  ""tsar->b = %d\n""

.L.str.6:
        .asciz  ""tsar->c = %d\n""

Standard error:
[1m<source>:14:8: [0m[0;1;35mwarning: [0m[1munused variable 'c' [-Wunused-variable][0m
   int c;
[0;1;32m       ^
[0m1 warning generated.
",-Wall
source\00164.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c""%d, %d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i32* %4, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata i32* %5, metadata !18, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.declare(metadata i32* %6, metadata !20, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.declare(metadata i32* %7, metadata !22, metadata !DIExpression()), !dbg !23
  call void @llvm.dbg.declare(metadata i32* %8, metadata !24, metadata !DIExpression()), !dbg !25
  call void @llvm.dbg.declare(metadata i32* %9, metadata !26, metadata !DIExpression()), !dbg !27
  store i32 12, i32* %2, align 4, !dbg !28
  store i32 34, i32* %3, align 4, !dbg !29
  store i32 56, i32* %4, align 4, !dbg !30
  store i32 78, i32* %5, align 4, !dbg !31
  store i32 0, i32* %6, align 4, !dbg !32
  store i32 1, i32* %7, align 4, !dbg !33
  %10 = load i32, i32* %4, align 4, !dbg !34
  %11 = load i32, i32* %5, align 4, !dbg !35
  %12 = add nsw i32 %10, %11, !dbg !36
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %12), !dbg !37
  %14 = load i32, i32* %4, align 4, !dbg !38
  %15 = load i32, i32* %5, align 4, !dbg !39
  %16 = add nsw i32 %14, %15, !dbg !40
  store i32 %16, i32* %9, align 4, !dbg !41
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %16), !dbg !42
  %18 = load i32, i32* %6, align 4, !dbg !43
  %19 = icmp ne i32 %18, 0, !dbg !43
  br i1 %19, label %28, label %20, !dbg !44

20:
  %21 = load i32, i32* %6, align 4, !dbg !45
  %22 = icmp ne i32 %21, 0, !dbg !45
  br i1 %22, label %23, label %26, !dbg !46

23:
  %24 = load i32, i32* %7, align 4, !dbg !47
  %25 = icmp ne i32 %24, 0, !dbg !47
  br label %26

26:
  %27 = phi i1 [ false, %20 ], [ %25, %23 ], !dbg !48
  br label %28, !dbg !44

28:
  %29 = phi i1 [ true, %0 ], [ %27, %26 ]
  %30 = zext i1 %29 to i32, !dbg !43
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %30), !dbg !49
  %32 = load i32, i32* %6, align 4, !dbg !50
  %33 = icmp ne i32 %32, 0, !dbg !50
  br i1 %33, label %42, label %34, !dbg !51

34:
  %35 = load i32, i32* %7, align 4, !dbg !52
  %36 = icmp ne i32 %35, 0, !dbg !52
  br i1 %36, label %37, label %40, !dbg !53

37:
  %38 = load i32, i32* %7, align 4, !dbg !54
  %39 = icmp ne i32 %38, 0, !dbg !54
  br label %40

40:
  %41 = phi i1 [ false, %34 ], [ %39, %37 ], !dbg !48
  br label %42, !dbg !51

42:
  %43 = phi i1 [ true, %28 ], [ %41, %40 ]
  %44 = zext i1 %43 to i32, !dbg !50
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %44), !dbg !55
  %46 = load i32, i32* %6, align 4, !dbg !56
  %47 = icmp ne i32 %46, 0, !dbg !56
  br i1 %47, label %48, label %51, !dbg !57

48:
  %49 = load i32, i32* %6, align 4, !dbg !58
  %50 = icmp ne i32 %49, 0, !dbg !58
  br i1 %50, label %54, label %51, !dbg !59

51:
  %52 = load i32, i32* %7, align 4, !dbg !60
  %53 = icmp ne i32 %52, 0, !dbg !60
  br label %54, !dbg !59

54:
  %55 = phi i1 [ true, %48 ], [ %53, %51 ]
  %56 = zext i1 %55 to i32, !dbg !56
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %56), !dbg !61
  %58 = load i32, i32* %6, align 4, !dbg !62
  %59 = icmp ne i32 %58, 0, !dbg !62
  br i1 %59, label %60, label %63, !dbg !63

60:
  %61 = load i32, i32* %7, align 4, !dbg !64
  %62 = icmp ne i32 %61, 0, !dbg !64
  br i1 %62, label %66, label %63, !dbg !65

63:
  %64 = load i32, i32* %7, align 4, !dbg !66
  %65 = icmp ne i32 %64, 0, !dbg !66
  br label %66, !dbg !65

66:
  %67 = phi i1 [ true, %60 ], [ %65, %63 ]
  %68 = zext i1 %67 to i32, !dbg !62
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %68), !dbg !67
  %70 = load i32, i32* %2, align 4, !dbg !68
  %71 = icmp ne i32 %70, 0, !dbg !68
  br i1 %71, label %72, label %77, !dbg !69

72:
  %73 = load i32, i32* %7, align 4, !dbg !70
  %74 = load i32, i32* %7, align 4, !dbg !71
  %75 = or i32 %73, %74, !dbg !72
  %76 = icmp ne i32 %75, 0, !dbg !70
  br label %77

77:
  %78 = phi i1 [ false, %66 ], [ %76, %72 ], !dbg !48
  %79 = zext i1 %78 to i32, !dbg !68
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %79), !dbg !73
  %81 = load i32, i32* %2, align 4, !dbg !74
  %82 = load i32, i32* %3, align 4, !dbg !75
  %83 = load i32, i32* %4, align 4, !dbg !76
  %84 = load i32, i32* %5, align 4, !dbg !77
  %85 = and i32 %83, %84, !dbg !78
  %86 = xor i32 %82, %85, !dbg !79
  %87 = or i32 %81, %86, !dbg !80
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %87), !dbg !81
  %89 = load i32, i32* %2, align 4, !dbg !82
  %90 = load i32, i32* %2, align 4, !dbg !83
  %91 = icmp eq i32 %89, %90, !dbg !84
  %92 = zext i1 %91 to i32, !dbg !82
  %93 = load i32, i32* %2, align 4, !dbg !85
  %94 = load i32, i32* %3, align 4, !dbg !86
  %95 = icmp eq i32 %93, %94, !dbg !87
  %96 = zext i1 %95 to i32, !dbg !85
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i32 %92, i32 %96), !dbg !88
  %98 = load i32, i32* %2, align 4, !dbg !89
  %99 = load i32, i32* %2, align 4, !dbg !90
  %100 = icmp ne i32 %98, %99, !dbg !91
  %101 = zext i1 %100 to i32, !dbg !89
  %102 = load i32, i32* %2, align 4, !dbg !92
  %103 = load i32, i32* %3, align 4, !dbg !93
  %104 = icmp ne i32 %102, %103, !dbg !94
  %105 = zext i1 %104 to i32, !dbg !92
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i32 %101, i32 %105), !dbg !95
  %107 = load i32, i32* %2, align 4, !dbg !96
  %108 = load i32, i32* %3, align 4, !dbg !97
  %109 = icmp ne i32 %107, %108, !dbg !98
  br i1 %109, label %110, label %114, !dbg !99

110:
  %111 = load i32, i32* %4, align 4, !dbg !100
  %112 = load i32, i32* %5, align 4, !dbg !101
  %113 = icmp ne i32 %111, %112, !dbg !102
  br label %114

114:
  %115 = phi i1 [ false, %77 ], [ %113, %110 ], !dbg !48
  %116 = zext i1 %115 to i32, !dbg !96
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %116), !dbg !103
  %118 = load i32, i32* %2, align 4, !dbg !104
  %119 = load i32, i32* %3, align 4, !dbg !105
  %120 = load i32, i32* %4, align 4, !dbg !106
  %121 = mul nsw i32 %119, %120, !dbg !107
  %122 = load i32, i32* %7, align 4, !dbg !108
  %123 = sdiv i32 %121, %122, !dbg !109
  %124 = add nsw i32 %118, %123, !dbg !110
  %125 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %124), !dbg !111
  %126 = load i32, i32* %2, align 4, !dbg !112
  %127 = load i32, i32* %3, align 4, !dbg !113
  %128 = load i32, i32* %4, align 4, !dbg !114
  %129 = mul nsw i32 %127, %128, !dbg !115
  %130 = load i32, i32* %7, align 4, !dbg !116
  %131 = sdiv i32 %129, %130, !dbg !117
  %132 = add nsw i32 %126, %131, !dbg !118
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %132), !dbg !119
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 64), !dbg !120
  %135 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 4), !dbg !121
  ret i32 0, !dbg !122
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:29:25: [0m[0;1;35mwarning: [0m[1mself-comparison always evaluates to true [-Wtautological-compare][0m
   printf(""%d, %d\n"", a == a, a == b);
[0;1;32m                        ^
[0m[1m<source>:30:25: [0m[0;1;35mwarning: [0m[1mself-comparison always evaluates to false [-Wtautological-compare][0m
   printf(""%d, %d\n"", a != a, a != b);
[0;1;32m                        ^
[0m2 warnings generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 96
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 12
        mov     dword ptr [rbp - 12], 34
        mov     dword ptr [rbp - 16], 56
        mov     dword ptr [rbp - 20], 78
        mov     dword ptr [rbp - 24], 0
        mov     dword ptr [rbp - 28], 1
        mov     eax, dword ptr [rbp - 16]
        add     eax, dword ptr [rbp - 20]
        movabs  rdi, offset .L.str
        mov     esi, eax
        mov     al, 0
        call    printf
        mov     ecx, dword ptr [rbp - 16]
        add     ecx, dword ptr [rbp - 20]
        mov     dword ptr [rbp - 36], ecx
        movabs  rdi, offset .L.str
        mov     esi, ecx
        mov     dword ptr [rbp - 40], eax # 4-byte Spill
        mov     al, 0
        call    printf
        cmp     dword ptr [rbp - 24], 0
        mov     dl, 1
        mov     byte ptr [rbp - 41], dl # 1-byte Spill
        jne     .LBB0_4
        xor     eax, eax
        cmp     dword ptr [rbp - 24], 0
        mov     byte ptr [rbp - 42], al # 1-byte Spill
        je      .LBB0_3
        cmp     dword ptr [rbp - 28], 0
        setne   al
        mov     byte ptr [rbp - 42], al # 1-byte Spill
.LBB0_3:
        mov     al, byte ptr [rbp - 42] # 1-byte Reload
        mov     byte ptr [rbp - 41], al # 1-byte Spill
.LBB0_4:
        mov     al, byte ptr [rbp - 41] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        cmp     dword ptr [rbp - 24], 0
        mov     cl, 1
        mov     byte ptr [rbp - 43], cl # 1-byte Spill
        jne     .LBB0_8
        xor     eax, eax
        cmp     dword ptr [rbp - 28], 0
        mov     byte ptr [rbp - 44], al # 1-byte Spill
        je      .LBB0_7
        cmp     dword ptr [rbp - 28], 0
        setne   al
        mov     byte ptr [rbp - 44], al # 1-byte Spill
.LBB0_7:
        mov     al, byte ptr [rbp - 44] # 1-byte Reload
        mov     byte ptr [rbp - 43], al # 1-byte Spill
.LBB0_8:
        mov     al, byte ptr [rbp - 43] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        cmp     dword ptr [rbp - 24], 0
        je      .LBB0_10
        cmp     dword ptr [rbp - 24], 0
        mov     al, 1
        mov     byte ptr [rbp - 45], al # 1-byte Spill
        jne     .LBB0_11
.LBB0_10:
        cmp     dword ptr [rbp - 28], 0
        setne   al
        mov     byte ptr [rbp - 45], al # 1-byte Spill
.LBB0_11:
        mov     al, byte ptr [rbp - 45] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        cmp     dword ptr [rbp - 24], 0
        je      .LBB0_13
        cmp     dword ptr [rbp - 28], 0
        mov     al, 1
        mov     byte ptr [rbp - 46], al # 1-byte Spill
        jne     .LBB0_14
.LBB0_13:
        cmp     dword ptr [rbp - 28], 0
        setne   al
        mov     byte ptr [rbp - 46], al # 1-byte Spill
.LBB0_14:
        mov     al, byte ptr [rbp - 46] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        xor     ecx, ecx
        cmp     dword ptr [rbp - 8], 0
        mov     byte ptr [rbp - 47], cl # 1-byte Spill
        je      .LBB0_16
        mov     eax, dword ptr [rbp - 28]
        or      eax, dword ptr [rbp - 28]
        cmp     eax, 0
        setne   cl
        mov     byte ptr [rbp - 47], cl # 1-byte Spill
.LBB0_16:
        mov     al, byte ptr [rbp - 47] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     ecx, dword ptr [rbp - 8]
        mov     edx, dword ptr [rbp - 12]
        mov     esi, dword ptr [rbp - 16]
        and     esi, dword ptr [rbp - 20]
        xor     edx, esi
        or      ecx, edx
        movabs  rdi, offset .L.str
        mov     esi, ecx
        mov     dword ptr [rbp - 52], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     ecx, dword ptr [rbp - 8]
        cmp     ecx, dword ptr [rbp - 8]
        sete    r8b
        and     r8b, 1
        movzx   esi, r8b
        mov     ecx, dword ptr [rbp - 8]
        cmp     ecx, dword ptr [rbp - 12]
        sete    r8b
        and     r8b, 1
        movzx   edx, r8b
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 56], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     ecx, dword ptr [rbp - 8]
        cmp     ecx, dword ptr [rbp - 8]
        setne   r8b
        and     r8b, 1
        movzx   esi, r8b
        mov     ecx, dword ptr [rbp - 8]
        cmp     ecx, dword ptr [rbp - 12]
        setne   r8b
        and     r8b, 1
        movzx   edx, r8b
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 60], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     edx, dword ptr [rbp - 8]
        cmp     edx, dword ptr [rbp - 12]
        mov     byte ptr [rbp - 61], cl # 1-byte Spill
        je      .LBB0_18
        mov     eax, dword ptr [rbp - 16]
        cmp     eax, dword ptr [rbp - 20]
        setne   cl
        mov     byte ptr [rbp - 61], cl # 1-byte Spill
.LBB0_18:
        mov     al, byte ptr [rbp - 61] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     ecx, dword ptr [rbp - 8]
        mov     edx, dword ptr [rbp - 12]
        imul    edx, dword ptr [rbp - 16]
        mov     dword ptr [rbp - 68], eax # 4-byte Spill
        mov     eax, edx
        cdq
        idiv    dword ptr [rbp - 28]
        add     ecx, eax
        movabs  rdi, offset .L.str
        mov     esi, ecx
        mov     al, 0
        call    printf
        mov     ecx, dword ptr [rbp - 8]
        mov     esi, dword ptr [rbp - 12]
        imul    esi, dword ptr [rbp - 16]
        mov     dword ptr [rbp - 72], eax # 4-byte Spill
        mov     eax, esi
        cdq
        idiv    dword ptr [rbp - 28]
        add     ecx, eax
        movabs  rdi, offset .L.str
        mov     esi, ecx
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 64
        mov     dword ptr [rbp - 76], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 4
        mov     dword ptr [rbp - 80], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 84], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 96
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

.L.str.1:
        .asciz  ""%d, %d\n""

Standard error:
[1m<source>:23:26: [0m[0;1;35mwarning: [0m[1m'&&' within '||' [-Wlogical-op-parentheses][0m
   printf(""%d\n"", e || e && f);
[0;1;32m                    ~~ ~~^~~~
[0m[1m<source>:23:26: [0m[0;1;30mnote: [0mplace parentheses around the '&&' expression to silence this warning[0m
   printf(""%d\n"", e || e && f);
[0;1;32m                         ^
[0m[0;32m                       (     )
[0m[1m<source>:24:26: [0m[0;1;35mwarning: [0m[1m'&&' within '||' [-Wlogical-op-parentheses][0m
   printf(""%d\n"", e || f && f);
[0;1;32m                    ~~ ~~^~~~
[0m[1m<source>:24:26: [0m[0;1;30mnote: [0mplace parentheses around the '&&' expression to silence this warning[0m
   printf(""%d\n"", e || f && f);
[0;1;32m                         ^
[0m[0;32m                       (     )
[0m[1m<source>:25:21: [0m[0;1;35mwarning: [0m[1m'&&' within '||' [-Wlogical-op-parentheses][0m
   printf(""%d\n"", e && e || f);
[0;1;32m                  ~~^~~~ ~~
[0m[1m<source>:25:21: [0m[0;1;30mnote: [0mplace parentheses around the '&&' expression to silence this warning[0m
   printf(""%d\n"", e && e || f);
[0;1;32m                    ^
[0m[0;32m                  (     )
[0m[1m<source>:26:21: [0m[0;1;35mwarning: [0m[1m'&&' within '||' [-Wlogical-op-parentheses][0m
   printf(""%d\n"", e && f || f);
[0;1;32m                  ~~^~~~ ~~
[0m[1m<source>:26:21: [0m[0;1;30mnote: [0mplace parentheses around the '&&' expression to silence this warning[0m
   printf(""%d\n"", e && f || f);
[0;1;32m                    ^
[0m[0;32m                  (     )
[0m[1m<source>:28:29: [0m[0;1;35mwarning: [0m[1m'&' within '^' [-Wbitwise-op-parentheses][0m
   printf(""%d\n"", a | b ^ c & d);
[0;1;32m                        ~ ~~^~~
[0m[1m<source>:28:29: [0m[0;1;30mnote: [0mplace parentheses around the '&' expression to silence this warning[0m
   printf(""%d\n"", a | b ^ c & d);
[0;1;32m                            ^
[0m[0;32m                          (    )
[0m[1m<source>:28:25: [0m[0;1;35mwarning: [0m[1m'^' within '|' [-Wbitwise-op-parentheses][0m
   printf(""%d\n"", a | b ^ c & d);
[0;1;32m                    ~ ~~^~~~~~~
[0m[1m<source>:28:25: [0m[0;1;30mnote: [0mplace parentheses around the '^' expression to silence this warning[0m
   printf(""%d\n"", a | b ^ c & d);
[0;1;32m                        ^
[0m[0;32m                      (        )
[0m[1m<source>:29:25: [0m[0;1;35mwarning: [0m[1mself-comparison always evaluates to true [-Wtautological-compare][0m
   printf(""%d, %d\n"", a == a, a == b);
[0;1;32m                        ^
[0m[1m<source>:30:25: [0m[0;1;35mwarning: [0m[1mself-comparison always evaluates to false [-Wtautological-compare][0m
   printf(""%d, %d\n"", a != a, a != b);
[0;1;32m                        ^
[0m[1m<source>:11:8: [0m[0;1;35mwarning: [0m[1munused variable 'x' [-Wunused-variable][0m
   int x;
[0;1;32m       ^
[0m9 warnings generated.
",-Wall
source\00165.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c""%d, %d, %d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 12), !dbg !12
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 12, i32 24, i32 36), !dbg !13
  ret i32 0, !dbg !14
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     esi, 12
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.1
        mov     esi, 12
        mov     edx, 24
        mov     ecx, 36
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

.L.str.1:
        .asciz  ""%d, %d, %d\n""

",-Wall
source\00166.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 24680, i32* %2, align 4, !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 342391, i32* %3, align 4, !dbg !15
  call void @llvm.dbg.declare(metadata i32* %4, metadata !16, metadata !DIExpression()), !dbg !17
  store i32 2386092, i32* %4, align 4, !dbg !17
  call void @llvm.dbg.declare(metadata i32* %5, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 2386092, i32* %5, align 4, !dbg !19
  %6 = load i32, i32* %2, align 4, !dbg !20
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %6), !dbg !21
  %8 = load i32, i32* %3, align 4, !dbg !22
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %8), !dbg !23
  %10 = load i32, i32* %4, align 4, !dbg !24
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %10), !dbg !25
  %12 = load i32, i32* %5, align 4, !dbg !26
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %12), !dbg !27
  ret i32 0, !dbg !28
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 24680
        mov     dword ptr [rbp - 12], 342391
        mov     dword ptr [rbp - 16], 2386092
        mov     dword ptr [rbp - 20], 2386092
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     esi, dword ptr [rbp - 12]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     esi, dword ptr [rbp - 16]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     esi, dword ptr [rbp - 20]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 32], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 48
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00167.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [11 x i8] c""a is true\0A\00"", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c""a is false\0A\00"", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c""b is true\0A\00"", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c""b is false\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 1, i32* %2, align 4, !dbg !13
  %4 = load i32, i32* %2, align 4, !dbg !14
  %5 = icmp ne i32 %4, 0, !dbg !14
  br i1 %5, label %6, label %8, !dbg !16

6:
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)), !dbg !17
  br label %10, !dbg !17

8:
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  br label %10

10:
  call void @llvm.dbg.declare(metadata i32* %3, metadata !19, metadata !DIExpression()), !dbg !20
  store i32 0, i32* %3, align 4, !dbg !20
  %11 = load i32, i32* %3, align 4, !dbg !21
  %12 = icmp ne i32 %11, 0, !dbg !21
  br i1 %12, label %13, label %15, !dbg !23

13:
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0)), !dbg !24
  br label %17, !dbg !24

15:
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0)), !dbg !25
  br label %17

17:
  ret i32 0, !dbg !26
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
        cmp     dword ptr [rbp - 8], 0
        je      .LBB0_2
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        jmp     .LBB0_3
.LBB0_2:
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
.LBB0_3:
        mov     dword ptr [rbp - 12], 0
        cmp     dword ptr [rbp - 12], 0
        je      .LBB0_5
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        jmp     .LBB0_6
.LBB0_5:
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
.LBB0_6:
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""a is true\n""

.L.str.1:
        .asciz  ""a is false\n""

.L.str.2:
        .asciz  ""b is true\n""

.L.str.3:
        .asciz  ""b is false\n""

",-Wall
source\00168.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @factorial(int)(i32 %0) #0 !dbg !7 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !12, metadata !DIExpression()), !dbg !13
  %4 = load i32, i32* %3, align 4, !dbg !14
  %5 = icmp slt i32 %4, 2, !dbg !16
  br i1 %5, label %6, label %8, !dbg !17

6:
  %7 = load i32, i32* %3, align 4, !dbg !18
  store i32 %7, i32* %2, align 4, !dbg !19
  br label %14, !dbg !19

8:
  %9 = load i32, i32* %3, align 4, !dbg !20
  %10 = load i32, i32* %3, align 4, !dbg !21
  %11 = sub nsw i32 %10, 1, !dbg !22
  %12 = call i32 @factorial(int)(i32 %11), !dbg !23
  %13 = mul nsw i32 %9, %12, !dbg !24
  store i32 %13, i32* %2, align 4, !dbg !25
  br label %14, !dbg !25

14:
  %15 = load i32, i32* %2, align 4, !dbg !26
  ret i32 %15, !dbg !26
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 @main() #2 !dbg !27 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !30, metadata !DIExpression()), !dbg !31
  store i32 1, i32* %2, align 4, !dbg !32
  br label %3, !dbg !34

3:
  %4 = load i32, i32* %2, align 4, !dbg !35
  %5 = icmp sle i32 %4, 10, !dbg !37
  br i1 %5, label %6, label %13, !dbg !38

6:
  %7 = load i32, i32* %2, align 4, !dbg !39
  %8 = call i32 @factorial(int)(i32 %7), !dbg !40
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %8), !dbg !41
  br label %10, !dbg !41

10:
  %11 = load i32, i32* %2, align 4, !dbg !42
  %12 = add nsw i32 %11, 1, !dbg !42
  store i32 %12, i32* %2, align 4, !dbg !42
  br label %3, !dbg !43

13:
  ret i32 0, !dbg !46
}

declare dso_local i32 @printf(i8*, ...) #3

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
factorial(int):                          # @factorial(int)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 8], edi
        cmp     dword ptr [rbp - 8], 2
        jge     .LBB0_2
        mov     eax, dword ptr [rbp - 8]
        mov     dword ptr [rbp - 4], eax
        jmp     .LBB0_3
.LBB0_2:
        mov     eax, dword ptr [rbp - 8]
        mov     ecx, dword ptr [rbp - 8]
        sub     ecx, 1
        mov     edi, ecx
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        call    factorial(int)
        mov     ecx, dword ptr [rbp - 12] # 4-byte Reload
        imul    ecx, eax
        mov     dword ptr [rbp - 4], ecx
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 16
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 1
.LBB1_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 10
        jg      .LBB1_4
        mov     edi, dword ptr [rbp - 8]
        call    factorial(int)
        movabs  rdi, offset .L.str
        mov     esi, eax
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB1_1
.LBB1_4:
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00169.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [10 x i8] c""%d %d %d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i32* %4, metadata !16, metadata !DIExpression()), !dbg !17
  store i32 0, i32* %2, align 4, !dbg !18
  br label %5, !dbg !20

5:
  %6 = load i32, i32* %2, align 4, !dbg !21
  %7 = icmp slt i32 %6, 2, !dbg !23
  br i1 %7, label %8, label %32, !dbg !24

8:
  store i32 0, i32* %3, align 4, !dbg !25
  br label %9, !dbg !28

9:
  %10 = load i32, i32* %3, align 4, !dbg !29
  %11 = icmp slt i32 %10, 3, !dbg !31
  br i1 %11, label %12, label %28, !dbg !32

12:
  store i32 0, i32* %4, align 4, !dbg !33
  br label %13, !dbg !36

13:
  %14 = load i32, i32* %4, align 4, !dbg !37
  %15 = icmp slt i32 %14, 3, !dbg !39
  br i1 %15, label %16, label %24, !dbg !40

16:
  %17 = load i32, i32* %2, align 4, !dbg !41
  %18 = load i32, i32* %3, align 4, !dbg !43
  %19 = load i32, i32* %4, align 4, !dbg !44
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %17, i32 %18, i32 %19), !dbg !45
  br label %21, !dbg !46

21:
  %22 = load i32, i32* %4, align 4, !dbg !47
  %23 = add nsw i32 %22, 1, !dbg !47
  store i32 %23, i32* %4, align 4, !dbg !47
  br label %13, !dbg !48

24:
  br label %25, !dbg !51

25:
  %26 = load i32, i32* %3, align 4, !dbg !52
  %27 = add nsw i32 %26, 1, !dbg !52
  store i32 %27, i32* %3, align 4, !dbg !52
  br label %9, !dbg !53

28:
  br label %29, !dbg !56

29:
  %30 = load i32, i32* %2, align 4, !dbg !57
  %31 = add nsw i32 %30, 1, !dbg !57
  store i32 %31, i32* %2, align 4, !dbg !57
  br label %5, !dbg !58

32:
  ret i32 0, !dbg !61
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
.LBB0_1:                                # =>This Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 2
        jge     .LBB0_12
        mov     dword ptr [rbp - 12], 0
.LBB0_3:                                #   Parent Loop BB0_1 Depth=1
        cmp     dword ptr [rbp - 12], 3
        jge     .LBB0_10
        mov     dword ptr [rbp - 16], 0
.LBB0_5:                                #   Parent Loop BB0_1 Depth=1
        cmp     dword ptr [rbp - 16], 3
        jge     .LBB0_8
        mov     esi, dword ptr [rbp - 8]
        mov     edx, dword ptr [rbp - 12]
        mov     ecx, dword ptr [rbp - 16]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 16]
        add     eax, 1
        mov     dword ptr [rbp - 16], eax
        jmp     .LBB0_5
.LBB0_8:                                #   in Loop: Header=BB0_3 Depth=2
        jmp     .LBB0_9
.LBB0_9:                                #   in Loop: Header=BB0_3 Depth=2
        mov     eax, dword ptr [rbp - 12]
        add     eax, 1
        mov     dword ptr [rbp - 12], eax
        jmp     .LBB0_3
.LBB0_10:                               #   in Loop: Header=BB0_1 Depth=1
        jmp     .LBB0_11
.LBB0_11:                               #   in Loop: Header=BB0_1 Depth=1
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_12:
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d %d %d\n""

",-Wall
source\00170.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:22:6: [0m[0;1;31merror: [0m[1mISO C++ forbids forward references to 'enum' types[0m
enum efoo;
[0;1;32m     ^
[0m[1m<source>:61:11: [0m[0;1;31merror: [0m[1massigning to 'enum fred' from incompatible type 'int'[0m
   frod = 12;
[0;1;32m          ^~
[0m[1m<source>:67:33: [0m[0;1;31merror: [0m[1mno matching function for call to 'deref_uintptr'[0m
   printf (""enum to int: %u\n"", deref_uintptr(&epos));
[0;1;32m                                ^~~~~~~~~~~~~
[0m[1m<source>:45:21: [0m[0;1;30mnote: [0mcandidate function not viable: no known conversion from 'enum Epositive *' to 'unsigned int *' for 1st argument[0m
static unsigned int deref_uintptr(unsigned int *p)
[0;1;32m                    ^
[0m3 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:22:6: [0m[0;1;31merror: [0m[1mISO C++ forbids forward references to 'enum' types[0m
enum efoo;
[0;1;32m     ^
[0m[1m<source>:61:11: [0m[0;1;31merror: [0m[1massigning to 'enum fred' from incompatible type 'int'[0m
   frod = 12;
[0;1;32m          ^~
[0m[1m<source>:67:33: [0m[0;1;31merror: [0m[1mno matching function for call to 'deref_uintptr'[0m
   printf (""enum to int: %u\n"", deref_uintptr(&epos));
[0;1;32m                                ^~~~~~~~~~~~~
[0m[1m<source>:45:21: [0m[0;1;30mnote: [0mcandidate function not viable: no known conversion from 'enum Epositive *' to 'unsigned int *' for 1st argument[0m
static unsigned int deref_uintptr(unsigned int *p)
[0;1;32m                    ^
[0m3 errors generated.
",-Wall
source\00171.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c""b is NULL\0A\00"", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c""b is not NULL\0A\00"", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c""c is NULL\0A\00"", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c""c is not NULL\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32** %3, metadata !14, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32** %4, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 42, i32* %2, align 4, !dbg !19
  store i32* %2, i32** %3, align 8, !dbg !20
  store i32* null, i32** %4, align 8, !dbg !21
  %5 = load i32*, i32** %3, align 8, !dbg !22
  %6 = load i32, i32* %5, align 4, !dbg !23
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %6), !dbg !24
  %8 = load i32*, i32** %3, align 8, !dbg !25
  %9 = icmp eq i32* %8, null, !dbg !27
  br i1 %9, label %10, label %12, !dbg !28

10:
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0)), !dbg !29
  br label %14, !dbg !29

12:
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0)), !dbg !30
  br label %14

14:
  %15 = load i32*, i32** %4, align 8, !dbg !31
  %16 = icmp eq i32* %15, null, !dbg !33
  br i1 %16, label %17, label %19, !dbg !34

17:
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0)), !dbg !35
  br label %21, !dbg !35

19:
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0)), !dbg !36
  br label %21

21:
  ret i32 0, !dbg !37
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 42
        lea     rax, [rbp - 8]
        mov     qword ptr [rbp - 16], rax
        mov     qword ptr [rbp - 24], 0
        mov     rax, qword ptr [rbp - 16]
        mov     esi, dword ptr [rax]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        cmp     qword ptr [rbp - 16], 0
        jne     .LBB0_2
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        jmp     .LBB0_3
.LBB0_2:
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
.LBB0_3:
        cmp     qword ptr [rbp - 24], 0
        jne     .LBB0_5
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        jmp     .LBB0_6
.LBB0_5:
        movabs  rdi, offset .L.str.4
        mov     al, 0
        call    printf
.LBB0_6:
        xor     eax, eax
        add     rsp, 32
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

.L.str.1:
        .asciz  ""b is NULL\n""

.L.str.2:
        .asciz  ""b is not NULL\n""

.L.str.3:
        .asciz  ""c is NULL\n""

.L.str.4:
        .asciz  ""c is not NULL\n""

",-Wall
source\00172.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata i32** %4, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.declare(metadata i32** %5, metadata !19, metadata !DIExpression()), !dbg !20
  store i32* %2, i32** %4, align 8, !dbg !21
  store i32* %3, i32** %5, align 8, !dbg !22
  store i32 12, i32* %2, align 4, !dbg !23
  store i32 34, i32* %3, align 4, !dbg !24
  %6 = load i32*, i32** %4, align 8, !dbg !25
  %7 = load i32, i32* %6, align 4, !dbg !26
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7), !dbg !27
  %9 = load i32*, i32** %5, align 8, !dbg !28
  %10 = load i32, i32* %9, align 4, !dbg !29
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %10), !dbg !30
  %12 = load i32*, i32** %4, align 8, !dbg !31
  %13 = load i32*, i32** %5, align 8, !dbg !32
  %14 = icmp eq i32* %12, %13, !dbg !33
  %15 = zext i1 %14 to i32, !dbg !31
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %15), !dbg !34
  %17 = load i32*, i32** %4, align 8, !dbg !35
  %18 = load i32*, i32** %5, align 8, !dbg !36
  %19 = icmp ne i32* %17, %18, !dbg !37
  %20 = zext i1 %19 to i32, !dbg !35
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %20), !dbg !38
  %22 = load i32*, i32** %5, align 8, !dbg !39
  store i32* %22, i32** %4, align 8, !dbg !40
  %23 = load i32*, i32** %4, align 8, !dbg !41
  %24 = load i32*, i32** %5, align 8, !dbg !42
  %25 = icmp eq i32* %23, %24, !dbg !43
  %26 = zext i1 %25 to i32, !dbg !41
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %26), !dbg !44
  %28 = load i32*, i32** %4, align 8, !dbg !45
  %29 = load i32*, i32** %5, align 8, !dbg !46
  %30 = icmp ne i32* %28, %29, !dbg !47
  %31 = zext i1 %30 to i32, !dbg !45
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %31), !dbg !48
  ret i32 0, !dbg !49
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     dword ptr [rbp - 4], 0
        lea     rax, [rbp - 8]
        mov     qword ptr [rbp - 24], rax
        lea     rax, [rbp - 12]
        mov     qword ptr [rbp - 32], rax
        mov     dword ptr [rbp - 8], 12
        mov     dword ptr [rbp - 12], 34
        mov     rax, qword ptr [rbp - 24]
        mov     esi, dword ptr [rax]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     rcx, qword ptr [rbp - 32]
        mov     esi, dword ptr [rcx]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     rcx, qword ptr [rbp - 24]
        cmp     rcx, qword ptr [rbp - 32]
        sete    dl
        and     dl, 1
        movzx   esi, dl
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 40], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     rcx, qword ptr [rbp - 24]
        cmp     rcx, qword ptr [rbp - 32]
        setne   dl
        and     dl, 1
        movzx   esi, dl
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 44], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     rcx, qword ptr [rbp - 32]
        mov     qword ptr [rbp - 24], rcx
        mov     rcx, qword ptr [rbp - 24]
        cmp     rcx, qword ptr [rbp - 32]
        sete    dl
        and     dl, 1
        movzx   esi, dl
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 48], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     rcx, qword ptr [rbp - 24]
        cmp     rcx, qword ptr [rbp - 32]
        setne   dl
        and     dl, 1
        movzx   esi, dl
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 52], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     esi, esi
        mov     dword ptr [rbp - 56], eax # 4-byte Spill
        mov     eax, esi
        add     rsp, 64
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00173.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [6 x i8] c""hello\00"", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c""%s\0A\00"", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c""%c: %d\0A\00"", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c""copied string is %s\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8, align 1
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca [10 x i8], align 1
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 97, i32* %2, align 4, !dbg !13
  call void @llvm.dbg.declare(metadata i8* %3, metadata !14, metadata !DIExpression()), !dbg !16
  %10 = load i32, i32* %2, align 4, !dbg !17
  %11 = trunc i32 %10 to i8, !dbg !17
  store i8 %11, i8* %3, align 1, !dbg !16
  call void @llvm.dbg.declare(metadata i8** %4, metadata !18, metadata !DIExpression()), !dbg !20
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** %4, align 8, !dbg !20
  %12 = load i8*, i8** %4, align 8, !dbg !21
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %12), !dbg !22
  call void @llvm.dbg.declare(metadata i32* %5, metadata !23, metadata !DIExpression()), !dbg !24
  %14 = load i8*, i8** %4, align 8, !dbg !25
  %15 = load i8, i8* %14, align 1, !dbg !26
  %16 = sext i8 %15 to i32, !dbg !26
  store i32 %16, i32* %5, align 4, !dbg !27
  call void @llvm.dbg.declare(metadata i8** %6, metadata !28, metadata !DIExpression()), !dbg !29
  %17 = load i8*, i8** %4, align 8, !dbg !30
  store i8* %17, i8** %6, align 8, !dbg !32
  br label %18, !dbg !33

18:
  %19 = load i8*, i8** %6, align 8, !dbg !34
  %20 = load i8, i8* %19, align 1, !dbg !36
  %21 = sext i8 %20 to i32, !dbg !36
  %22 = icmp ne i32 %21, 0, !dbg !37
  br i1 %22, label %23, label %34, !dbg !38

23:
  %24 = load i8*, i8** %6, align 8, !dbg !39
  %25 = load i8, i8* %24, align 1, !dbg !40
  %26 = sext i8 %25 to i32, !dbg !40
  %27 = load i8*, i8** %6, align 8, !dbg !41
  %28 = load i8, i8* %27, align 1, !dbg !42
  %29 = sext i8 %28 to i32, !dbg !42
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i32 %26, i32 %29), !dbg !43
  br label %31, !dbg !43

31:
  %32 = load i8*, i8** %6, align 8, !dbg !44
  %33 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !44
  store i8* %33, i8** %6, align 8, !dbg !44
  br label %18, !dbg !45

34:
  call void @llvm.dbg.declare(metadata [10 x i8]* %7, metadata !48, metadata !DIExpression()), !dbg !52
  call void @llvm.dbg.declare(metadata i8** %8, metadata !53, metadata !DIExpression()), !dbg !54
  %35 = getelementptr inbounds [10 x i8], [10 x i8]* %7, i64 0, i64 0, !dbg !55
  store i8* %35, i8** %8, align 8, !dbg !54
  call void @llvm.dbg.declare(metadata i8** %9, metadata !56, metadata !DIExpression()), !dbg !57
  %36 = load i8*, i8** %4, align 8, !dbg !58
  store i8* %36, i8** %9, align 8, !dbg !57
  br label %37, !dbg !59

37:
  %38 = load i8*, i8** %9, align 8, !dbg !60
  %39 = load i8, i8* %38, align 1, !dbg !61
  %40 = sext i8 %39 to i32, !dbg !61
  %41 = icmp ne i32 %40, 0, !dbg !62
  br i1 %41, label %42, label %48, !dbg !59

42:
  %43 = load i8*, i8** %9, align 8, !dbg !63
  %44 = getelementptr inbounds i8, i8* %43, i32 1, !dbg !63
  store i8* %44, i8** %9, align 8, !dbg !63
  %45 = load i8, i8* %43, align 1, !dbg !64
  %46 = load i8*, i8** %8, align 8, !dbg !65
  %47 = getelementptr inbounds i8, i8* %46, i32 1, !dbg !65
  store i8* %47, i8** %8, align 8, !dbg !65
  store i8 %45, i8* %46, align 1, !dbg !66
  br label %37, !dbg !59

48:
  %49 = load i8*, i8** %8, align 8, !dbg !68
  store i8 0, i8* %49, align 1, !dbg !69
  %50 = getelementptr inbounds [10 x i8], [10 x i8]* %7, i64 0, i64 0, !dbg !70
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i8* %50), !dbg !71
  ret i32 0, !dbg !72
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:8:14: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
   char *a = ""hello"";
[0;1;32m             ^
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 97
        mov     eax, dword ptr [rbp - 8]
        mov     byte ptr [rbp - 9], al
        movabs  rcx, offset .L.str
        mov     qword ptr [rbp - 24], rcx
        mov     rsi, qword ptr [rbp - 24]
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        mov     rcx, qword ptr [rbp - 24]
        movsx   edx, byte ptr [rcx]
        mov     dword ptr [rbp - 28], edx
        mov     rcx, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 40], rcx
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        mov     rax, qword ptr [rbp - 40]
        movsx   ecx, byte ptr [rax]
        cmp     ecx, 0
        je      .LBB0_4
        mov     rax, qword ptr [rbp - 40]
        movsx   esi, byte ptr [rax]
        mov     rax, qword ptr [rbp - 40]
        movsx   edx, byte ptr [rax]
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        mov     rax, qword ptr [rbp - 40]
        add     rax, 1
        mov     qword ptr [rbp - 40], rax
        jmp     .LBB0_1
.LBB0_4:
        lea     rax, [rbp - 50]
        mov     qword ptr [rbp - 64], rax
        mov     rax, qword ptr [rbp - 24]
        mov     qword ptr [rbp - 72], rax
.LBB0_5:                                # =>This Inner Loop Header: Depth=1
        mov     rax, qword ptr [rbp - 72]
        movsx   ecx, byte ptr [rax]
        cmp     ecx, 0
        je      .LBB0_7
        mov     rax, qword ptr [rbp - 72]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 72], rcx
        mov     dl, byte ptr [rax]
        mov     rax, qword ptr [rbp - 64]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 64], rcx
        mov     byte ptr [rax], dl
        jmp     .LBB0_5
.LBB0_7:
        lea     rsi, [rbp - 50]
        mov     rax, qword ptr [rbp - 64]
        mov     byte ptr [rax], 0
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 76], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 80
        pop     rbp
        ret
.L.str:
        .asciz  ""hello""

.L.str.1:
        .asciz  ""%s\n""

.L.str.2:
        .asciz  ""%c: %d\n""

.L.str.3:
        .asciz  ""copied string is %s\n""

Standard error:
[1m<source>:8:14: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
   char *a = ""hello"";
[0;1;32m             ^
[0m[1m<source>:6:9: [0m[0;1;35mwarning: [0m[1munused variable 'y' [-Wunused-variable][0m
   char y = x;
[0;1;32m        ^
[0m2 warnings generated.
",-Wall
source\00174.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
$_ZSt3sinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_ = comdat any

@.str = private unnamed_addr constant [4 x i8] c""%f\0A\00"", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c""%d %d %d %d %d %d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !366 {
  %1 = alloca i32, align 4
  %2 = alloca float, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !370, metadata !DIExpression()), !dbg !371
  store float 0x405147AE20000000, float* %2, align 4, !dbg !371
  %3 = load float, float* %2, align 4, !dbg !372
  %4 = fpext float %3 to double, !dbg !372
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %4), !dbg !373
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double 6.912000e+01), !dbg !374
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double -4.444000e+01), !dbg !375
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double 0x4085E5525460AA65), !dbg !376
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double 0x3FCBD1788F8E0597), !dbg !377
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 1, i32 1, i32 0, i32 0, i32 0, i32 1), !dbg !378
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 1, i32 1, i32 1, i32 0, i32 0), !dbg !379
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 0, i32 0, i32 1, i32 1, i32 1), !dbg !380
  store float 0x4028AE1480000000, float* %2, align 4, !dbg !381
  %13 = load float, float* %2, align 4, !dbg !382
  %14 = fpext float %13 to double, !dbg !382
  %15 = fadd double %14, 5.678000e+01, !dbg !382
  %16 = fptrunc double %15 to float, !dbg !382
  store float %16, float* %2, align 4, !dbg !382
  %17 = load float, float* %2, align 4, !dbg !383
  %18 = fpext float %17 to double, !dbg !383
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %18), !dbg !384
  store float 0x4028AE1480000000, float* %2, align 4, !dbg !385
  %20 = load float, float* %2, align 4, !dbg !386
  %21 = fpext float %20 to double, !dbg !386
  %22 = fsub double %21, 5.678000e+01, !dbg !386
  %23 = fptrunc double %22 to float, !dbg !386
  store float %23, float* %2, align 4, !dbg !386
  %24 = load float, float* %2, align 4, !dbg !387
  %25 = fpext float %24 to double, !dbg !387
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %25), !dbg !388
  store float 0x4028AE1480000000, float* %2, align 4, !dbg !389
  %27 = load float, float* %2, align 4, !dbg !390
  %28 = fpext float %27 to double, !dbg !390
  %29 = fmul double %28, 5.678000e+01, !dbg !390
  %30 = fptrunc double %29 to float, !dbg !390
  store float %30, float* %2, align 4, !dbg !390
  %31 = load float, float* %2, align 4, !dbg !391
  %32 = fpext float %31 to double, !dbg !391
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %32), !dbg !392
  store float 0x4028AE1480000000, float* %2, align 4, !dbg !393
  %34 = load float, float* %2, align 4, !dbg !394
  %35 = fpext float %34 to double, !dbg !394
  %36 = fdiv double %35, 5.678000e+01, !dbg !394
  %37 = fptrunc double %36 to float, !dbg !394
  store float %37, float* %2, align 4, !dbg !394
  %38 = load float, float* %2, align 4, !dbg !395
  %39 = fpext float %38 to double, !dbg !395
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %39), !dbg !396
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double 1.234000e+01), !dbg !397
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double -1.234000e+01), !dbg !398
  store float 2.000000e+00, float* %2, align 4, !dbg !399
  %43 = load float, float* %2, align 4, !dbg !400
  %44 = fpext float %43 to double, !dbg !400
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %44), !dbg !401
  %46 = call double @_ZSt3sinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 2), !dbg !402
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %46), !dbg !403
  ret i32 0, !dbg !404
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

define linkonce_odr dso_local double @_ZSt3sinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 %0) #3 comdat !dbg !405 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !418, metadata !DIExpression()), !dbg !419
  %3 = load i32, i32* %2, align 4, !dbg !420
  %4 = sitofp i32 %3 to double, !dbg !420
  %5 = call double @sin(double %4) #5, !dbg !421
  ret double %5, !dbg !422
}

declare dso_local double @sin(double) #4

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #4 = { nounwind ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #5 = { nounwind }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
.LCPI0_0:
        .long   1073741824              # float 2
.LCPI0_4:
        .long   1095069860              # float 12.3400002
.LCPI0_9:
        .long   1116355953              # float 69.1200027
.LCPI0_1:
        .quad   -4600235616374798418    # double -12.34
.LCPI0_2:
        .quad   4623136420479977390     # double 12.34
.LCPI0_3:
        .quad   4633187891898314916     # double 56.780000000000001
.LCPI0_5:
        .quad   4596998160396453271     # double 0.21733004579077139
.LCPI0_6:
        .quad   4649374332095605349     # double 700.66520000000003
.LCPI0_7:
        .quad   -4591920845562765640    # double -44.439999999999998
.LCPI0_8:
        .quad   4634564304534430024     # double 69.120000000000005
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 96
        movss   xmm0, dword ptr [rip + .LCPI0_9] # xmm0 = mem[0],zero,zero,zero
        mov     dword ptr [rbp - 4], 0
        movss   dword ptr [rbp - 8], xmm0
        movss   xmm0, dword ptr [rbp - 8] # xmm0 = mem[0],zero,zero,zero
        cvtss2sd        xmm0, xmm0
        movabs  rdi, offset .L.str
        mov     al, 1
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_8] # xmm0 = mem[0],zero
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 1
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_7] # xmm0 = mem[0],zero
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 1
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_6] # xmm0 = mem[0],zero
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     al, 1
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_5] # xmm0 = mem[0],zero
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        mov     al, 1
        call    printf
        xor     ecx, ecx
        movabs  rdi, offset .L.str.1
        mov     edx, 1
        mov     esi, edx
        mov     dword ptr [rbp - 28], ecx # 4-byte Spill
        mov     r8d, dword ptr [rbp - 28] # 4-byte Reload
        mov     r9d, dword ptr [rbp - 28] # 4-byte Reload
        mov     dword ptr [rsp], 1
        mov     dword ptr [rbp - 32], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        movabs  rdi, offset .L.str.1
        mov     esi, ecx
        mov     edx, 1
        mov     dword ptr [rbp - 36], edx # 4-byte Spill
        mov     r8d, dword ptr [rbp - 36] # 4-byte Reload
        mov     dword ptr [rbp - 40], ecx # 4-byte Spill
        mov     ecx, r8d
        mov     r9d, dword ptr [rbp - 40] # 4-byte Reload
        mov     dword ptr [rsp], 0
        mov     dword ptr [rbp - 44], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        movabs  rdi, offset .L.str.1
        mov     esi, ecx
        mov     edx, ecx
        mov     r8d, 1
        mov     dword ptr [rbp - 48], r8d # 4-byte Spill
        mov     r9d, dword ptr [rbp - 48] # 4-byte Reload
        mov     dword ptr [rsp], 1
        mov     dword ptr [rbp - 52], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_3] # xmm0 = mem[0],zero
        movss   xmm1, dword ptr [rip + .LCPI0_4] # xmm1 = mem[0],zero,zero,zero
        movss   dword ptr [rbp - 8], xmm1
        movss   xmm1, dword ptr [rbp - 8] # xmm1 = mem[0],zero,zero,zero
        cvtss2sd        xmm1, xmm1
        addsd   xmm1, xmm0
        cvtsd2ss        xmm0, xmm1
        movss   dword ptr [rbp - 8], xmm0
        movss   xmm0, dword ptr [rbp - 8] # xmm0 = mem[0],zero,zero,zero
        cvtss2sd        xmm0, xmm0
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 56], eax # 4-byte Spill
        mov     al, 1
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_3] # xmm0 = mem[0],zero
        movss   xmm1, dword ptr [rip + .LCPI0_4] # xmm1 = mem[0],zero,zero,zero
        movss   dword ptr [rbp - 8], xmm1
        movss   xmm1, dword ptr [rbp - 8] # xmm1 = mem[0],zero,zero,zero
        cvtss2sd        xmm1, xmm1
        subsd   xmm1, xmm0
        cvtsd2ss        xmm0, xmm1
        movss   dword ptr [rbp - 8], xmm0
        movss   xmm0, dword ptr [rbp - 8] # xmm0 = mem[0],zero,zero,zero
        cvtss2sd        xmm0, xmm0
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 60], eax # 4-byte Spill
        mov     al, 1
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_3] # xmm0 = mem[0],zero
        movss   xmm1, dword ptr [rip + .LCPI0_4] # xmm1 = mem[0],zero,zero,zero
        movss   dword ptr [rbp - 8], xmm1
        movss   xmm1, dword ptr [rbp - 8] # xmm1 = mem[0],zero,zero,zero
        cvtss2sd        xmm1, xmm1
        mulsd   xmm1, xmm0
        cvtsd2ss        xmm0, xmm1
        movss   dword ptr [rbp - 8], xmm0
        movss   xmm0, dword ptr [rbp - 8] # xmm0 = mem[0],zero,zero,zero
        cvtss2sd        xmm0, xmm0
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 64], eax # 4-byte Spill
        mov     al, 1
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_3] # xmm0 = mem[0],zero
        movss   xmm1, dword ptr [rip + .LCPI0_4] # xmm1 = mem[0],zero,zero,zero
        movss   dword ptr [rbp - 8], xmm1
        movss   xmm1, dword ptr [rbp - 8] # xmm1 = mem[0],zero,zero,zero
        cvtss2sd        xmm1, xmm1
        divsd   xmm1, xmm0
        cvtsd2ss        xmm0, xmm1
        movss   dword ptr [rbp - 8], xmm0
        movss   xmm0, dword ptr [rbp - 8] # xmm0 = mem[0],zero,zero,zero
        cvtss2sd        xmm0, xmm0
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 68], eax # 4-byte Spill
        mov     al, 1
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_2] # xmm0 = mem[0],zero
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 72], eax # 4-byte Spill
        mov     al, 1
        call    printf
        movsd   xmm0, qword ptr [rip + .LCPI0_1] # xmm0 = mem[0],zero
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 76], eax # 4-byte Spill
        mov     al, 1
        call    printf
        movss   xmm0, dword ptr [rip + .LCPI0_0] # xmm0 = mem[0],zero,zero,zero
        movss   dword ptr [rbp - 8], xmm0
        movss   xmm0, dword ptr [rbp - 8] # xmm0 = mem[0],zero,zero,zero
        cvtss2sd        xmm0, xmm0
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 80], eax # 4-byte Spill
        mov     al, 1
        call    printf
        mov     edi, 2
        mov     dword ptr [rbp - 84], eax # 4-byte Spill
        call    _ZSt3sinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_
        movabs  rdi, offset .L.str
        mov     al, 1
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 88], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 96
        pop     rbp
        ret
_ZSt3sinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_: # @_ZSt3sinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], edi
        cvtsi2sd        xmm0, dword ptr [rbp - 4]
        call    sin
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%f\n""

.L.str.1:
        .asciz  ""%d %d %d %d %d %d\n""

",-Wall
source\00175.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [10 x i8] c""char: %c\0A\00"", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c""int: %d\0A\00"", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c""float: %f\0A\00"", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c""%d %d\0A\00"", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c""%f %f\0A\00"", align 1

define dso_local void @charfunc(char)(i8 signext %0) #0 !dbg !7 {
  %2 = alloca i8, align 1
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !12, metadata !DIExpression()), !dbg !13
  %3 = load i8, i8* %2, align 1, !dbg !14
  %4 = sext i8 %3 to i32, !dbg !14
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %4), !dbg !15
  ret void, !dbg !16
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

define dso_local void @intfunc(int)(i32 %0) #0 !dbg !17 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !21, metadata !DIExpression()), !dbg !22
  %3 = load i32, i32* %2, align 4, !dbg !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 %3), !dbg !24
  ret void, !dbg !25
}

define dso_local void @floatfunc(float)(float %0) #0 !dbg !26 {
  %2 = alloca float, align 4
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !30, metadata !DIExpression()), !dbg !31
  %3 = load float, float* %2, align 4, !dbg !32
  %4 = fpext float %3 to double, !dbg !32
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %4), !dbg !33
  ret void, !dbg !34
}

define dso_local i32 @main() #3 !dbg !35 {
  %1 = alloca i32, align 4
  %2 = alloca i8, align 1
  %3 = alloca i8, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  store i32 0, i32* %1, align 4
  call void @charfunc(char)(i8 signext 97), !dbg !38
  call void @charfunc(char)(i8 signext 98), !dbg !39
  call void @charfunc(char)(i8 signext 99), !dbg !40
  call void @intfunc(int)(i32 97), !dbg !41
  call void @intfunc(int)(i32 98), !dbg !42
  call void @intfunc(int)(i32 99), !dbg !43
  call void @floatfunc(float)(float 9.700000e+01), !dbg !44
  call void @floatfunc(float)(float 9.800000e+01), !dbg !45
  call void @floatfunc(float)(float 9.900000e+01), !dbg !46
  call void @llvm.dbg.declare(metadata i8* %2, metadata !47, metadata !DIExpression()), !dbg !48
  store i8 97, i8* %2, align 1, !dbg !48
  call void @llvm.dbg.declare(metadata i8* %3, metadata !49, metadata !DIExpression()), !dbg !50
  store i8 97, i8* %3, align 1, !dbg !50
  %8 = load i8, i8* %2, align 1, !dbg !51
  %9 = sext i8 %8 to i32, !dbg !51
  %10 = load i8, i8* %3, align 1, !dbg !52
  %11 = sext i8 %10 to i32, !dbg !52
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i32 %9, i32 %11), !dbg !53
  call void @llvm.dbg.declare(metadata i32* %4, metadata !54, metadata !DIExpression()), !dbg !55
  store i32 97, i32* %4, align 4, !dbg !55
  call void @llvm.dbg.declare(metadata i32* %5, metadata !56, metadata !DIExpression()), !dbg !57
  store i32 97, i32* %5, align 4, !dbg !57
  %13 = load i32, i32* %4, align 4, !dbg !58
  %14 = load i32, i32* %5, align 4, !dbg !59
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i32 %13, i32 %14), !dbg !60
  call void @llvm.dbg.declare(metadata float* %6, metadata !61, metadata !DIExpression()), !dbg !62
  store float 9.700000e+01, float* %6, align 4, !dbg !62
  call void @llvm.dbg.declare(metadata float* %7, metadata !63, metadata !DIExpression()), !dbg !64
  store float 9.700000e+01, float* %7, align 4, !dbg !64
  %16 = load float, float* %6, align 4, !dbg !65
  %17 = fpext float %16 to double, !dbg !65
  %18 = load float, float* %7, align 4, !dbg !66
  %19 = fpext float %18 to double, !dbg !66
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), double %17, double %19), !dbg !67
  ret i32 0, !dbg !68
}

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
charfunc(char):                           # @charfunc(char)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     byte ptr [rbp - 1], dil
        movsx   esi, byte ptr [rbp - 1]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        add     rsp, 16
        pop     rbp
        ret
intfunc(int):                            # @intfunc(int)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], edi
        mov     esi, dword ptr [rbp - 4]
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        add     rsp, 16
        pop     rbp
        ret
floatfunc(float):                          # @floatfunc(float)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        movss   dword ptr [rbp - 4], xmm0
        movss   xmm0, dword ptr [rbp - 4] # xmm0 = mem[0],zero,zero,zero
        cvtss2sd        xmm0, xmm0
        movabs  rdi, offset .L.str.2
        mov     al, 1
        call    printf
        add     rsp, 16
        pop     rbp
        ret
.LCPI3_0:
        .long   1120010240              # float 97
.LCPI3_1:
        .long   1120272384              # float 99
.LCPI3_2:
        .long   1120141312              # float 98
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     dword ptr [rbp - 4], 0
        mov     edi, 97
        call    charfunc(char)
        mov     edi, 98
        call    charfunc(char)
        mov     edi, 99
        call    charfunc(char)
        mov     edi, 97
        call    intfunc(int)
        mov     edi, 98
        call    intfunc(int)
        mov     edi, 99
        call    intfunc(int)
        movss   xmm0, dword ptr [rip + .LCPI3_0] # xmm0 = mem[0],zero,zero,zero
        call    floatfunc(float)
        movss   xmm0, dword ptr [rip + .LCPI3_2] # xmm0 = mem[0],zero,zero,zero
        call    floatfunc(float)
        movss   xmm0, dword ptr [rip + .LCPI3_1] # xmm0 = mem[0],zero,zero,zero
        call    floatfunc(float)
        mov     byte ptr [rbp - 5], 97
        mov     byte ptr [rbp - 6], 97
        movsx   esi, byte ptr [rbp - 5]
        movsx   edx, byte ptr [rbp - 6]
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 12], 97
        mov     dword ptr [rbp - 16], 97
        mov     esi, dword ptr [rbp - 12]
        mov     edx, dword ptr [rbp - 16]
        movabs  rdi, offset .L.str.3
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movss   xmm0, dword ptr [rip + .LCPI3_0] # xmm0 = mem[0],zero,zero,zero
        movss   dword ptr [rbp - 20], xmm0
        movss   dword ptr [rbp - 24], xmm0
        movss   xmm0, dword ptr [rbp - 20] # xmm0 = mem[0],zero,zero,zero
        cvtss2sd        xmm0, xmm0
        movss   xmm1, dword ptr [rbp - 24] # xmm1 = mem[0],zero,zero,zero
        cvtss2sd        xmm1, xmm1
        movabs  rdi, offset .L.str.4
        mov     dword ptr [rbp - 32], eax # 4-byte Spill
        mov     al, 2
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 48
        pop     rbp
        ret
.L.str:
        .asciz  ""char: %c\n""

.L.str.1:
        .asciz  ""int: %d\n""

.L.str.2:
        .asciz  ""float: %f\n""

.L.str.3:
        .asciz  ""%d %d\n""

.L.str.4:
        .asciz  ""%f %f\n""

",-Wall
source\00176.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@array = dso_local global [16 x i32] zeroinitializer, align 16, !dbg !0
@.str = private unnamed_addr constant [4 x i8] c""%d \00"", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c""\0A\00"", align 1

define dso_local void @swap(int, int)(i32 %0, i32 %1) #0 !dbg !15 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !20, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.declare(metadata i32* %5, metadata !22, metadata !DIExpression()), !dbg !23
  %6 = load i32, i32* %3, align 4, !dbg !24
  %7 = sext i32 %6 to i64, !dbg !25
  %8 = getelementptr inbounds [16 x i32], [16 x i32]* @array, i64 0, i64 %7, !dbg !25
  %9 = load i32, i32* %8, align 4, !dbg !25
  store i32 %9, i32* %5, align 4, !dbg !23
  %10 = load i32, i32* %4, align 4, !dbg !26
  %11 = sext i32 %10 to i64, !dbg !27
  %12 = getelementptr inbounds [16 x i32], [16 x i32]* @array, i64 0, i64 %11, !dbg !27
  %13 = load i32, i32* %12, align 4, !dbg !27
  %14 = load i32, i32* %3, align 4, !dbg !28
  %15 = sext i32 %14 to i64, !dbg !29
  %16 = getelementptr inbounds [16 x i32], [16 x i32]* @array, i64 0, i64 %15, !dbg !29
  store i32 %13, i32* %16, align 4, !dbg !30
  %17 = load i32, i32* %5, align 4, !dbg !31
  %18 = load i32, i32* %4, align 4, !dbg !32
  %19 = sext i32 %18 to i64, !dbg !33
  %20 = getelementptr inbounds [16 x i32], [16 x i32]* @array, i64 0, i64 %19, !dbg !33
  store i32 %17, i32* %20, align 4, !dbg !34
  ret void, !dbg !35
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local i32 @partition(int, int)(i32 %0, i32 %1) #0 !dbg !36 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !39, metadata !DIExpression()), !dbg !40
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !41, metadata !DIExpression()), !dbg !42
  call void @llvm.dbg.declare(metadata i32* %5, metadata !43, metadata !DIExpression()), !dbg !44
  %9 = load i32, i32* %3, align 4, !dbg !45
  store i32 %9, i32* %5, align 4, !dbg !44
  call void @llvm.dbg.declare(metadata i32* %6, metadata !46, metadata !DIExpression()), !dbg !47
  %10 = load i32, i32* %5, align 4, !dbg !48
  %11 = sext i32 %10 to i64, !dbg !49
  %12 = getelementptr inbounds [16 x i32], [16 x i32]* @array, i64 0, i64 %11, !dbg !49
  %13 = load i32, i32* %12, align 4, !dbg !49
  store i32 %13, i32* %6, align 4, !dbg !47
  call void @llvm.dbg.declare(metadata i32* %7, metadata !50, metadata !DIExpression()), !dbg !51
  %14 = load i32, i32* %3, align 4, !dbg !52
  store i32 %14, i32* %7, align 4, !dbg !51
  call void @llvm.dbg.declare(metadata i32* %8, metadata !53, metadata !DIExpression()), !dbg !54
  %15 = load i32, i32* %5, align 4, !dbg !55
  %16 = load i32, i32* %4, align 4, !dbg !56
  call void @swap(int, int)(i32 %15, i32 %16), !dbg !57
  %17 = load i32, i32* %3, align 4, !dbg !58
  store i32 %17, i32* %8, align 4, !dbg !60
  br label %18, !dbg !61

18:
  %19 = load i32, i32* %8, align 4, !dbg !62
  %20 = load i32, i32* %4, align 4, !dbg !64
  %21 = icmp slt i32 %19, %20, !dbg !65
  br i1 %21, label %22, label %38, !dbg !66

22:
  %23 = load i32, i32* %8, align 4, !dbg !67
  %24 = sext i32 %23 to i64, !dbg !70
  %25 = getelementptr inbounds [16 x i32], [16 x i32]* @array, i64 0, i64 %24, !dbg !70
  %26 = load i32, i32* %25, align 4, !dbg !70
  %27 = load i32, i32* %6, align 4, !dbg !71
  %28 = icmp slt i32 %26, %27, !dbg !72
  br i1 %28, label %29, label %34, !dbg !73

29:
  %30 = load i32, i32* %8, align 4, !dbg !74
  %31 = load i32, i32* %7, align 4, !dbg !76
  call void @swap(int, int)(i32 %30, i32 %31), !dbg !77
  %32 = load i32, i32* %7, align 4, !dbg !78
  %33 = add nsw i32 %32, 1, !dbg !78
  store i32 %33, i32* %7, align 4, !dbg !78
  br label %34, !dbg !79

34:
  br label %35, !dbg !80

35:
  %36 = load i32, i32* %8, align 4, !dbg !81
  %37 = add nsw i32 %36, 1, !dbg !81
  store i32 %37, i32* %8, align 4, !dbg !81
  br label %18, !dbg !82

38:
  %39 = load i32, i32* %4, align 4, !dbg !85
  %40 = load i32, i32* %7, align 4, !dbg !86
  call void @swap(int, int)(i32 %39, i32 %40), !dbg !87
  %41 = load i32, i32* %7, align 4, !dbg !88
  ret i32 %41, !dbg !89
}

define dso_local void @quicksort(int, int)(i32 %0, i32 %1) #2 !dbg !90 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !91, metadata !DIExpression()), !dbg !92
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !93, metadata !DIExpression()), !dbg !94
  %6 = load i32, i32* %3, align 4, !dbg !95
  %7 = load i32, i32* %4, align 4, !dbg !97
  %8 = icmp sge i32 %6, %7, !dbg !98
  br i1 %8, label %9, label %10, !dbg !99

9:
  br label %20, !dbg !100

10:
  call void @llvm.dbg.declare(metadata i32* %5, metadata !101, metadata !DIExpression()), !dbg !102
  %11 = load i32, i32* %3, align 4, !dbg !103
  %12 = load i32, i32* %4, align 4, !dbg !104
  %13 = call i32 @partition(int, int)(i32 %11, i32 %12), !dbg !105
  store i32 %13, i32* %5, align 4, !dbg !102
  %14 = load i32, i32* %3, align 4, !dbg !106
  %15 = load i32, i32* %5, align 4, !dbg !107
  %16 = sub nsw i32 %15, 1, !dbg !108
  call void @quicksort(int, int)(i32 %14, i32 %16), !dbg !109
  %17 = load i32, i32* %5, align 4, !dbg !110
  %18 = add nsw i32 %17, 1, !dbg !111
  %19 = load i32, i32* %4, align 4, !dbg !112
  call void @quicksort(int, int)(i32 %18, i32 %19), !dbg !113
  br label %20, !dbg !114

20:
  ret void, !dbg !114
}

define dso_local i32 @main() #3 !dbg !115 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !118, metadata !DIExpression()), !dbg !119
  store i32 62, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 0), align 16, !dbg !120
  store i32 83, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 1), align 4, !dbg !121
  store i32 4, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 2), align 8, !dbg !122
  store i32 89, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 3), align 4, !dbg !123
  store i32 36, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 4), align 16, !dbg !124
  store i32 21, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 5), align 4, !dbg !125
  store i32 74, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 6), align 8, !dbg !126
  store i32 37, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 7), align 4, !dbg !127
  store i32 65, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 8), align 16, !dbg !128
  store i32 33, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 9), align 4, !dbg !129
  store i32 96, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 10), align 8, !dbg !130
  store i32 38, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 11), align 4, !dbg !131
  store i32 53, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 12), align 16, !dbg !132
  store i32 16, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 13), align 4, !dbg !133
  store i32 74, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 14), align 8, !dbg !134
  store i32 55, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @array, i64 0, i64 15), align 4, !dbg !135
  store i32 0, i32* %2, align 4, !dbg !136
  br label %3, !dbg !138

3:
  %4 = load i32, i32* %2, align 4, !dbg !139
  %5 = icmp slt i32 %4, 16, !dbg !141
  br i1 %5, label %6, label %15, !dbg !142

6:
  %7 = load i32, i32* %2, align 4, !dbg !143
  %8 = sext i32 %7 to i64, !dbg !144
  %9 = getelementptr inbounds [16 x i32], [16 x i32]* @array, i64 0, i64 %8, !dbg !144
  %10 = load i32, i32* %9, align 4, !dbg !144
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %10), !dbg !145
  br label %12, !dbg !145

12:
  %13 = load i32, i32* %2, align 4, !dbg !146
  %14 = add nsw i32 %13, 1, !dbg !146
  store i32 %14, i32* %2, align 4, !dbg !146
  br label %3, !dbg !147

15:
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !150
  call void @quicksort(int, int)(i32 0, i32 15), !dbg !151
  store i32 0, i32* %2, align 4, !dbg !152
  br label %17, !dbg !154

17:
  %18 = load i32, i32* %2, align 4, !dbg !155
  %19 = icmp slt i32 %18, 16, !dbg !157
  br i1 %19, label %20, label %29, !dbg !158

20:
  %21 = load i32, i32* %2, align 4, !dbg !159
  %22 = sext i32 %21 to i64, !dbg !160
  %23 = getelementptr inbounds [16 x i32], [16 x i32]* @array, i64 0, i64 %22, !dbg !160
  %24 = load i32, i32* %23, align 4, !dbg !160
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %24), !dbg !161
  br label %26, !dbg !161

26:
  %27 = load i32, i32* %2, align 4, !dbg !162
  %28 = add nsw i32 %27, 1, !dbg !162
  store i32 %28, i32* %2, align 4, !dbg !162
  br label %17, !dbg !163

29:
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !166
  ret i32 0, !dbg !167
}

declare dso_local i32 @printf(i8*, ...) #4

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #4 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
swap(int, int):                              # @swap(int, int)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     dword ptr [rbp - 8], esi
        movsxd  rax, dword ptr [rbp - 4]
        mov     ecx, dword ptr [4*rax + array]
        mov     dword ptr [rbp - 12], ecx
        movsxd  rax, dword ptr [rbp - 8]
        mov     ecx, dword ptr [4*rax + array]
        movsxd  rax, dword ptr [rbp - 4]
        mov     dword ptr [4*rax + array], ecx
        mov     ecx, dword ptr [rbp - 12]
        movsxd  rax, dword ptr [rbp - 8]
        mov     dword ptr [4*rax + array], ecx
        pop     rbp
        ret
partition(int, int):                         # @partition(int, int)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], edi
        mov     dword ptr [rbp - 8], esi
        mov     eax, dword ptr [rbp - 4]
        mov     dword ptr [rbp - 12], eax
        movsxd  rcx, dword ptr [rbp - 12]
        mov     eax, dword ptr [4*rcx + array]
        mov     dword ptr [rbp - 16], eax
        mov     eax, dword ptr [rbp - 4]
        mov     dword ptr [rbp - 20], eax
        mov     edi, dword ptr [rbp - 12]
        mov     esi, dword ptr [rbp - 8]
        call    swap(int, int)
        mov     eax, dword ptr [rbp - 4]
        mov     dword ptr [rbp - 24], eax
.LBB1_1:                                # =>This Inner Loop Header: Depth=1
        mov     eax, dword ptr [rbp - 24]
        cmp     eax, dword ptr [rbp - 8]
        jge     .LBB1_6
        movsxd  rax, dword ptr [rbp - 24]
        mov     ecx, dword ptr [4*rax + array]
        cmp     ecx, dword ptr [rbp - 16]
        jge     .LBB1_4
        mov     edi, dword ptr [rbp - 24]
        mov     esi, dword ptr [rbp - 20]
        call    swap(int, int)
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
.LBB1_4:                                #   in Loop: Header=BB1_1 Depth=1
        jmp     .LBB1_5
.LBB1_5:                                #   in Loop: Header=BB1_1 Depth=1
        mov     eax, dword ptr [rbp - 24]
        add     eax, 1
        mov     dword ptr [rbp - 24], eax
        jmp     .LBB1_1
.LBB1_6:
        mov     edi, dword ptr [rbp - 8]
        mov     esi, dword ptr [rbp - 20]
        call    swap(int, int)
        mov     eax, dword ptr [rbp - 20]
        add     rsp, 32
        pop     rbp
        ret
quicksort(int, int):                         # @quicksort(int, int)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], edi
        mov     dword ptr [rbp - 8], esi
        mov     eax, dword ptr [rbp - 4]
        cmp     eax, dword ptr [rbp - 8]
        jl      .LBB2_2
        jmp     .LBB2_3
.LBB2_2:
        mov     edi, dword ptr [rbp - 4]
        mov     esi, dword ptr [rbp - 8]
        call    partition(int, int)
        mov     dword ptr [rbp - 12], eax
        mov     edi, dword ptr [rbp - 4]
        mov     eax, dword ptr [rbp - 12]
        sub     eax, 1
        mov     esi, eax
        call    quicksort(int, int)
        mov     eax, dword ptr [rbp - 12]
        add     eax, 1
        mov     esi, dword ptr [rbp - 8]
        mov     edi, eax
        call    quicksort(int, int)
.LBB2_3:
        add     rsp, 16
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [array], 62
        mov     dword ptr [array+4], 83
        mov     dword ptr [array+8], 4
        mov     dword ptr [array+12], 89
        mov     dword ptr [array+16], 36
        mov     dword ptr [array+20], 21
        mov     dword ptr [array+24], 74
        mov     dword ptr [array+28], 37
        mov     dword ptr [array+32], 65
        mov     dword ptr [array+36], 33
        mov     dword ptr [array+40], 96
        mov     dword ptr [array+44], 38
        mov     dword ptr [array+48], 53
        mov     dword ptr [array+52], 16
        mov     dword ptr [array+56], 74
        mov     dword ptr [array+60], 55
        mov     dword ptr [rbp - 8], 0
.LBB3_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 16
        jge     .LBB3_4
        movsxd  rax, dword ptr [rbp - 8]
        mov     esi, dword ptr [4*rax + array]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB3_1
.LBB3_4:
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        xor     edi, edi
        mov     esi, 15
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        call    quicksort(int, int)
        mov     dword ptr [rbp - 8], 0
.LBB3_5:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 16
        jge     .LBB3_8
        movsxd  rax, dword ptr [rbp - 8]
        mov     esi, dword ptr [4*rax + array]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB3_5
.LBB3_8:
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
array:
        .zero   64

.L.str:
        .asciz  ""%d ""

.L.str.1:
        .asciz  ""\n""

",-Wall
source\00177.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c""test @\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 1), !dbg !12
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 8), !dbg !13
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 64), !dbg !14
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 1), !dbg !15
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 14), !dbg !16
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 16), !dbg !17
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 64), !dbg !18
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0)), !dbg !19
  ret i32 0, !dbg !20
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     esi, 1
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 8
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 64
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 1
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 14
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 16
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 64
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 32], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 48
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

.L.str.1:
        .asciz  ""test @\n""

",-Wall
source\00178.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i8, align 1
  %3 = alloca i32, align 4
  %4 = alloca double, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8* %2, metadata !12, metadata !DIExpression()), !dbg !14
  call void @llvm.dbg.declare(metadata i32* %3, metadata !15, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata double* %4, metadata !17, metadata !DIExpression()), !dbg !19
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 1), !dbg !20
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 4), !dbg !21
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 8), !dbg !22
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 1), !dbg !23
  ret i32 0, !dbg !24
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:9:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d\n"", sizeof(a));
[0;1;32m           ~~     ^~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:10:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d\n"", sizeof(b));
[0;1;32m           ~~     ^~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:11:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d\n"", sizeof(c));
[0;1;32m           ~~     ^~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:13:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d\n"", sizeof(!a));
[0;1;32m           ~~     ^~~~~~~~~~
[0m[0;32m           %lu
[0m4 warnings generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     esi, 1
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 4
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 8
        mov     dword ptr [rbp - 32], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     esi, 1
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 40], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 48
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

Standard error:
[1m<source>:9:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d\n"", sizeof(a));
[0;1;32m           ~~     ^~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:10:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d\n"", sizeof(b));
[0;1;32m           ~~     ^~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:11:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d\n"", sizeof(c));
[0;1;32m           ~~     ^~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:13:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d\n"", sizeof(!a));
[0;1;32m           ~~     ^~~~~~~~~~
[0m[0;32m           %lu
[0m4 warnings generated.
",-Wall
source\00179.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [6 x i8] c""hello\00"", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c""%s\0A\00"", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c""gosh\00"", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c""apple\00"", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c""goere\00"", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c""zebra\00"", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c""!\00"", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c""goerg\00"", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c""grgr\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [10 x i8], align 1
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [10 x i8]* %2, metadata !12, metadata !DIExpression()), !dbg !17
  %3 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !18
  %4 = call i8* @strcpy(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #6, !dbg !19
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !20
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %5), !dbg !21
  %7 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !22
  %8 = call i8* @strncpy(i8* %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 2) #6, !dbg !23
  %9 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !24
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %9), !dbg !25
  %11 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !26
  %12 = call i32 @strcmp(i8* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0)) #7, !dbg !27
  %13 = icmp sgt i32 %12, 0, !dbg !28
  %14 = zext i1 %13 to i32, !dbg !27
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %14), !dbg !29
  %16 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !30
  %17 = call i32 @strcmp(i8* %16, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0)) #7, !dbg !31
  %18 = icmp sgt i32 %17, 0, !dbg !32
  %19 = zext i1 %18 to i32, !dbg !31
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %19), !dbg !33
  %21 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !34
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0)) #7, !dbg !35
  %23 = icmp slt i32 %22, 0, !dbg !36
  %24 = zext i1 %23 to i32, !dbg !35
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %24), !dbg !37
  %26 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !38
  %27 = call i64 @strlen(i8* %26) #7, !dbg !39
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i64 %27), !dbg !40
  %29 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !41
  %30 = call i8* @strcat(i8* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #6, !dbg !42
  %31 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !43
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %31), !dbg !44
  %33 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !45
  %34 = call i32 @strncmp(i8* %33, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 2) #7, !dbg !46
  %35 = icmp sgt i32 %34, 0, !dbg !47
  %36 = zext i1 %35 to i32, !dbg !46
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %36), !dbg !48
  %38 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !49
  %39 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i64 2) #7, !dbg !50
  %40 = icmp eq i32 %39, 0, !dbg !51
  %41 = zext i1 %40 to i32, !dbg !50
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %41), !dbg !52
  %43 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !53
  %44 = call i32 @strncmp(i8* %43, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i64 2) #7, !dbg !54
  %45 = icmp eq i32 %44, 0, !dbg !55
  %46 = zext i1 %45 to i32, !dbg !54
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %46), !dbg !56
  %48 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !57
  %49 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i64 2) #7, !dbg !58
  %50 = icmp slt i32 %49, 0, !dbg !59
  %51 = zext i1 %50 to i32, !dbg !58
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %51), !dbg !60
  %53 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !61
  %54 = call i8* @strchr(i8* %53, i32 111) #7, !dbg !62
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %54), !dbg !63
  %56 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !64
  %57 = call i8* @strrchr(i8* %56, i32 108) #7, !dbg !65
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %57), !dbg !66
  %59 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !67
  %60 = call i8* @strrchr(i8* %59, i32 120) #7, !dbg !68
  %61 = icmp eq i8* %60, null, !dbg !69
  %62 = zext i1 %61 to i32, !dbg !68
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %62), !dbg !70
  %64 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 1, !dbg !71
  call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 114, i64 4, i1 false), !dbg !72
  %65 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !73
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %65), !dbg !74
  %67 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 2, !dbg !75
  %68 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !76
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %68, i64 2, i1 false), !dbg !76
  %69 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !77
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %69), !dbg !78
  %71 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !79
  %72 = call i32 @memcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 4) #7, !dbg !80
  %73 = icmp sgt i32 %72, 0, !dbg !81
  %74 = zext i1 %73 to i32, !dbg !80
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %74), !dbg !82
  %76 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !83
  %77 = call i32 @memcmp(i8* %76, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i64 4) #7, !dbg !84
  %78 = icmp eq i32 %77, 0, !dbg !85
  %79 = zext i1 %78 to i32, !dbg !84
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %79), !dbg !86
  %81 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !87
  %82 = call i32 @memcmp(i8* %81, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i64 4) #7, !dbg !88
  %83 = icmp slt i32 %82, 0, !dbg !89
  %84 = zext i1 %83 to i32, !dbg !88
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %84), !dbg !90
  ret i32 0, !dbg !91
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i8* @strncpy(i8*, i8*, i64) #2

declare dso_local i32 @strcmp(i8*, i8*) #4

declare dso_local i64 @strlen(i8*) #4

declare dso_local i8* @strcat(i8*, i8*) #2

declare dso_local i32 @strncmp(i8*, i8*, i64) #4

declare dso_local i8* @strchr(i8*, i32) #4

declare dso_local i8* @strrchr(i8*, i32) #4

declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

declare dso_local i32 @memcmp(i8*, i8*, i64) #4

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #4 = { nounwind readonly ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

Standard error:
[1m<source>:18:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'size_t' (aka 'unsigned long') [-Wformat][0m
   printf(""%d\n"", strlen(a));
[0;1;32m           ~~     ^~~~~~~~~
[0m[0;32m           %zu
[0m1 warning generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 160
        lea     rax, [rbp - 14]
        mov     dword ptr [rbp - 4], 0
        mov     esi, offset .L.str
        mov     rdi, rax
        mov     qword ptr [rbp - 24], rax # 8-byte Spill
        call    strcpy
        movabs  rdi, offset .L.str.1
        mov     rsi, qword ptr [rbp - 24] # 8-byte Reload
        mov     qword ptr [rbp - 32], rax # 8-byte Spill
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        movabs  rsi, offset .L.str.2
        mov     edx, 2
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        call    strncpy
        lea     rsi, [rbp - 14]
        movabs  rdi, offset .L.str.1
        mov     qword ptr [rbp - 48], rax # 8-byte Spill
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        mov     esi, offset .L.str.4
        mov     dword ptr [rbp - 52], eax # 4-byte Spill
        call    strcmp
        cmp     eax, 0
        setg    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        mov     esi, offset .L.str.5
        mov     dword ptr [rbp - 56], eax # 4-byte Spill
        call    strcmp
        cmp     eax, 0
        setg    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        mov     esi, offset .L.str.6
        mov     dword ptr [rbp - 60], eax # 4-byte Spill
        call    strcmp
        cmp     eax, 0
        setl    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        mov     dword ptr [rbp - 64], eax # 4-byte Spill
        call    strlen
        movabs  rdi, offset .L.str.3
        mov     rsi, rax
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        movabs  rsi, offset .L.str.7
        mov     dword ptr [rbp - 68], eax # 4-byte Spill
        call    strcat
        lea     rsi, [rbp - 14]
        movabs  rdi, offset .L.str.1
        mov     qword ptr [rbp - 80], rax # 8-byte Spill
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        movabs  rsi, offset .L.str.4
        mov     edx, 2
        mov     dword ptr [rbp - 84], eax # 4-byte Spill
        call    strncmp
        cmp     eax, 0
        setg    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        movabs  rsi, offset .L.str.5
        mov     edx, 2
        mov     dword ptr [rbp - 88], eax # 4-byte Spill
        call    strncmp
        cmp     eax, 0
        sete    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        movabs  rsi, offset .L.str.8
        mov     edx, 2
        mov     dword ptr [rbp - 92], eax # 4-byte Spill
        call    strncmp
        cmp     eax, 0
        sete    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        movabs  rsi, offset .L.str.6
        mov     edx, 2
        mov     dword ptr [rbp - 96], eax # 4-byte Spill
        call    strncmp
        cmp     eax, 0
        setl    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        mov     esi, 111
        mov     dword ptr [rbp - 100], eax # 4-byte Spill
        call    strchr
        movabs  rdi, offset .L.str.1
        mov     rsi, rax
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        mov     esi, 108
        mov     dword ptr [rbp - 104], eax # 4-byte Spill
        call    strrchr
        movabs  rdi, offset .L.str.1
        mov     rsi, rax
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        mov     esi, 120
        mov     dword ptr [rbp - 108], eax # 4-byte Spill
        call    strrchr
        cmp     rax, 0
        sete    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        lea     rdx, [rbp - 14]
        mov     rdi, rdx
        add     rdi, 1
        mov     esi, 114
        mov     r8d, 4
        mov     qword ptr [rbp - 120], rdx # 8-byte Spill
        mov     rdx, r8
        mov     dword ptr [rbp - 124], eax # 4-byte Spill
        call    memset
        movabs  rdi, offset .L.str.1
        mov     rsi, qword ptr [rbp - 120] # 8-byte Reload
        mov     al, 0
        call    printf
        lea     rsi, [rbp - 14]
        mov     r9w, word ptr [rbp - 14]
        mov     word ptr [rbp - 12], r9w
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 128], eax # 4-byte Spill
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        mov     esi, offset .L.str.4
        mov     edx, 4
        mov     dword ptr [rbp - 132], eax # 4-byte Spill
        call    memcmp
        cmp     eax, 0
        setg    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        lea     rdx, [rbp - 14]
        mov     esi, dword ptr [rdx]
        sub     esi, 1919382119
        setne   cl
        movzx   r10d, cl
        cmp     r10d, 0
        sete    cl
        and     cl, 1
        movzx   r10d, cl
        movabs  rdi, offset .L.str.3
        mov     dword ptr [rbp - 136], esi # 4-byte Spill
        mov     esi, r10d
        mov     dword ptr [rbp - 140], eax # 4-byte Spill
        mov     al, 0
        call    printf
        lea     rdi, [rbp - 14]
        mov     esi, offset .L.str.6
        mov     edx, 4
        mov     dword ptr [rbp - 144], eax # 4-byte Spill
        call    memcmp
        cmp     eax, 0
        setl    cl
        and     cl, 1
        movzx   esi, cl
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
        xor     esi, esi
        mov     dword ptr [rbp - 148], eax # 4-byte Spill
        mov     eax, esi
        add     rsp, 160
        pop     rbp
        ret
.L.str:
        .asciz  ""hello""

.L.str.1:
        .asciz  ""%s\n""

.L.str.2:
        .asciz  ""gosh""

.L.str.3:
        .asciz  ""%d\n""

.L.str.4:
        .asciz  ""apple""

.L.str.5:
        .asciz  ""goere""

.L.str.6:
        .asciz  ""zebra""

.L.str.7:
        .asciz  ""!""

.L.str.8:
        .asciz  ""goerg""

        .asciz  ""grgr""

Standard error:
[1m<source>:18:19: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'size_t' (aka 'unsigned long') [-Wformat][0m
   printf(""%d\n"", strlen(a));
[0;1;32m           ~~     ^~~~~~~~~
[0m[0;32m           %zu
[0m1 warning generated.
",-Wall
source\00180.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [7 x i8] c""abcdef\00"", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c""%s\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [10 x i8], align 1
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [10 x i8]* %2, metadata !12, metadata !DIExpression()), !dbg !17
  %3 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0, !dbg !18
  %4 = call i8* @strcpy(i8* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)) #4, !dbg !19
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 1, !dbg !20
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %5), !dbg !21
  ret i32 0, !dbg !22
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local i32 @printf(i8*, ...) #3

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #4 = { nounwind }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        lea     rax, [rbp - 14]
        mov     dword ptr [rbp - 4], 0
        mov     esi, offset .L.str
        mov     rdi, rax
        mov     qword ptr [rbp - 24], rax # 8-byte Spill
        call    strcpy
        mov     rcx, qword ptr [rbp - 24] # 8-byte Reload
        add     rcx, 1
        movabs  rdi, offset .L.str.1
        mov     rsi, rcx
        mov     qword ptr [rbp - 32], rax # 8-byte Spill
        mov     al, 0
        call    printf
        xor     edx, edx
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        mov     eax, edx
        add     rsp, 48
        pop     rbp
        ret
.L.str:
        .asciz  ""abcdef""

.L.str.1:
        .asciz  ""%s\n""

",-Wall
source\00181.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@A = dso_local global [4 x i32] zeroinitializer, align 16, !dbg !0
@B = dso_local global [4 x i32] zeroinitializer, align 16, !dbg !6
@C = dso_local global [4 x i32] zeroinitializer, align 16, !dbg !13
@.str = private unnamed_addr constant [4 x i8] c""A: \00"", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"" %d \00"", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c""\0A\00"", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c""B: \00"", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c""C: \00"", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c""------------------------------------------\0A\00"", align 1
@.str.6 = private unnamed_addr constant [51 x i8] c""Solution of Tower of Hanoi Problem with %d Disks\0A\0A\00"", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c""Starting state:\0A\00"", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c""\0A\0ASubsequent states:\0A\0A\00"", align 1

define dso_local void @PrintAll()() #0 !dbg !264 {
  %1 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %1, metadata !265, metadata !DIExpression()), !dbg !266
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0)), !dbg !267
  store i32 0, i32* %1, align 4, !dbg !268
  br label %3, !dbg !270

3:
  %4 = load i32, i32* %1, align 4, !dbg !271
  %5 = icmp slt i32 %4, 4, !dbg !273
  br i1 %5, label %6, label %15, !dbg !274

6:
  %7 = load i32, i32* %1, align 4, !dbg !275
  %8 = sext i32 %7 to i64, !dbg !276
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* @A, i64 0, i64 %8, !dbg !276
  %10 = load i32, i32* %9, align 4, !dbg !276
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %10), !dbg !277
  br label %12, !dbg !277

12:
  %13 = load i32, i32* %1, align 4, !dbg !278
  %14 = add nsw i32 %13, 1, !dbg !278
  store i32 %14, i32* %1, align 4, !dbg !278
  br label %3, !dbg !279

15:
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !282
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0)), !dbg !283
  store i32 0, i32* %1, align 4, !dbg !284
  br label %18, !dbg !286

18:
  %19 = load i32, i32* %1, align 4, !dbg !287
  %20 = icmp slt i32 %19, 4, !dbg !289
  br i1 %20, label %21, label %30, !dbg !290

21:
  %22 = load i32, i32* %1, align 4, !dbg !291
  %23 = sext i32 %22 to i64, !dbg !292
  %24 = getelementptr inbounds [4 x i32], [4 x i32]* @B, i64 0, i64 %23, !dbg !292
  %25 = load i32, i32* %24, align 4, !dbg !292
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %25), !dbg !293
  br label %27, !dbg !293

27:
  %28 = load i32, i32* %1, align 4, !dbg !294
  %29 = add nsw i32 %28, 1, !dbg !294
  store i32 %29, i32* %1, align 4, !dbg !294
  br label %18, !dbg !295

30:
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !298
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0)), !dbg !299
  store i32 0, i32* %1, align 4, !dbg !300
  br label %33, !dbg !302

33:
  %34 = load i32, i32* %1, align 4, !dbg !303
  %35 = icmp slt i32 %34, 4, !dbg !305
  br i1 %35, label %36, label %45, !dbg !306

36:
  %37 = load i32, i32* %1, align 4, !dbg !307
  %38 = sext i32 %37 to i64, !dbg !308
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* @C, i64 0, i64 %38, !dbg !308
  %40 = load i32, i32* %39, align 4, !dbg !308
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %40), !dbg !309
  br label %42, !dbg !309

42:
  %43 = load i32, i32* %1, align 4, !dbg !310
  %44 = add nsw i32 %43, 1, !dbg !310
  store i32 %44, i32* %1, align 4, !dbg !310
  br label %33, !dbg !311

45:
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !314
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0)), !dbg !315
  ret void, !dbg !316
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

define dso_local i32 @Move(int*, int*)(i32* %0, i32* %1) #0 !dbg !317 {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  call void @llvm.dbg.declare(metadata i32** %3, metadata !321, metadata !DIExpression()), !dbg !322
  store i32* %1, i32** %4, align 8
  call void @llvm.dbg.declare(metadata i32** %4, metadata !323, metadata !DIExpression()), !dbg !324
  call void @llvm.dbg.declare(metadata i32* %5, metadata !325, metadata !DIExpression()), !dbg !326
  store i32 0, i32* %5, align 4, !dbg !326
  call void @llvm.dbg.declare(metadata i32* %6, metadata !327, metadata !DIExpression()), !dbg !328
  store i32 0, i32* %6, align 4, !dbg !328
  br label %7, !dbg !329

7:
  %8 = load i32, i32* %5, align 4, !dbg !330
  %9 = icmp slt i32 %8, 4, !dbg !331
  br i1 %9, label %10, label %17, !dbg !332

10:
  %11 = load i32*, i32** %3, align 8, !dbg !333
  %12 = load i32, i32* %5, align 4, !dbg !334
  %13 = sext i32 %12 to i64, !dbg !333
  %14 = getelementptr inbounds i32, i32* %11, i64 %13, !dbg !333
  %15 = load i32, i32* %14, align 4, !dbg !333
  %16 = icmp eq i32 %15, 0, !dbg !335
  br label %17

17:
  %18 = phi i1 [ false, %7 ], [ %16, %10 ], !dbg !336
  br i1 %18, label %19, label %22, !dbg !329

19:
  %20 = load i32, i32* %5, align 4, !dbg !337
  %21 = add nsw i32 %20, 1, !dbg !337
  store i32 %21, i32* %5, align 4, !dbg !337
  br label %7, !dbg !329

22:
  br label %23, !dbg !339

23:
  %24 = load i32, i32* %6, align 4, !dbg !340
  %25 = icmp slt i32 %24, 4, !dbg !341
  br i1 %25, label %26, label %33, !dbg !342

26:
  %27 = load i32*, i32** %4, align 8, !dbg !343
  %28 = load i32, i32* %6, align 4, !dbg !344
  %29 = sext i32 %28 to i64, !dbg !343
  %30 = getelementptr inbounds i32, i32* %27, i64 %29, !dbg !343
  %31 = load i32, i32* %30, align 4, !dbg !343
  %32 = icmp eq i32 %31, 0, !dbg !345
  br label %33

33:
  %34 = phi i1 [ false, %23 ], [ %32, %26 ], !dbg !336
  br i1 %34, label %35, label %38, !dbg !339

35:
  %36 = load i32, i32* %6, align 4, !dbg !346
  %37 = add nsw i32 %36, 1, !dbg !346
  store i32 %37, i32* %6, align 4, !dbg !346
  br label %23, !dbg !339

38:
  %39 = load i32*, i32** %3, align 8, !dbg !348
  %40 = load i32, i32* %5, align 4, !dbg !349
  %41 = sext i32 %40 to i64, !dbg !348
  %42 = getelementptr inbounds i32, i32* %39, i64 %41, !dbg !348
  %43 = load i32, i32* %42, align 4, !dbg !348
  %44 = load i32*, i32** %4, align 8, !dbg !350
  %45 = load i32, i32* %6, align 4, !dbg !351
  %46 = sub nsw i32 %45, 1, !dbg !352
  %47 = sext i32 %46 to i64, !dbg !350
  %48 = getelementptr inbounds i32, i32* %44, i64 %47, !dbg !350
  store i32 %43, i32* %48, align 4, !dbg !353
  %49 = load i32*, i32** %3, align 8, !dbg !354
  %50 = load i32, i32* %5, align 4, !dbg !355
  %51 = sext i32 %50 to i64, !dbg !354
  %52 = getelementptr inbounds i32, i32* %49, i64 %51, !dbg !354
  store i32 0, i32* %52, align 4, !dbg !356
  call void @PrintAll()(), !dbg !357
  %53 = load i32*, i32** %4, align 8, !dbg !358
  %54 = load i32, i32* %6, align 4, !dbg !359
  %55 = sub nsw i32 %54, 1, !dbg !360
  %56 = sext i32 %55 to i64, !dbg !358
  %57 = getelementptr inbounds i32, i32* %53, i64 %56, !dbg !358
  %58 = load i32, i32* %57, align 4, !dbg !358
  ret i32 %58, !dbg !361
}

define dso_local void @Hanoi(int, int*, int*, int*)(i32 %0, i32* %1, i32* %2, i32* %3) #0 !dbg !362 {
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !365, metadata !DIExpression()), !dbg !366
  store i32* %1, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !367, metadata !DIExpression()), !dbg !368
  store i32* %2, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !369, metadata !DIExpression()), !dbg !370
  store i32* %3, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !371, metadata !DIExpression()), !dbg !372
  call void @llvm.dbg.declare(metadata i32* %9, metadata !373, metadata !DIExpression()), !dbg !374
  %10 = load i32, i32* %5, align 4, !dbg !375
  %11 = icmp eq i32 %10, 1, !dbg !377
  br i1 %11, label %12, label %16, !dbg !378

12:
  %13 = load i32*, i32** %6, align 8, !dbg !379
  %14 = load i32*, i32** %7, align 8, !dbg !381
  %15 = call i32 @Move(int*, int*)(i32* %13, i32* %14), !dbg !382
  br label %30, !dbg !383

16:
  %17 = load i32, i32* %5, align 4, !dbg !384
  %18 = sub nsw i32 %17, 1, !dbg !385
  %19 = load i32*, i32** %6, align 8, !dbg !386
  %20 = load i32*, i32** %8, align 8, !dbg !387
  %21 = load i32*, i32** %7, align 8, !dbg !388
  call void @Hanoi(int, int*, int*, int*)(i32 %18, i32* %19, i32* %20, i32* %21), !dbg !389
  %22 = load i32*, i32** %6, align 8, !dbg !390
  %23 = load i32*, i32** %7, align 8, !dbg !391
  %24 = call i32 @Move(int*, int*)(i32* %22, i32* %23), !dbg !392
  %25 = load i32, i32* %5, align 4, !dbg !393
  %26 = sub nsw i32 %25, 1, !dbg !394
  %27 = load i32*, i32** %8, align 8, !dbg !395
  %28 = load i32*, i32** %7, align 8, !dbg !396
  %29 = load i32*, i32** %6, align 8, !dbg !397
  call void @Hanoi(int, int*, int*, int*)(i32 %26, i32* %27, i32* %28, i32* %29), !dbg !398
  br label %30, !dbg !399

30:
  ret void, !dbg !400
}

define dso_local i32 @main() #3 !dbg !401 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !402, metadata !DIExpression()), !dbg !403
  store i32 0, i32* %2, align 4, !dbg !404
  br label %3, !dbg !406

3:
  %4 = load i32, i32* %2, align 4, !dbg !407
  %5 = icmp slt i32 %4, 4, !dbg !409
  br i1 %5, label %6, label %15, !dbg !410

6:
  %7 = load i32, i32* %2, align 4, !dbg !411
  %8 = add nsw i32 %7, 1, !dbg !412
  %9 = load i32, i32* %2, align 4, !dbg !413
  %10 = sext i32 %9 to i64, !dbg !414
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* @A, i64 0, i64 %10, !dbg !414
  store i32 %8, i32* %11, align 4, !dbg !415
  br label %12, !dbg !414

12:
  %13 = load i32, i32* %2, align 4, !dbg !416
  %14 = add nsw i32 %13, 1, !dbg !416
  store i32 %14, i32* %2, align 4, !dbg !416
  br label %3, !dbg !417

15:
  store i32 0, i32* %2, align 4, !dbg !420
  br label %16, !dbg !422

16:
  %17 = load i32, i32* %2, align 4, !dbg !423
  %18 = icmp slt i32 %17, 4, !dbg !425
  br i1 %18, label %19, label %26, !dbg !426

19:
  %20 = load i32, i32* %2, align 4, !dbg !427
  %21 = sext i32 %20 to i64, !dbg !428
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* @B, i64 0, i64 %21, !dbg !428
  store i32 0, i32* %22, align 4, !dbg !429
  br label %23, !dbg !428

23:
  %24 = load i32, i32* %2, align 4, !dbg !430
  %25 = add nsw i32 %24, 1, !dbg !430
  store i32 %25, i32* %2, align 4, !dbg !430
  br label %16, !dbg !431

26:
  store i32 0, i32* %2, align 4, !dbg !434
  br label %27, !dbg !436

27:
  %28 = load i32, i32* %2, align 4, !dbg !437
  %29 = icmp slt i32 %28, 4, !dbg !439
  br i1 %29, label %30, label %37, !dbg !440

30:
  %31 = load i32, i32* %2, align 4, !dbg !441
  %32 = sext i32 %31 to i64, !dbg !442
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* @C, i64 0, i64 %32, !dbg !442
  store i32 0, i32* %33, align 4, !dbg !443
  br label %34, !dbg !442

34:
  %35 = load i32, i32* %2, align 4, !dbg !444
  %36 = add nsw i32 %35, 1, !dbg !444
  store i32 %36, i32* %2, align 4, !dbg !444
  br label %27, !dbg !445

37:
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.6, i64 0, i64 0), i32 4), !dbg !448
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0)), !dbg !449
  call void @PrintAll()(), !dbg !450
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0)), !dbg !451
  call void @Hanoi(int, int*, int*, int*)(i32 4, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @A, i64 0, i64 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @B, i64 0, i64 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @C, i64 0, i64 0)), !dbg !452
  ret i32 0, !dbg !453
}

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
PrintAll():                           # @PrintAll()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 4], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 4], 4
        jge     .LBB0_4
        movsxd  rax, dword ptr [rbp - 4]
        mov     esi, dword ptr [4*rax + A]
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 4]
        add     eax, 1
        mov     dword ptr [rbp - 4], eax
        jmp     .LBB0_1
.LBB0_4:
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.3
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 4], 0
.LBB0_5:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 4], 4
        jge     .LBB0_8
        movsxd  rax, dword ptr [rbp - 4]
        mov     esi, dword ptr [4*rax + B]
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 4]
        add     eax, 1
        mov     dword ptr [rbp - 4], eax
        jmp     .LBB0_5
.LBB0_8:
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.4
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 4], 0
.LBB0_9:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 4], 4
        jge     .LBB0_12
        movsxd  rax, dword ptr [rbp - 4]
        mov     esi, dword ptr [4*rax + C]
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 4]
        add     eax, 1
        mov     dword ptr [rbp - 4], eax
        jmp     .LBB0_9
.LBB0_12:
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.5
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        add     rsp, 16
        pop     rbp
        ret
Move(int*, int*):                            # @Move(int*, int*)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], 0
        mov     dword ptr [rbp - 24], 0
.LBB1_1:                                # =>This Inner Loop Header: Depth=1
        xor     eax, eax
        cmp     dword ptr [rbp - 20], 4
        mov     byte ptr [rbp - 25], al # 1-byte Spill
        jge     .LBB1_3
        mov     rax, qword ptr [rbp - 8]
        movsxd  rcx, dword ptr [rbp - 20]
        cmp     dword ptr [rax + 4*rcx], 0
        sete    dl
        mov     byte ptr [rbp - 25], dl # 1-byte Spill
.LBB1_3:                                #   in Loop: Header=BB1_1 Depth=1
        mov     al, byte ptr [rbp - 25] # 1-byte Reload
        test    al, 1
        jne     .LBB1_4
        jmp     .LBB1_5
.LBB1_4:                                #   in Loop: Header=BB1_1 Depth=1
        mov     eax, dword ptr [rbp - 20]
        add     eax, 1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB1_1
.LBB1_5:
        jmp     .LBB1_6
.LBB1_6:                                # =>This Inner Loop Header: Depth=1
        xor     eax, eax
        cmp     dword ptr [rbp - 24], 4
        mov     byte ptr [rbp - 26], al # 1-byte Spill
        jge     .LBB1_8
        mov     rax, qword ptr [rbp - 16]
        movsxd  rcx, dword ptr [rbp - 24]
        cmp     dword ptr [rax + 4*rcx], 0
        sete    dl
        mov     byte ptr [rbp - 26], dl # 1-byte Spill
.LBB1_8:                                #   in Loop: Header=BB1_6 Depth=1
        mov     al, byte ptr [rbp - 26] # 1-byte Reload
        test    al, 1
        jne     .LBB1_9
        jmp     .LBB1_10
.LBB1_9:                                #   in Loop: Header=BB1_6 Depth=1
        mov     eax, dword ptr [rbp - 24]
        add     eax, 1
        mov     dword ptr [rbp - 24], eax
        jmp     .LBB1_6
.LBB1_10:
        mov     rax, qword ptr [rbp - 8]
        movsxd  rcx, dword ptr [rbp - 20]
        mov     edx, dword ptr [rax + 4*rcx]
        mov     rax, qword ptr [rbp - 16]
        mov     esi, dword ptr [rbp - 24]
        sub     esi, 1
        movsxd  rcx, esi
        mov     dword ptr [rax + 4*rcx], edx
        mov     rax, qword ptr [rbp - 8]
        movsxd  rcx, dword ptr [rbp - 20]
        mov     dword ptr [rax + 4*rcx], 0
        call    PrintAll()
        mov     rax, qword ptr [rbp - 16]
        mov     edx, dword ptr [rbp - 24]
        sub     edx, 1
        movsxd  rcx, edx
        mov     eax, dword ptr [rax + 4*rcx]
        add     rsp, 32
        pop     rbp
        ret
Hanoi(int, int*, int*, int*):                        # @Hanoi(int, int*, int*, int*)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     dword ptr [rbp - 4], edi
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        mov     qword ptr [rbp - 32], rcx
        cmp     dword ptr [rbp - 4], 1
        jne     .LBB2_2
        mov     rdi, qword ptr [rbp - 16]
        mov     rsi, qword ptr [rbp - 24]
        call    Move(int*, int*)
        jmp     .LBB2_3
.LBB2_2:
        mov     eax, dword ptr [rbp - 4]
        sub     eax, 1
        mov     rsi, qword ptr [rbp - 16]
        mov     rdx, qword ptr [rbp - 32]
        mov     rcx, qword ptr [rbp - 24]
        mov     edi, eax
        call    Hanoi(int, int*, int*, int*)
        mov     rdi, qword ptr [rbp - 16]
        mov     rsi, qword ptr [rbp - 24]
        call    Move(int*, int*)
        mov     r8d, dword ptr [rbp - 4]
        sub     r8d, 1
        mov     rsi, qword ptr [rbp - 32]
        mov     rdx, qword ptr [rbp - 24]
        mov     rcx, qword ptr [rbp - 16]
        mov     edi, r8d
        mov     dword ptr [rbp - 40], eax # 4-byte Spill
        call    Hanoi(int, int*, int*, int*)
.LBB2_3:
        add     rsp, 48
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
.LBB3_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 4
        jge     .LBB3_4
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        movsxd  rcx, dword ptr [rbp - 8]
        mov     dword ptr [4*rcx + A], eax
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB3_1
.LBB3_4:
        mov     dword ptr [rbp - 8], 0
.LBB3_5:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 4
        jge     .LBB3_8
        movsxd  rax, dword ptr [rbp - 8]
        mov     dword ptr [4*rax + B], 0
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB3_5
.LBB3_8:
        mov     dword ptr [rbp - 8], 0
.LBB3_9:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 4
        jge     .LBB3_12
        movsxd  rax, dword ptr [rbp - 8]
        mov     dword ptr [4*rax + C], 0
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB3_9
.LBB3_12:
        movabs  rdi, offset .L.str.6
        mov     esi, 4
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.7
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        call    PrintAll()
        movabs  rdi, offset .L.str.8
        mov     al, 0
        call    printf
        mov     edi, 4
        movabs  rsi, offset A
        movabs  rdx, offset B
        movabs  rcx, offset C
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        call    Hanoi(int, int*, int*, int*)
        xor     eax, eax
        add     rsp, 32
        pop     rbp
        ret
A:
        .zero   16

B:
        .zero   16

C:
        .zero   16

.L.str:
        .asciz  ""A: ""

.L.str.1:
        .asciz  "" %d ""

.L.str.2:
        .asciz  ""\n""

.L.str.3:
        .asciz  ""B: ""

.L.str.4:
        .asciz  ""C: ""

.L.str.5:
        .asciz  ""------------------------------------------\n""

.L.str.6:
        .asciz  ""Solution of Tower of Hanoi Problem with %d Disks\n\n""

.L.str.7:
        .asciz  ""Starting state:\n""

.L.str.8:
        .asciz  ""\n\nSubsequent states:\n\n""

Standard error:
[1m<source>:88:8: [0m[0;1;35mwarning: [0m[1munused variable 'i' [-Wunused-variable][0m
   int i;
[0;1;32m       ^
[0m1 warning generated.
",-Wall
source\00182.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@print_led(unsigned long, char*)::d = internal global [32 x i32] zeroinitializer, align 16, !dbg !0
@.str = private unnamed_addr constant [4 x i8] c""%s\0A\00"", align 1

define dso_local void @topline(int, char*)(i32 %0, i8* %1) #0 !dbg !263 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !266, metadata !DIExpression()), !dbg !267
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !268, metadata !DIExpression()), !dbg !269
  %5 = load i8*, i8** %4, align 8, !dbg !270
  %6 = getelementptr inbounds i8, i8* %5, i32 1, !dbg !270
  store i8* %6, i8** %4, align 8, !dbg !270
  store i8 32, i8* %5, align 1, !dbg !271
  %7 = load i32, i32* %3, align 4, !dbg !272
  switch i32 %7, label %11 [
    i32 0, label %8
    i32 2, label %8
    i32 3, label %8
    i32 5, label %8
    i32 7, label %8
    i32 8, label %8
    i32 9, label %8
  ], !dbg !273

8:
  %9 = load i8*, i8** %4, align 8, !dbg !274
  %10 = getelementptr inbounds i8, i8* %9, i32 1, !dbg !274
  store i8* %10, i8** %4, align 8, !dbg !274
  store i8 95, i8* %9, align 1, !dbg !276
  br label %14, !dbg !277

11:
  %12 = load i8*, i8** %4, align 8, !dbg !278
  %13 = getelementptr inbounds i8, i8* %12, i32 1, !dbg !278
  store i8* %13, i8** %4, align 8, !dbg !278
  store i8 32, i8* %12, align 1, !dbg !279
  br label %14, !dbg !280

14:
  %15 = load i8*, i8** %4, align 8, !dbg !281
  %16 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !281
  store i8* %16, i8** %4, align 8, !dbg !281
  store i8 32, i8* %15, align 1, !dbg !282
  ret void, !dbg !283
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define dso_local void @midline(int, char*)(i32 %0, i8* %1) #0 !dbg !284 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !285, metadata !DIExpression()), !dbg !286
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !287, metadata !DIExpression()), !dbg !288
  %5 = load i32, i32* %3, align 4, !dbg !289
  switch i32 %5, label %9 [
    i32 0, label %6
    i32 4, label %6
    i32 5, label %6
    i32 6, label %6
    i32 8, label %6
    i32 9, label %6
  ], !dbg !290

6:
  %7 = load i8*, i8** %4, align 8, !dbg !291
  %8 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !291
  store i8* %8, i8** %4, align 8, !dbg !291
  store i8 124, i8* %7, align 1, !dbg !293
  br label %12, !dbg !294

9:
  %10 = load i8*, i8** %4, align 8, !dbg !295
  %11 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !295
  store i8* %11, i8** %4, align 8, !dbg !295
  store i8 32, i8* %10, align 1, !dbg !296
  br label %12, !dbg !297

12:
  %13 = load i32, i32* %3, align 4, !dbg !298
  switch i32 %13, label %17 [
    i32 2, label %14
    i32 3, label %14
    i32 4, label %14
    i32 5, label %14
    i32 6, label %14
    i32 8, label %14
    i32 9, label %14
  ], !dbg !299

14:
  %15 = load i8*, i8** %4, align 8, !dbg !300
  %16 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !300
  store i8* %16, i8** %4, align 8, !dbg !300
  store i8 95, i8* %15, align 1, !dbg !302
  br label %20, !dbg !303

17:
  %18 = load i8*, i8** %4, align 8, !dbg !304
  %19 = getelementptr inbounds i8, i8* %18, i32 1, !dbg !304
  store i8* %19, i8** %4, align 8, !dbg !304
  store i8 32, i8* %18, align 1, !dbg !305
  br label %20, !dbg !306

20:
  %21 = load i32, i32* %3, align 4, !dbg !307
  switch i32 %21, label %25 [
    i32 0, label %22
    i32 1, label %22
    i32 2, label %22
    i32 3, label %22
    i32 4, label %22
    i32 7, label %22
    i32 8, label %22
    i32 9, label %22
  ], !dbg !308

22:
  %23 = load i8*, i8** %4, align 8, !dbg !309
  %24 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !309
  store i8* %24, i8** %4, align 8, !dbg !309
  store i8 124, i8* %23, align 1, !dbg !311
  br label %28, !dbg !312

25:
  %26 = load i8*, i8** %4, align 8, !dbg !313
  %27 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !313
  store i8* %27, i8** %4, align 8, !dbg !313
  store i8 32, i8* %26, align 1, !dbg !314
  br label %28, !dbg !315

28:
  ret void, !dbg !316
}

define dso_local void @botline(int, char*)(i32 %0, i8* %1) #0 !dbg !317 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !318, metadata !DIExpression()), !dbg !319
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !320, metadata !DIExpression()), !dbg !321
  %5 = load i32, i32* %3, align 4, !dbg !322
  switch i32 %5, label %9 [
    i32 0, label %6
    i32 2, label %6
    i32 6, label %6
    i32 8, label %6
  ], !dbg !323

6:
  %7 = load i8*, i8** %4, align 8, !dbg !324
  %8 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !324
  store i8* %8, i8** %4, align 8, !dbg !324
  store i8 124, i8* %7, align 1, !dbg !326
  br label %12, !dbg !327

9:
  %10 = load i8*, i8** %4, align 8, !dbg !328
  %11 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !328
  store i8* %11, i8** %4, align 8, !dbg !328
  store i8 32, i8* %10, align 1, !dbg !329
  br label %12, !dbg !330

12:
  %13 = load i32, i32* %3, align 4, !dbg !331
  switch i32 %13, label %17 [
    i32 0, label %14
    i32 2, label %14
    i32 3, label %14
    i32 5, label %14
    i32 6, label %14
    i32 8, label %14
  ], !dbg !332

14:
  %15 = load i8*, i8** %4, align 8, !dbg !333
  %16 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !333
  store i8* %16, i8** %4, align 8, !dbg !333
  store i8 95, i8* %15, align 1, !dbg !335
  br label %20, !dbg !336

17:
  %18 = load i8*, i8** %4, align 8, !dbg !337
  %19 = getelementptr inbounds i8, i8* %18, i32 1, !dbg !337
  store i8* %19, i8** %4, align 8, !dbg !337
  store i8 32, i8* %18, align 1, !dbg !338
  br label %20, !dbg !339

20:
  %21 = load i32, i32* %3, align 4, !dbg !340
  switch i32 %21, label %25 [
    i32 0, label %22
    i32 1, label %22
    i32 3, label %22
    i32 4, label %22
    i32 5, label %22
    i32 6, label %22
    i32 7, label %22
    i32 8, label %22
    i32 9, label %22
  ], !dbg !341

22:
  %23 = load i8*, i8** %4, align 8, !dbg !342
  %24 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !342
  store i8* %24, i8** %4, align 8, !dbg !342
  store i8 124, i8* %23, align 1, !dbg !344
  br label %28, !dbg !345

25:
  %26 = load i8*, i8** %4, align 8, !dbg !346
  %27 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !346
  store i8* %27, i8** %4, align 8, !dbg !346
  store i8 32, i8* %26, align 1, !dbg !347
  br label %28, !dbg !348

28:
  ret void, !dbg !349
}

define dso_local void @print_led(unsigned long, char*)(i64 %0, i8* %1) #0 !dbg !2 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i64 %0, i64* %3, align 8
  call void @llvm.dbg.declare(metadata i64* %3, metadata !350, metadata !DIExpression()), !dbg !351
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !352, metadata !DIExpression()), !dbg !353
  call void @llvm.dbg.declare(metadata i32* %5, metadata !354, metadata !DIExpression()), !dbg !355
  store i32 0, i32* %5, align 4, !dbg !355
  call void @llvm.dbg.declare(metadata i32* %6, metadata !356, metadata !DIExpression()), !dbg !357
  %7 = load i64, i64* %3, align 8, !dbg !358
  %8 = icmp eq i64 %7, 0, !dbg !359
  %9 = zext i1 %8 to i64, !dbg !358
  %10 = select i1 %8, i32 1, i32 0, !dbg !358
  store i32 %10, i32* %6, align 4, !dbg !360
  br label %11, !dbg !361

11:
  %12 = load i64, i64* %3, align 8, !dbg !362
  %13 = icmp ne i64 %12, 0, !dbg !362
  br i1 %13, label %14, label %28, !dbg !361

14:
  %15 = load i64, i64* %3, align 8, !dbg !363
  %16 = urem i64 %15, 10, !dbg !365
  %17 = trunc i64 %16 to i32, !dbg !366
  %18 = load i32, i32* %6, align 4, !dbg !367
  %19 = add nsw i32 %18, 1, !dbg !367
  store i32 %19, i32* %6, align 4, !dbg !367
  %20 = sext i32 %18 to i64, !dbg !368
  %21 = getelementptr inbounds [32 x i32], [32 x i32]* @print_led(unsigned long, char*)::d, i64 0, i64 %20, !dbg !368
  store i32 %17, i32* %21, align 4, !dbg !369
  %22 = load i32, i32* %6, align 4, !dbg !370
  %23 = icmp sge i32 %22, 32, !dbg !372
  br i1 %23, label %24, label %25, !dbg !373

24:
  br label %28, !dbg !374

25:
  %26 = load i64, i64* %3, align 8, !dbg !375
  %27 = udiv i64 %26, 10, !dbg !376
  store i64 %27, i64* %3, align 8, !dbg !377
  br label %11, !dbg !361

28:
  %29 = load i32, i32* %6, align 4, !dbg !380
  %30 = sub nsw i32 %29, 1, !dbg !382
  store i32 %30, i32* %5, align 4, !dbg !383
  br label %31, !dbg !384

31:
  %32 = load i32, i32* %5, align 4, !dbg !385
  %33 = icmp sge i32 %32, 0, !dbg !387
  br i1 %33, label %34, label %47, !dbg !388

34:
  %35 = load i32, i32* %5, align 4, !dbg !389
  %36 = sext i32 %35 to i64, !dbg !391
  %37 = getelementptr inbounds [32 x i32], [32 x i32]* @print_led(unsigned long, char*)::d, i64 0, i64 %36, !dbg !391
  %38 = load i32, i32* %37, align 4, !dbg !391
  %39 = load i8*, i8** %4, align 8, !dbg !392
  call void @topline(int, char*)(i32 %38, i8* %39), !dbg !393
  %40 = load i8*, i8** %4, align 8, !dbg !394
  %41 = getelementptr inbounds i8, i8* %40, i64 3, !dbg !394
  store i8* %41, i8** %4, align 8, !dbg !394
  %42 = load i8*, i8** %4, align 8, !dbg !395
  %43 = getelementptr inbounds i8, i8* %42, i32 1, !dbg !395
  store i8* %43, i8** %4, align 8, !dbg !395
  store i8 32, i8* %42, align 1, !dbg !396
  br label %44, !dbg !397

44:
  %45 = load i32, i32* %5, align 4, !dbg !398
  %46 = add nsw i32 %45, -1, !dbg !398
  store i32 %46, i32* %5, align 4, !dbg !398
  br label %31, !dbg !399

47:
  %48 = load i8*, i8** %4, align 8, !dbg !402
  %49 = getelementptr inbounds i8, i8* %48, i32 1, !dbg !402
  store i8* %49, i8** %4, align 8, !dbg !402
  store i8 10, i8* %48, align 1, !dbg !403
  %50 = load i32, i32* %6, align 4, !dbg !404
  %51 = sub nsw i32 %50, 1, !dbg !406
  store i32 %51, i32* %5, align 4, !dbg !407
  br label %52, !dbg !408

52:
  %53 = load i32, i32* %5, align 4, !dbg !409
  %54 = icmp sge i32 %53, 0, !dbg !411
  br i1 %54, label %55, label %68, !dbg !412

55:
  %56 = load i32, i32* %5, align 4, !dbg !413
  %57 = sext i32 %56 to i64, !dbg !415
  %58 = getelementptr inbounds [32 x i32], [32 x i32]* @print_led(unsigned long, char*)::d, i64 0, i64 %57, !dbg !415
  %59 = load i32, i32* %58, align 4, !dbg !415
  %60 = load i8*, i8** %4, align 8, !dbg !416
  call void @midline(int, char*)(i32 %59, i8* %60), !dbg !417
  %61 = load i8*, i8** %4, align 8, !dbg !418
  %62 = getelementptr inbounds i8, i8* %61, i64 3, !dbg !418
  store i8* %62, i8** %4, align 8, !dbg !418
  %63 = load i8*, i8** %4, align 8, !dbg !419
  %64 = getelementptr inbounds i8, i8* %63, i32 1, !dbg !419
  store i8* %64, i8** %4, align 8, !dbg !419
  store i8 32, i8* %63, align 1, !dbg !420
  br label %65, !dbg !421

65:
  %66 = load i32, i32* %5, align 4, !dbg !422
  %67 = add nsw i32 %66, -1, !dbg !422
  store i32 %67, i32* %5, align 4, !dbg !422
  br label %52, !dbg !423

68:
  %69 = load i8*, i8** %4, align 8, !dbg !426
  %70 = getelementptr inbounds i8, i8* %69, i32 1, !dbg !426
  store i8* %70, i8** %4, align 8, !dbg !426
  store i8 10, i8* %69, align 1, !dbg !427
  %71 = load i32, i32* %6, align 4, !dbg !428
  %72 = sub nsw i32 %71, 1, !dbg !430
  store i32 %72, i32* %5, align 4, !dbg !431
  br label %73, !dbg !432

73:
  %74 = load i32, i32* %5, align 4, !dbg !433
  %75 = icmp sge i32 %74, 0, !dbg !435
  br i1 %75, label %76, label %89, !dbg !436

76:
  %77 = load i32, i32* %5, align 4, !dbg !437
  %78 = sext i32 %77 to i64, !dbg !439
  %79 = getelementptr inbounds [32 x i32], [32 x i32]* @print_led(unsigned long, char*)::d, i64 0, i64 %78, !dbg !439
  %80 = load i32, i32* %79, align 4, !dbg !439
  %81 = load i8*, i8** %4, align 8, !dbg !440
  call void @botline(int, char*)(i32 %80, i8* %81), !dbg !441
  %82 = load i8*, i8** %4, align 8, !dbg !442
  %83 = getelementptr inbounds i8, i8* %82, i64 3, !dbg !442
  store i8* %83, i8** %4, align 8, !dbg !442
  %84 = load i8*, i8** %4, align 8, !dbg !443
  %85 = getelementptr inbounds i8, i8* %84, i32 1, !dbg !443
  store i8* %85, i8** %4, align 8, !dbg !443
  store i8 32, i8* %84, align 1, !dbg !444
  br label %86, !dbg !445

86:
  %87 = load i32, i32* %5, align 4, !dbg !446
  %88 = add nsw i32 %87, -1, !dbg !446
  store i32 %88, i32* %5, align 4, !dbg !446
  br label %73, !dbg !447

89:
  %90 = load i8*, i8** %4, align 8, !dbg !450
  %91 = getelementptr inbounds i8, i8* %90, i32 1, !dbg !450
  store i8* %91, i8** %4, align 8, !dbg !450
  store i8 10, i8* %90, align 1, !dbg !451
  %92 = load i8*, i8** %4, align 8, !dbg !452
  store i8 0, i8* %92, align 1, !dbg !453
  ret void, !dbg !454
}

define dso_local i32 @main() #2 !dbg !455 {
  %1 = alloca i32, align 4
  %2 = alloca [160 x i8], align 16
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [160 x i8]* %2, metadata !456, metadata !DIExpression()), !dbg !460
  %3 = getelementptr inbounds [160 x i8], [160 x i8]* %2, i64 0, i64 0, !dbg !461
  call void @print_led(unsigned long, char*)(i64 1234567, i8* %3), !dbg !462
  %4 = getelementptr inbounds [160 x i8], [160 x i8]* %2, i64 0, i64 0, !dbg !463
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %4), !dbg !464
  ret i32 0, !dbg !465
}

declare dso_local i32 @printf(i8*, ...) #3

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
topline(int, char*):                          # @topline(int, char*)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     qword ptr [rbp - 16], rsi
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
        mov     edx, dword ptr [rbp - 4]
        test    edx, edx
        mov     dword ptr [rbp - 20], edx # 4-byte Spill
        je      .LBB0_1
        jmp     .LBB0_4
.LBB0_4:
        mov     eax, dword ptr [rbp - 20] # 4-byte Reload
        add     eax, -2
        sub     eax, 2
        jb      .LBB0_1
        jmp     .LBB0_5
.LBB0_5:
        mov     eax, dword ptr [rbp - 20] # 4-byte Reload
        sub     eax, 5
        je      .LBB0_1
        jmp     .LBB0_6
.LBB0_6:
        mov     eax, dword ptr [rbp - 20] # 4-byte Reload
        add     eax, -7
        sub     eax, 2
        ja      .LBB0_2
        jmp     .LBB0_1
.LBB0_1:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 95
        jmp     .LBB0_3
.LBB0_2:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
.LBB0_3:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
        pop     rbp
        ret
midline(int, char*):                          # @midline(int, char*)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     qword ptr [rbp - 16], rsi
        mov     eax, dword ptr [rbp - 4]
        test    eax, eax
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        je      .LBB1_1
        jmp     .LBB1_10
.LBB1_10:
        mov     eax, dword ptr [rbp - 20] # 4-byte Reload
        add     eax, -4
        sub     eax, 3
        jb      .LBB1_1
        jmp     .LBB1_11
.LBB1_11:
        mov     eax, dword ptr [rbp - 20] # 4-byte Reload
        add     eax, -8
        sub     eax, 1
        ja      .LBB1_2
        jmp     .LBB1_1
.LBB1_1:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 124
        jmp     .LBB1_3
.LBB1_2:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
.LBB1_3:
        mov     eax, dword ptr [rbp - 4]
        mov     ecx, eax
        add     ecx, -2
        sub     ecx, 5
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        jb      .LBB1_4
        jmp     .LBB1_12
.LBB1_12:
        mov     eax, dword ptr [rbp - 24] # 4-byte Reload
        add     eax, -8
        sub     eax, 1
        ja      .LBB1_5
        jmp     .LBB1_4
.LBB1_4:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 95
        jmp     .LBB1_6
.LBB1_5:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
.LBB1_6:
        mov     eax, dword ptr [rbp - 4]
        mov     ecx, eax
        sub     ecx, 5
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        jb      .LBB1_7
        jmp     .LBB1_13
.LBB1_13:
        mov     eax, dword ptr [rbp - 28] # 4-byte Reload
        add     eax, -7
        sub     eax, 2
        ja      .LBB1_8
        jmp     .LBB1_7
.LBB1_7:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 124
        jmp     .LBB1_9
.LBB1_8:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
.LBB1_9:
        pop     rbp
        ret
botline(int, char*):                          # @botline(int, char*)
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], edi
        mov     qword ptr [rbp - 16], rsi
        mov     eax, dword ptr [rbp - 4]
        test    eax, eax
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        je      .LBB2_1
        jmp     .LBB2_10
.LBB2_10:
        mov     eax, dword ptr [rbp - 20] # 4-byte Reload
        sub     eax, 2
        je      .LBB2_1
        jmp     .LBB2_11
.LBB2_11:
        mov     eax, dword ptr [rbp - 20] # 4-byte Reload
        sub     eax, 6
        je      .LBB2_1
        jmp     .LBB2_12
.LBB2_12:
        mov     eax, dword ptr [rbp - 20] # 4-byte Reload
        sub     eax, 8
        jne     .LBB2_2
        jmp     .LBB2_1
.LBB2_1:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 124
        jmp     .LBB2_3
.LBB2_2:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
.LBB2_3:
        mov     eax, dword ptr [rbp - 4]
        test    eax, eax
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        je      .LBB2_4
        jmp     .LBB2_13
.LBB2_13:
        mov     eax, dword ptr [rbp - 24] # 4-byte Reload
        add     eax, -2
        sub     eax, 2
        jb      .LBB2_4
        jmp     .LBB2_14
.LBB2_14:
        mov     eax, dword ptr [rbp - 24] # 4-byte Reload
        add     eax, -5
        sub     eax, 2
        jb      .LBB2_4
        jmp     .LBB2_15
.LBB2_15:
        mov     eax, dword ptr [rbp - 24] # 4-byte Reload
        sub     eax, 8
        jne     .LBB2_5
        jmp     .LBB2_4
.LBB2_4:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 95
        jmp     .LBB2_6
.LBB2_5:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
.LBB2_6:
        mov     eax, dword ptr [rbp - 4]
        mov     ecx, eax
        sub     ecx, 2
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        jb      .LBB2_7
        jmp     .LBB2_16
.LBB2_16:
        mov     eax, dword ptr [rbp - 28] # 4-byte Reload
        add     eax, -3
        sub     eax, 6
        ja      .LBB2_8
        jmp     .LBB2_7
.LBB2_7:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 124
        jmp     .LBB2_9
.LBB2_8:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
.LBB2_9:
        pop     rbp
        ret
print_led(unsigned long, char*):                        # @print_led(unsigned long, char*)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        xor     eax, eax
        mov     qword ptr [rbp - 8], rdi
        mov     qword ptr [rbp - 16], rsi
        mov     dword ptr [rbp - 20], 0
        mov     rcx, qword ptr [rbp - 8]
        cmp     rcx, 0
        mov     edx, 1
        cmove   eax, edx
        mov     dword ptr [rbp - 24], eax
.LBB3_1:                                # =>This Inner Loop Header: Depth=1
        cmp     qword ptr [rbp - 8], 0
        je      .LBB3_5
        mov     rax, qword ptr [rbp - 8]
        xor     ecx, ecx
        mov     edx, ecx
        mov     esi, 10
        div     rsi
        mov     ecx, dword ptr [rbp - 24]
        mov     edi, ecx
        add     edi, 1
        mov     dword ptr [rbp - 24], edi
        movsxd  rsi, ecx
        mov     dword ptr [4*rsi + print_led(unsigned long, char*)::d], edx
        cmp     dword ptr [rbp - 24], 32
        jl      .LBB3_4
        jmp     .LBB3_5
.LBB3_4:                                #   in Loop: Header=BB3_1 Depth=1
        mov     rax, qword ptr [rbp - 8]
        xor     ecx, ecx
        mov     edx, ecx
        mov     esi, 10
        div     rsi
        mov     qword ptr [rbp - 8], rax
        jmp     .LBB3_1
.LBB3_5:
        mov     eax, dword ptr [rbp - 24]
        sub     eax, 1
        mov     dword ptr [rbp - 20], eax
.LBB3_6:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 0
        jl      .LBB3_9
        movsxd  rax, dword ptr [rbp - 20]
        mov     edi, dword ptr [4*rax + print_led(unsigned long, char*)::d]
        mov     rsi, qword ptr [rbp - 16]
        call    topline(int, char*)
        mov     rax, qword ptr [rbp - 16]
        add     rax, 3
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
        mov     eax, dword ptr [rbp - 20]
        add     eax, -1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB3_6
.LBB3_9:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 10
        mov     edx, dword ptr [rbp - 24]
        sub     edx, 1
        mov     dword ptr [rbp - 20], edx
.LBB3_10:                               # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 0
        jl      .LBB3_13
        movsxd  rax, dword ptr [rbp - 20]
        mov     edi, dword ptr [4*rax + print_led(unsigned long, char*)::d]
        mov     rsi, qword ptr [rbp - 16]
        call    midline(int, char*)
        mov     rax, qword ptr [rbp - 16]
        add     rax, 3
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
        mov     eax, dword ptr [rbp - 20]
        add     eax, -1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB3_10
.LBB3_13:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 10
        mov     edx, dword ptr [rbp - 24]
        sub     edx, 1
        mov     dword ptr [rbp - 20], edx
.LBB3_14:                               # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 20], 0
        jl      .LBB3_17
        movsxd  rax, dword ptr [rbp - 20]
        mov     edi, dword ptr [4*rax + print_led(unsigned long, char*)::d]
        mov     rsi, qword ptr [rbp - 16]
        call    botline(int, char*)
        mov     rax, qword ptr [rbp - 16]
        add     rax, 3
        mov     qword ptr [rbp - 16], rax
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 32
        mov     eax, dword ptr [rbp - 20]
        add     eax, -1
        mov     dword ptr [rbp - 20], eax
        jmp     .LBB3_14
.LBB3_17:
        mov     rax, qword ptr [rbp - 16]
        mov     rcx, rax
        add     rcx, 1
        mov     qword ptr [rbp - 16], rcx
        mov     byte ptr [rax], 10
        mov     rax, qword ptr [rbp - 16]
        mov     byte ptr [rax], 0
        add     rsp, 32
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 192
        lea     rsi, [rbp - 176]
        mov     dword ptr [rbp - 4], 0
        mov     edi, 1234567
        call    print_led(unsigned long, char*)
        lea     rsi, [rbp - 176]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 180], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 192
        pop     rbp
        ret
.L.str:
        .asciz  ""%s\n""

",-Wall
source\00183.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !14
  br label %3, !dbg !16

3:
  %4 = load i32, i32* %2, align 4, !dbg !17
  %5 = icmp slt i32 %4, 10, !dbg !19
  br i1 %5, label %6, label %22, !dbg !20

6:
  %7 = load i32, i32* %2, align 4, !dbg !21
  %8 = icmp slt i32 %7, 5, !dbg !23
  br i1 %8, label %9, label %13, !dbg !24

9:
  %10 = load i32, i32* %2, align 4, !dbg !25
  %11 = load i32, i32* %2, align 4, !dbg !26
  %12 = mul nsw i32 %10, %11, !dbg !27
  br label %16, !dbg !24

13:
  %14 = load i32, i32* %2, align 4, !dbg !28
  %15 = mul nsw i32 %14, 3, !dbg !29
  br label %16, !dbg !24

16:
  %17 = phi i32 [ %12, %9 ], [ %15, %13 ], !dbg !24
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %17), !dbg !30
  br label %19, !dbg !31

19:
  %20 = load i32, i32* %2, align 4, !dbg !32
  %21 = add nsw i32 %20, 1, !dbg !32
  store i32 %21, i32* %2, align 4, !dbg !32
  br label %3, !dbg !33

22:
  ret i32 0, !dbg !36
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 10
        jge     .LBB0_7
        cmp     dword ptr [rbp - 8], 5
        jge     .LBB0_4
        mov     eax, dword ptr [rbp - 8]
        imul    eax, dword ptr [rbp - 8]
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        jmp     .LBB0_5
.LBB0_4:                                #   in Loop: Header=BB0_1 Depth=1
        imul    eax, dword ptr [rbp - 8], 3
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
.LBB0_5:                                #   in Loop: Header=BB0_1 Depth=1
        mov     eax, dword ptr [rbp - 12] # 4-byte Reload
        movabs  rdi, offset .L.str
        mov     esi, eax
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_7:
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00184.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [7 x i8] c""%d %d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i8, align 1
  %3 = alloca i16, align 2
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8* %2, metadata !12, metadata !DIExpression()), !dbg !14
  call void @llvm.dbg.declare(metadata i16* %3, metadata !15, metadata !DIExpression()), !dbg !17
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 1, i64 1), !dbg !18
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 2, i64 2), !dbg !19
  ret i32 0, !dbg !20
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:8:22: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d %d\n"", sizeof(char), sizeof(a));
[0;1;32m           ~~        ^~~~~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:8:36: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d %d\n"", sizeof(char), sizeof(a));
[0;1;32m              ~~                   ^~~~~~~~~
[0m[0;32m              %lu
[0m[1m<source>:9:22: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d %d\n"", sizeof(short), sizeof(b));
[0;1;32m           ~~        ^~~~~~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:9:37: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d %d\n"", sizeof(short), sizeof(b));
[0;1;32m              ~~                    ^~~~~~~~~
[0m[0;32m              %lu
[0m4 warnings generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     eax, 1
        mov     rsi, rax
        mov     rdx, rax
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        mov     ecx, 2
        mov     rsi, rcx
        mov     rdx, rcx
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     r8d, r8d
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     eax, r8d
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d %d\n""

Standard error:
[1m<source>:8:22: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d %d\n"", sizeof(char), sizeof(a));
[0;1;32m           ~~        ^~~~~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:8:36: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d %d\n"", sizeof(char), sizeof(a));
[0;1;32m              ~~                   ^~~~~~~~~
[0m[0;32m              %lu
[0m[1m<source>:9:22: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d %d\n"", sizeof(short), sizeof(b));
[0;1;32m           ~~        ^~~~~~~~~~~~~
[0m[0;32m           %lu
[0m[1m<source>:9:37: [0m[0;1;35mwarning: [0m[1mformat specifies type 'int' but the argument has type 'unsigned long' [-Wformat][0m
   printf(""%d %d\n"", sizeof(short), sizeof(b));
[0;1;32m              ~~                    ^~~~~~~~~
[0m[0;32m              %lu
[0m4 warnings generated.
",-Wall
source\00185.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@__const.main.Array = private unnamed_addr constant [10 x i32] [i32 12, i32 34, i32 56, i32 78, i32 90, i32 123, i32 456, i32 789, i32 8642, i32 9753], align 16
@.str = private unnamed_addr constant [8 x i8] c""%d: %d\0A\00"", align 1
@__const.main.Array2 = private unnamed_addr constant [10 x i32] [i32 12, i32 34, i32 56, i32 78, i32 90, i32 123, i32 456, i32 789, i32 8642, i32 9753], align 16

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [10 x i32], align 16
  %4 = alloca [10 x i32], align 16
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata [10 x i32]* %3, metadata !14, metadata !DIExpression()), !dbg !18
  %5 = bitcast [10 x i32]* %3 to i8*, !dbg !18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 bitcast ([10 x i32]* @__const.main.Array to i8*), i64 40, i1 false), !dbg !18
  store i32 0, i32* %2, align 4, !dbg !19
  br label %6, !dbg !21

6:
  %7 = load i32, i32* %2, align 4, !dbg !22
  %8 = icmp slt i32 %7, 10, !dbg !24
  br i1 %8, label %9, label %19, !dbg !25

9:
  %10 = load i32, i32* %2, align 4, !dbg !26
  %11 = load i32, i32* %2, align 4, !dbg !27
  %12 = sext i32 %11 to i64, !dbg !28
  %13 = getelementptr inbounds [10 x i32], [10 x i32]* %3, i64 0, i64 %12, !dbg !28
  %14 = load i32, i32* %13, align 4, !dbg !28
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 %10, i32 %14), !dbg !29
  br label %16, !dbg !29

16:
  %17 = load i32, i32* %2, align 4, !dbg !30
  %18 = add nsw i32 %17, 1, !dbg !30
  store i32 %18, i32* %2, align 4, !dbg !30
  br label %6, !dbg !31

19:
  call void @llvm.dbg.declare(metadata [10 x i32]* %4, metadata !34, metadata !DIExpression()), !dbg !35
  %20 = bitcast [10 x i32]* %4 to i8*, !dbg !35
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %20, i8* align 16 bitcast ([10 x i32]* @__const.main.Array2 to i8*), i64 40, i1 false), !dbg !35
  store i32 0, i32* %2, align 4, !dbg !36
  br label %21, !dbg !38

21:
  %22 = load i32, i32* %2, align 4, !dbg !39
  %23 = icmp slt i32 %22, 10, !dbg !41
  br i1 %23, label %24, label %34, !dbg !42

24:
  %25 = load i32, i32* %2, align 4, !dbg !43
  %26 = load i32, i32* %2, align 4, !dbg !44
  %27 = sext i32 %26 to i64, !dbg !45
  %28 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %27, !dbg !45
  %29 = load i32, i32* %28, align 4, !dbg !45
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 %25, i32 %29), !dbg !46
  br label %31, !dbg !46

31:
  %32 = load i32, i32* %2, align 4, !dbg !47
  %33 = add nsw i32 %32, 1, !dbg !47
  store i32 %33, i32* %2, align 4, !dbg !47
  br label %21, !dbg !48

34:
  ret i32 0, !dbg !51
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @printf(i8*, ...) #3

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 96
        movabs  rax, offset .L__const.main.Array
        mov     dword ptr [rbp - 4], 0
        lea     rcx, [rbp - 48]
        mov     rdi, rcx
        mov     rsi, rax
        mov     edx, 40
        call    memcpy
        mov     dword ptr [rbp - 8], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 10
        jge     .LBB0_4
        mov     esi, dword ptr [rbp - 8]
        movsxd  rax, dword ptr [rbp - 8]
        mov     edx, dword ptr [rbp + 4*rax - 48]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_4:
        movabs  rax, offset .L__const.main.Array2
        lea     rcx, [rbp - 96]
        mov     rdi, rcx
        mov     rsi, rax
        mov     edx, 40
        call    memcpy
        mov     dword ptr [rbp - 8], 0
.LBB0_5:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 10
        jge     .LBB0_8
        mov     esi, dword ptr [rbp - 8]
        movsxd  rax, dword ptr [rbp - 8]
        mov     edx, dword ptr [rbp + 4*rax - 96]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_5
.LBB0_8:
        xor     eax, eax
        add     rsp, 96
        pop     rbp
        ret
.L__const.main.Array:
        .long   12                      # 0xc
        .long   34                      # 0x22
        .long   56                      # 0x38
        .long   78                      # 0x4e
        .long   90                      # 0x5a
        .long   123                     # 0x7b
        .long   456                     # 0x1c8
        .long   789                     # 0x315
        .long   8642                    # 0x21c2
        .long   9753                    # 0x2619

.L.str:
        .asciz  ""%d: %d\n""

.L__const.main.Array2:
        .long   12                      # 0xc
        .long   34                      # 0x22
        .long   56                      # 0x38
        .long   78                      # 0x4e
        .long   90                      # 0x5a
        .long   123                     # 0x7b
        .long   456                     # 0x1c8
        .long   789                     # 0x315
        .long   8642                    # 0x21c2
        .long   9753                    # 0x2619

",-Wall
source\00186.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [10 x i8] c""->%02d<-\0A\00"", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c""%s\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [100 x i8], align 16
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [100 x i8]* %2, metadata !12, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata i32* %3, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 1, i32* %3, align 4, !dbg !20
  br label %4, !dbg !22

4:
  %5 = load i32, i32* %3, align 4, !dbg !23
  %6 = icmp sle i32 %5, 20, !dbg !25
  br i1 %6, label %7, label %16, !dbg !26

7:
  %8 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 0, !dbg !27
  %9 = load i32, i32* %3, align 4, !dbg !29
  %10 = call i32 (i8*, i8*, ...) @sprintf(i8* %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %9) #4, !dbg !30
  %11 = getelementptr inbounds [100 x i8], [100 x i8]* %2, i64 0, i64 0, !dbg !31
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %11), !dbg !32
  br label %13, !dbg !33

13:
  %14 = load i32, i32* %3, align 4, !dbg !34
  %15 = add nsw i32 %14, 1, !dbg !34
  store i32 %15, i32* %3, align 4, !dbg !34
  br label %4, !dbg !35

16:
  ret i32 0, !dbg !38
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @printf(i8*, ...) #3

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #4 = { nounwind }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 128
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 116], 1
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 116], 20
        jg      .LBB0_4
        lea     rdi, [rbp - 112]
        mov     edx, dword ptr [rbp - 116]
        movabs  rsi, offset .L.str
        mov     al, 0
        call    sprintf
        lea     rsi, [rbp - 112]
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 120], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 116]
        add     eax, 1
        mov     dword ptr [rbp - 116], eax
        jmp     .LBB0_1
.LBB0_4:
        xor     eax, eax
        add     rsp, 128
        pop     rbp
        ret
.L.str:
        .asciz  ""->%02d<-\n""

.L.str.1:
        .asciz  ""%s""

",-Wall
source\00187.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [9 x i8] c""fred.txt\00"", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c""w\00"", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c""hello\0Ahello\0A\00"", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c""r\00"", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c""couldn't read fred.txt\0A\00"", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c""%s\00"", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c""ch: %d '%c'\0A\00"", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c""x: %s\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca %struct._IO_FILE*, align 8
  %3 = alloca [7 x i8], align 1
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %2, metadata !12, metadata !DIExpression()), !dbg !18
  %6 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !19
  store %struct._IO_FILE* %6, %struct._IO_FILE** %2, align 8, !dbg !18
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !20
  %8 = call i64 @fwrite(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 1, i64 12, %struct._IO_FILE* %7), !dbg !21
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !22
  %10 = call i32 @fclose(%struct._IO_FILE* %9), !dbg !23
  call void @llvm.dbg.declare(metadata [7 x i8]* %3, metadata !24, metadata !DIExpression()), !dbg !29
  %11 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !30
  store %struct._IO_FILE* %11, %struct._IO_FILE** %2, align 8, !dbg !31
  %12 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 0, !dbg !32
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !34
  %14 = call i64 @fread(i8* %12, i64 1, i64 6, %struct._IO_FILE* %13), !dbg !35
  %15 = icmp ne i64 %14, 6, !dbg !36
  br i1 %15, label %16, label %18, !dbg !37

16:
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0)), !dbg !38
  br label %18, !dbg !38

18:
  %19 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 6, !dbg !39
  store i8 0, i8* %19, align 1, !dbg !40
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !41
  %21 = call i32 @fclose(%struct._IO_FILE* %20), !dbg !42
  %22 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 0, !dbg !43
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i8* %22), !dbg !44
  call void @llvm.dbg.declare(metadata i32* %4, metadata !45, metadata !DIExpression()), !dbg !46
  call void @llvm.dbg.declare(metadata i8* %5, metadata !47, metadata !DIExpression()), !dbg !48
  %24 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !49
  store %struct._IO_FILE* %24, %struct._IO_FILE** %2, align 8, !dbg !50
  br label %25, !dbg !51

25:
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !52
  %27 = call i32 @fgetc(%struct._IO_FILE* %26), !dbg !53
  store i32 %27, i32* %4, align 4, !dbg !54
  %28 = icmp ne i32 %27, -1, !dbg !55
  br i1 %28, label %29, label %41, !dbg !51

29:
  %30 = load i32, i32* %4, align 4, !dbg !56
  %31 = trunc i32 %30 to i8, !dbg !56
  store i8 %31, i8* %5, align 1, !dbg !58
  %32 = load i8, i8* %5, align 1, !dbg !59
  %33 = sext i8 %32 to i32, !dbg !59
  %34 = icmp slt i32 %33, 32, !dbg !61
  br i1 %34, label %35, label %36, !dbg !62

35:
  store i8 46, i8* %5, align 1, !dbg !63
  br label %36, !dbg !64

36:
  %37 = load i32, i32* %4, align 4, !dbg !65
  %38 = load i8, i8* %5, align 1, !dbg !66
  %39 = sext i8 %38 to i32, !dbg !66
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i32 %37, i32 %39), !dbg !67
  br label %25, !dbg !51

41:
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !70
  %43 = call i32 @fclose(%struct._IO_FILE* %42), !dbg !71
  %44 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !72
  store %struct._IO_FILE* %44, %struct._IO_FILE** %2, align 8, !dbg !73
  br label %45, !dbg !74

45:
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !75
  %47 = call i32 @getc(%struct._IO_FILE* %46), !dbg !76
  store i32 %47, i32* %4, align 4, !dbg !77
  %48 = icmp ne i32 %47, -1, !dbg !78
  br i1 %48, label %49, label %61, !dbg !74

49:
  %50 = load i32, i32* %4, align 4, !dbg !79
  %51 = trunc i32 %50 to i8, !dbg !79
  store i8 %51, i8* %5, align 1, !dbg !81
  %52 = load i8, i8* %5, align 1, !dbg !82
  %53 = sext i8 %52 to i32, !dbg !82
  %54 = icmp slt i32 %53, 32, !dbg !84
  br i1 %54, label %55, label %56, !dbg !85

55:
  store i8 46, i8* %5, align 1, !dbg !86
  br label %56, !dbg !87

56:
  %57 = load i32, i32* %4, align 4, !dbg !88
  %58 = load i8, i8* %5, align 1, !dbg !89
  %59 = sext i8 %58 to i32, !dbg !89
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i32 %57, i32 %59), !dbg !90
  br label %45, !dbg !74

61:
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !93
  %63 = call i32 @fclose(%struct._IO_FILE* %62), !dbg !94
  %64 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !95
  store %struct._IO_FILE* %64, %struct._IO_FILE** %2, align 8, !dbg !96
  br label %65, !dbg !97

65:
  %66 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 0, !dbg !98
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !99
  %68 = call i8* @fgets(i8* %66, i32 7, %struct._IO_FILE* %67), !dbg !100
  %69 = icmp ne i8* %68, null, !dbg !101
  br i1 %69, label %70, label %73, !dbg !97

70:
  %71 = getelementptr inbounds [7 x i8], [7 x i8]* %3, i64 0, i64 0, !dbg !102
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* %71), !dbg !103
  br label %65, !dbg !97

73:
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !106
  %75 = call i32 @fclose(%struct._IO_FILE* %74), !dbg !107
  ret i32 0, !dbg !108
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #2

declare dso_local i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #2

declare dso_local i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fgetc(%struct._IO_FILE*) #2

declare dso_local i32 @getc(%struct._IO_FILE*) #2

declare dso_local i8* @fgets(i8*, i32, %struct._IO_FILE*) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 64
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.1
        call    fopen
        mov     qword ptr [rbp - 16], rax
        mov     rcx, qword ptr [rbp - 16]
        movabs  rdi, offset .L.str.2
        mov     esi, 1
        mov     edx, 12
        call    fwrite
        mov     rdi, qword ptr [rbp - 16]
        mov     qword ptr [rbp - 40], rax # 8-byte Spill
        call    fclose
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.3
        mov     dword ptr [rbp - 44], eax # 4-byte Spill
        call    fopen
        lea     rdi, [rbp - 23]
        mov     qword ptr [rbp - 16], rax
        mov     rcx, qword ptr [rbp - 16]
        mov     esi, 1
        mov     edx, 6
        call    fread
        cmp     rax, 6
        je      .LBB0_2
        movabs  rdi, offset .L.str.4
        mov     al, 0
        call    printf
.LBB0_2:
        mov     byte ptr [rbp - 17], 0
        mov     rdi, qword ptr [rbp - 16]
        call    fclose
        lea     rsi, [rbp - 23]
        movabs  rdi, offset .L.str.5
        mov     dword ptr [rbp - 48], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.3
        mov     dword ptr [rbp - 52], eax # 4-byte Spill
        call    fopen
        mov     qword ptr [rbp - 16], rax
.LBB0_3:                                # =>This Inner Loop Header: Depth=1
        mov     rdi, qword ptr [rbp - 16]
        call    fgetc
        mov     dword ptr [rbp - 28], eax
        cmp     eax, -1
        je      .LBB0_7
        mov     eax, dword ptr [rbp - 28]
        mov     byte ptr [rbp - 29], al
        movsx   ecx, byte ptr [rbp - 29]
        cmp     ecx, 32
        jge     .LBB0_6
        mov     byte ptr [rbp - 29], 46
.LBB0_6:                                #   in Loop: Header=BB0_3 Depth=1
        mov     esi, dword ptr [rbp - 28]
        movsx   edx, byte ptr [rbp - 29]
        movabs  rdi, offset .L.str.6
        mov     al, 0
        call    printf
        jmp     .LBB0_3
.LBB0_7:
        mov     rdi, qword ptr [rbp - 16]
        call    fclose
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.3
        mov     dword ptr [rbp - 56], eax # 4-byte Spill
        call    fopen
        mov     qword ptr [rbp - 16], rax
.LBB0_8:                                # =>This Inner Loop Header: Depth=1
        mov     rdi, qword ptr [rbp - 16]
        call    getc
        mov     dword ptr [rbp - 28], eax
        cmp     eax, -1
        je      .LBB0_12
        mov     eax, dword ptr [rbp - 28]
        mov     byte ptr [rbp - 29], al
        movsx   ecx, byte ptr [rbp - 29]
        cmp     ecx, 32
        jge     .LBB0_11
        mov     byte ptr [rbp - 29], 46
.LBB0_11:                               #   in Loop: Header=BB0_8 Depth=1
        mov     esi, dword ptr [rbp - 28]
        movsx   edx, byte ptr [rbp - 29]
        movabs  rdi, offset .L.str.6
        mov     al, 0
        call    printf
        jmp     .LBB0_8
.LBB0_12:
        mov     rdi, qword ptr [rbp - 16]
        call    fclose
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.3
        mov     dword ptr [rbp - 60], eax # 4-byte Spill
        call    fopen
        mov     qword ptr [rbp - 16], rax
.LBB0_13:                               # =>This Inner Loop Header: Depth=1
        lea     rdi, [rbp - 23]
        mov     rdx, qword ptr [rbp - 16]
        mov     esi, 7
        call    fgets
        cmp     rax, 0
        je      .LBB0_15
        lea     rsi, [rbp - 23]
        movabs  rdi, offset .L.str.7
        mov     al, 0
        call    printf
        jmp     .LBB0_13
.LBB0_15:
        mov     rdi, qword ptr [rbp - 16]
        call    fclose
        xor     ecx, ecx
        mov     dword ptr [rbp - 64], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 64
        pop     rbp
        ret
.L.str:
        .asciz  ""fred.txt""

.L.str.1:
        .asciz  ""w""

.L.str.2:
        .asciz  ""hello\nhello\n""

.L.str.3:
        .asciz  ""r""

.L.str.4:
        .asciz  ""couldn't read fred.txt\n""

.L.str.5:
        .asciz  ""%s""

.L.str.6:
        .asciz  ""ch: %d '%c'\n""

.L.str.7:
        .asciz  ""x: %s""

",-Wall
source\00188.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [15 x i8] c""#include test\0A\00"", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c""b\0A\00"", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c""g\0A\00"", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c""i\0A\00"", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c""p\0A\00"", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c""r\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0)), !dbg !12
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !13
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)), !dbg !14
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !15
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)), !dbg !16
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0)), !dbg !17
  ret i32 0, !dbg !18
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.2
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.3
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.4
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.5
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 32
        pop     rbp
        ret
.L.str:
        .asciz  ""#include test\n""

.L.str.1:
        .asciz  ""b\n""

.L.str.2:
        .asciz  ""g\n""

.L.str.3:
        .asciz  ""i\n""

.L.str.4:
        .asciz  ""p\n""

.L.str.5:
        .asciz  ""r\n""

",-Wall
source\00189.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [7 x i8] c""yo %d\0A\00"", align 1
@f = dso_local global i32 (i32)* @fred(int), align 8, !dbg !0
@fprintfptr = dso_local global i32 (%struct._IO_FILE*, i8*, ...)* @fprintf, align 8, !dbg !6
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @fred(int)(i32 %0) #0 !dbg !28 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !29, metadata !DIExpression()), !dbg !30
  %3 = load i32, i32* %2, align 4, !dbg !31
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 %3), !dbg !32
  ret i32 42, !dbg !33
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

define dso_local i32 @main() #3 !dbg !34 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32 (%struct._IO_FILE*, i8*, ...)*, i32 (%struct._IO_FILE*, i8*, ...)** @fprintfptr, align 8, !dbg !37
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !38
  %4 = load i32 (i32)*, i32 (i32)** @f, align 8, !dbg !39
  %5 = call i32 %4(i32 24), !dbg !40
  %6 = call i32 (%struct._IO_FILE*, i8*, ...) %2(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %5), !dbg !37
  ret i32 0, !dbg !41
}

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
fred(int):                               # @fred(int)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], edi
        mov     esi, dword ptr [rbp - 4]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     ecx, 42
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        mov     rax, qword ptr [fprintfptr]
        mov     rdi, qword ptr [stdout]
        mov     ecx, 24
        mov     qword ptr [rbp - 16], rdi # 8-byte Spill
        mov     edi, ecx
        mov     qword ptr [rbp - 24], rax # 8-byte Spill
        call    qword ptr [f]
        mov     rdi, qword ptr [rbp - 16] # 8-byte Reload
        movabs  rsi, offset .L.str.1
        mov     edx, eax
        mov     al, 0
        mov     r8, qword ptr [rbp - 24] # 8-byte Reload
        call    r8
        xor     ecx, ecx
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 32
        pop     rbp
        ret
.L.str:
        .asciz  ""yo %d\n""

f:
        .quad   fred(int)

fprintfptr:
        .quad   fprintf

.L.str.1:
        .asciz  ""%d\n""

",-Wall
source\00190.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""yo\0A\00"", align 1

define dso_local void @fred()() #0 !dbg !7 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0)), !dbg !11
  ret void, !dbg !12
}

declare dso_local i32 @printf(i8*, ...) #1

define dso_local i32 @main() #2 !dbg !13 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @fred()(), !dbg !17
  ret i32 0, !dbg !18
}

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
fred():                               # @fred()
        push    rbp
        mov     rbp, rsp
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        call    fred()
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""yo\n""

",-Wall
source\00191.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [15 x i8] c""it's all good\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !14
  br label %4, !dbg !16

4:
  %5 = load i32, i32* %2, align 4, !dbg !17
  %6 = icmp slt i32 %5, 2, !dbg !19
  br i1 %6, label %7, label %12, !dbg !20

7:
  call void @llvm.dbg.declare(metadata i32* %3, metadata !21, metadata !DIExpression()), !dbg !23
  %8 = load i32, i32* %2, align 4, !dbg !24
  store i32 %8, i32* %3, align 4, !dbg !23
  br label %9, !dbg !25

9:
  %10 = load i32, i32* %2, align 4, !dbg !26
  %11 = add nsw i32 %10, 1, !dbg !26
  store i32 %11, i32* %2, align 4, !dbg !26
  br label %4, !dbg !27

12:
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0)), !dbg !30
  ret i32 0, !dbg !31
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        cmp     dword ptr [rbp - 8], 2
        jge     .LBB0_4
        mov     eax, dword ptr [rbp - 8]
        mov     dword ptr [rbp - 12], eax
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_1
.LBB0_4:
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""it's all good\n""

Standard error:
[1m<source>:9:11: [0m[0;1;35mwarning: [0m[1munused variable 'b' [-Wunused-variable][0m
      int b = a;
[0;1;32m          ^
[0m1 warning generated.
",-Wall
source\00192.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 0, i32* %2, align 4, !dbg !13
  br label %3, !dbg !14

3:
  %4 = load i32, i32* %2, align 4, !dbg !15
  %5 = add nsw i32 %4, 1, !dbg !15
  store i32 %5, i32* %2, align 4, !dbg !15
  %6 = load i32, i32* %2, align 4, !dbg !19
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %6), !dbg !20
  %8 = load i32, i32* %2, align 4, !dbg !21
  %9 = icmp sge i32 %8, 10, !dbg !23
  br i1 %9, label %10, label %11, !dbg !24

10:
  br label %12, !dbg !25

11:
  br label %3, !dbg !26

12:
  ret i32 0, !dbg !30
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        cmp     dword ptr [rbp - 8], 10
        jl      .LBB0_3
        jmp     .LBB0_4
.LBB0_3:                                #   in Loop: Header=BB0_1 Depth=1
        jmp     .LBB0_1
.LBB0_4:
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00193.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [3 x i8] c""1\0A\00"", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c""2\0A\00"", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c""3\0A\00"", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c""out\0A\00"", align 1

define dso_local void @fred(int)(i32 %0) #0 !dbg !7 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  %3 = load i32, i32* %2, align 4, !dbg !14
  switch i32 %3, label %10 [
    i32 1, label %4
    i32 2, label %6
    i32 3, label %8
  ], !dbg !15

4:
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)), !dbg !16
  br label %12, !dbg !18

6:
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)), !dbg !19
  br label %10, !dbg !20

8:
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)), !dbg !21
  br label %12, !dbg !22

10:
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)), !dbg !23
  br label %12, !dbg !24

12:
  ret void, !dbg !24
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

define dso_local i32 @main() #3 !dbg !25 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @fred(int)(i32 1), !dbg !28
  call void @fred(int)(i32 2), !dbg !29
  call void @fred(int)(i32 3), !dbg !30
  ret i32 0, !dbg !31
}

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
fred(int):                               # @fred(int)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], edi
        mov     eax, dword ptr [rbp - 4]
        mov     ecx, eax
        sub     ecx, 1
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        je      .LBB0_1
        jmp     .LBB0_6
.LBB0_6:
        mov     eax, dword ptr [rbp - 8] # 4-byte Reload
        sub     eax, 2
        je      .LBB0_2
        jmp     .LBB0_7
.LBB0_7:
        mov     eax, dword ptr [rbp - 8] # 4-byte Reload
        sub     eax, 3
        je      .LBB0_3
        jmp     .LBB0_4
.LBB0_1:
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        jmp     .LBB0_5
.LBB0_2:
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        jmp     .LBB0_4
.LBB0_3:
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        jmp     .LBB0_5
.LBB0_4:
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf
.LBB0_5:
        add     rsp, 16
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     edi, 1
        call    fred(int)
        mov     edi, 2
        call    fred(int)
        mov     edi, 3
        call    fred(int)
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""1\n""

.L.str.1:
        .asciz  ""2\n""

.L.str.2:
        .asciz  ""3\n""

.L.str.3:
        .asciz  ""out\n""

",-Wall
source\00194.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [3 x i8] c""%d\00"", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c""\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8, align 1
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i8* %3, metadata !14, metadata !DIExpression()), !dbg !16
  store i32 0, i32* %2, align 4, !dbg !17
  br label %4, !dbg !18

4:
  %5 = load i32, i32* %2, align 4, !dbg !19
  %6 = icmp slt i32 %5, 2, !dbg !20
  br i1 %6, label %7, label %11, !dbg !18

7:
  %8 = load i32, i32* %2, align 4, !dbg !21
  %9 = add nsw i32 %8, 1, !dbg !21
  store i32 %9, i32* %2, align 4, !dbg !21
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %8), !dbg !23
  br label %11, !dbg !24

11:
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !25
  ret i32 0, !dbg !26
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        cmp     dword ptr [rbp - 8], 2
        jge     .LBB0_3
        mov     eax, dword ptr [rbp - 8]
        mov     ecx, eax
        add     ecx, 1
        mov     dword ptr [rbp - 8], ecx
        movabs  rdi, offset .L.str
        mov     esi, eax
        mov     al, 0
        call    printf
.LBB0_3:
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d""

.L.str.1:
        .asciz  ""\n""

",-Wall
source\00195.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.point = type { double, double }

@point_array = dso_local global [100 x %struct.point] zeroinitializer, align 16, !dbg !0
@.str = private unnamed_addr constant [8 x i8] c""%f, %f\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !19 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !23, metadata !DIExpression()), !dbg !24
  store i32 10, i32* %2, align 4, !dbg !24
  %3 = load i32, i32* %2, align 4, !dbg !25
  %4 = sext i32 %3 to i64, !dbg !26
  %5 = getelementptr inbounds [100 x %struct.point], [100 x %struct.point]* @point_array, i64 0, i64 %4, !dbg !26
  %6 = getelementptr inbounds %struct.point, %struct.point* %5, i32 0, i32 0, !dbg !27
  store double 1.234000e+01, double* %6, align 16, !dbg !28
  %7 = load i32, i32* %2, align 4, !dbg !29
  %8 = sext i32 %7 to i64, !dbg !30
  %9 = getelementptr inbounds [100 x %struct.point], [100 x %struct.point]* @point_array, i64 0, i64 %8, !dbg !30
  %10 = getelementptr inbounds %struct.point, %struct.point* %9, i32 0, i32 1, !dbg !31
  store double 5.678000e+01, double* %10, align 8, !dbg !32
  %11 = load i32, i32* %2, align 4, !dbg !33
  %12 = sext i32 %11 to i64, !dbg !34
  %13 = getelementptr inbounds [100 x %struct.point], [100 x %struct.point]* @point_array, i64 0, i64 %12, !dbg !34
  %14 = getelementptr inbounds %struct.point, %struct.point* %13, i32 0, i32 0, !dbg !35
  %15 = load double, double* %14, align 16, !dbg !35
  %16 = load i32, i32* %2, align 4, !dbg !36
  %17 = sext i32 %16 to i64, !dbg !37
  %18 = getelementptr inbounds [100 x %struct.point], [100 x %struct.point]* @point_array, i64 0, i64 %17, !dbg !37
  %19 = getelementptr inbounds %struct.point, %struct.point* %18, i32 0, i32 1, !dbg !38
  %20 = load double, double* %19, align 8, !dbg !38
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), double %15, double %20), !dbg !39
  ret i32 0, !dbg !40
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
.LCPI0_0:
        .quad   4633187891898314916     # double 56.780000000000001
.LCPI0_1:
        .quad   4623136420479977390     # double 12.34
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        movsd   xmm0, qword ptr [rip + .LCPI0_0] # xmm0 = mem[0],zero
        movsd   xmm1, qword ptr [rip + .LCPI0_1] # xmm1 = mem[0],zero
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 10
        movsxd  rax, dword ptr [rbp - 8]
        shl     rax, 4
        movabs  rcx, offset point_array
        mov     rdx, rcx
        add     rdx, rax
        movsd   qword ptr [rdx], xmm1
        movsxd  rax, dword ptr [rbp - 8]
        shl     rax, 4
        mov     rdx, rcx
        add     rdx, rax
        movsd   qword ptr [rdx + 8], xmm0
        movsxd  rax, dword ptr [rbp - 8]
        shl     rax, 4
        mov     rdx, rcx
        add     rdx, rax
        movsd   xmm0, qword ptr [rdx]   # xmm0 = mem[0],zero
        movsxd  rax, dword ptr [rbp - 8]
        shl     rax, 4
        add     rcx, rax
        movsd   xmm1, qword ptr [rcx + 8] # xmm1 = mem[0],zero
        movabs  rdi, offset .L.str
        mov     al, 2
        call    printf
        xor     esi, esi
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     eax, esi
        add     rsp, 16
        pop     rbp
        ret
point_array:
        .zero   1600

.L.str:
        .asciz  ""%f, %f\n""

",-Wall
source\00196.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [6 x i8] c""fred\0A\00"", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c""joe\0A\00"", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @fred()() #0 !dbg !7 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)), !dbg !12
  ret i32 0, !dbg !13
}

declare dso_local i32 @printf(i8*, ...) #1

define dso_local i32 @joe()() #0 !dbg !14 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)), !dbg !15
  ret i32 1, !dbg !16
}

define dso_local i32 @main() #2 !dbg !17 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 @fred()(), !dbg !18
  %3 = icmp ne i32 %2, 0, !dbg !18
  br i1 %3, label %4, label %7, !dbg !19

4:
  %5 = call i32 @joe()(), !dbg !20
  %6 = icmp ne i32 %5, 0, !dbg !20
  br label %7

7:
  %8 = phi i1 [ false, %0 ], [ %6, %4 ], !dbg !21
  %9 = zext i1 %8 to i32, !dbg !18
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %9), !dbg !22
  %11 = call i32 @fred()(), !dbg !23
  %12 = icmp ne i32 %11, 0, !dbg !23
  br i1 %12, label %16, label %13, !dbg !24

13:
  %14 = call i32 @joe()(), !dbg !25
  %15 = icmp ne i32 %14, 0, !dbg !25
  br label %16, !dbg !24

16:
  %17 = phi i1 [ true, %7 ], [ %15, %13 ]
  %18 = zext i1 %17 to i32, !dbg !23
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %18), !dbg !26
  %20 = call i32 @joe()(), !dbg !27
  %21 = icmp ne i32 %20, 0, !dbg !27
  br i1 %21, label %22, label %25, !dbg !28

22:
  %23 = call i32 @fred()(), !dbg !29
  %24 = icmp ne i32 %23, 0, !dbg !29
  br label %25

25:
  %26 = phi i1 [ false, %16 ], [ %24, %22 ], !dbg !21
  %27 = zext i1 %26 to i32, !dbg !27
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %27), !dbg !30
  %29 = call i32 @joe()(), !dbg !31
  %30 = icmp ne i32 %29, 0, !dbg !31
  br i1 %30, label %34, label %31, !dbg !32

31:
  %32 = call i32 @fred()(), !dbg !33
  %33 = icmp ne i32 %32, 0, !dbg !33
  br label %34, !dbg !32

34:
  %35 = phi i1 [ true, %25 ], [ %33, %31 ]
  %36 = zext i1 %35 to i32, !dbg !31
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %36), !dbg !34
  %38 = call i32 @fred()(), !dbg !35
  %39 = icmp ne i32 %38, 0, !dbg !35
  br i1 %39, label %40, label %44, !dbg !36

40:
  %41 = call i32 @joe()(), !dbg !37
  %42 = add nsw i32 1, %41, !dbg !38
  %43 = icmp ne i32 %42, 0, !dbg !39
  br label %44

44:
  %45 = phi i1 [ false, %34 ], [ %43, %40 ], !dbg !21
  %46 = zext i1 %45 to i32, !dbg !35
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %46), !dbg !40
  %48 = call i32 @fred()(), !dbg !41
  %49 = icmp ne i32 %48, 0, !dbg !41
  br i1 %49, label %54, label %50, !dbg !42

50:
  %51 = call i32 @joe()(), !dbg !43
  %52 = add nsw i32 0, %51, !dbg !44
  %53 = icmp ne i32 %52, 0, !dbg !45
  br label %54, !dbg !42

54:
  %55 = phi i1 [ true, %44 ], [ %53, %50 ]
  %56 = zext i1 %55 to i32, !dbg !41
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %56), !dbg !46
  %58 = call i32 @joe()(), !dbg !47
  %59 = icmp ne i32 %58, 0, !dbg !47
  br i1 %59, label %60, label %64, !dbg !48

60:
  %61 = call i32 @fred()(), !dbg !49
  %62 = add nsw i32 0, %61, !dbg !50
  %63 = icmp ne i32 %62, 0, !dbg !51
  br label %64

64:
  %65 = phi i1 [ false, %54 ], [ %63, %60 ], !dbg !21
  %66 = zext i1 %65 to i32, !dbg !47
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %66), !dbg !52
  %68 = call i32 @joe()(), !dbg !53
  %69 = icmp ne i32 %68, 0, !dbg !53
  br i1 %69, label %74, label %70, !dbg !54

70:
  %71 = call i32 @fred()(), !dbg !55
  %72 = add nsw i32 1, %71, !dbg !56
  %73 = icmp ne i32 %72, 0, !dbg !57
  br label %74, !dbg !54

74:
  %75 = phi i1 [ true, %64 ], [ %73, %70 ]
  %76 = zext i1 %75 to i32, !dbg !53
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %76), !dbg !58
  ret i32 0, !dbg !59
}

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
fred():                               # @fred()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 4], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
joe():                                # @joe()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        mov     ecx, 1
        mov     dword ptr [rbp - 4], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     dword ptr [rbp - 4], 0
        call    fred()
        xor     ecx, ecx
        cmp     eax, 0
        mov     byte ptr [rbp - 5], cl  # 1-byte Spill
        je      .LBB2_2
        call    joe()
        cmp     eax, 0
        setne   cl
        mov     byte ptr [rbp - 5], cl  # 1-byte Spill
.LBB2_2:
        mov     al, byte ptr [rbp - 5]  # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        call    fred()
        cmp     eax, 0
        mov     cl, 1
        mov     byte ptr [rbp - 13], cl # 1-byte Spill
        jne     .LBB2_4
        call    joe()
        cmp     eax, 0
        setne   cl
        mov     byte ptr [rbp - 13], cl # 1-byte Spill
.LBB2_4:
        mov     al, byte ptr [rbp - 13] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        call    joe()
        xor     ecx, ecx
        cmp     eax, 0
        mov     byte ptr [rbp - 21], cl # 1-byte Spill
        je      .LBB2_6
        call    fred()
        cmp     eax, 0
        setne   cl
        mov     byte ptr [rbp - 21], cl # 1-byte Spill
.LBB2_6:
        mov     al, byte ptr [rbp - 21] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        call    joe()
        cmp     eax, 0
        mov     cl, 1
        mov     byte ptr [rbp - 29], cl # 1-byte Spill
        jne     .LBB2_8
        call    fred()
        cmp     eax, 0
        setne   cl
        mov     byte ptr [rbp - 29], cl # 1-byte Spill
.LBB2_8:
        mov     al, byte ptr [rbp - 29] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        call    fred()
        xor     ecx, ecx
        cmp     eax, 0
        mov     byte ptr [rbp - 37], cl # 1-byte Spill
        je      .LBB2_10
        call    joe()
        add     eax, 1
        cmp     eax, 0
        setne   cl
        mov     byte ptr [rbp - 37], cl # 1-byte Spill
.LBB2_10:
        mov     al, byte ptr [rbp - 37] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 44], eax # 4-byte Spill
        call    fred()
        cmp     eax, 0
        mov     cl, 1
        mov     byte ptr [rbp - 45], cl # 1-byte Spill
        jne     .LBB2_12
        call    joe()
        add     eax, 0
        cmp     eax, 0
        setne   cl
        mov     byte ptr [rbp - 45], cl # 1-byte Spill
.LBB2_12:
        mov     al, byte ptr [rbp - 45] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 52], eax # 4-byte Spill
        call    joe()
        xor     ecx, ecx
        cmp     eax, 0
        mov     byte ptr [rbp - 53], cl # 1-byte Spill
        je      .LBB2_14
        call    fred()
        add     eax, 0
        cmp     eax, 0
        setne   cl
        mov     byte ptr [rbp - 53], cl # 1-byte Spill
.LBB2_14:
        mov     al, byte ptr [rbp - 53] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 60], eax # 4-byte Spill
        call    joe()
        cmp     eax, 0
        mov     cl, 1
        mov     byte ptr [rbp - 61], cl # 1-byte Spill
        jne     .LBB2_16
        call    fred()
        add     eax, 1
        cmp     eax, 0
        setne   cl
        mov     byte ptr [rbp - 61], cl # 1-byte Spill
.LBB2_16:
        mov     al, byte ptr [rbp - 61] # 1-byte Reload
        and     al, 1
        movzx   esi, al
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 68], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 80
        pop     rbp
        ret
.L.str:
        .asciz  ""fred\n""

.L.str.1:
        .asciz  ""joe\n""

.L.str.2:
        .asciz  ""%d\n""

",-Wall
source\00197.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@henry()::fred = internal global i32 4567, align 4, !dbg !0
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1
@fred = internal global i32 1234, align 4, !dbg !10
@joe = internal global i32 0, align 4, !dbg !13

define dso_local void @henry()() #0 !dbg !2 {
  %1 = load i32, i32* @henry()::fred, align 4, !dbg !19
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %1), !dbg !20
  %3 = load i32, i32* @henry()::fred, align 4, !dbg !21
  %4 = add nsw i32 %3, 1, !dbg !21
  store i32 %4, i32* @henry()::fred, align 4, !dbg !21
  ret void, !dbg !22
}

declare dso_local i32 @printf(i8*, ...) #1

define dso_local i32 @main() #2 !dbg !23 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @fred, align 4, !dbg !26
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %2), !dbg !27
  call void @henry()(), !dbg !28
  call void @henry()(), !dbg !29
  call void @henry()(), !dbg !30
  call void @henry()(), !dbg !31
  %4 = load i32, i32* @fred, align 4, !dbg !32
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %4), !dbg !33
  store i32 8901, i32* @fred, align 4, !dbg !34
  store i32 2345, i32* @joe, align 4, !dbg !35
  %6 = load i32, i32* @fred, align 4, !dbg !36
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %6), !dbg !37
  %8 = load i32, i32* @joe, align 4, !dbg !38
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %8), !dbg !39
  ret i32 0, !dbg !40
}

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
henry():                              # @henry()
        push    rbp
        mov     rbp, rsp
        mov     esi, dword ptr [henry()::fred]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     ecx, dword ptr [henry()::fred]
        add     ecx, 1
        mov     dword ptr [henry()::fred], ecx
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        mov     esi, dword ptr [fred]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        call    henry()
        call    henry()
        call    henry()
        call    henry()
        mov     esi, dword ptr [fred]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     dword ptr [fred], 8901
        mov     dword ptr [_ZL3joe], 2345
        mov     esi, dword ptr [fred]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     esi, dword ptr [_ZL3joe]
        movabs  rdi, offset .L.str
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 32
        pop     rbp
        ret
henry()::fred:
        .long   4567                    # 0x11d7

.L.str:
        .asciz  ""%d\n""

fred:
        .long   1234                    # 0x4d2

",-Wall
source\00198.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [6 x i8] c""a=%d\0A\00"", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c""b=%d\0A\00"", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c""c=%d\0A\00"", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c""e=%d\0A\00"", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c""f=%d\0A\00"", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c""g=%d\0A\00"", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c""i=%d\0A\00"", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c""j=%d\0A\00"", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c""k=%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !11 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 0), !dbg !29
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 1), !dbg !30
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 2), !dbg !31
  call void @llvm.dbg.declare(metadata i32* %2, metadata !32, metadata !DIExpression()), !dbg !33
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32 0), !dbg !34
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i32 1), !dbg !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i32 2), !dbg !36
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i32 0), !dbg !37
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i32 1), !dbg !38
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i32 2), !dbg !39
  ret i32 0, !dbg !40
}

declare dso_local i32 @printf(i8*, ...) #1

declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        xor     esi, esi
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.1
        mov     esi, 1
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.2
        mov     esi, 2
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     esi, esi
        movabs  rdi, offset .L.str.3
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.4
        mov     esi, 1
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.5
        mov     esi, 2
        mov     dword ptr [rbp - 28], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     esi, esi
        movabs  rdi, offset .L.str.6
        mov     dword ptr [rbp - 32], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.7
        mov     esi, 1
        mov     dword ptr [rbp - 36], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.8
        mov     esi, 2
        mov     dword ptr [rbp - 40], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 44], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 48
        pop     rbp
        ret
.L.str:
        .asciz  ""a=%d\n""

.L.str.1:
        .asciz  ""b=%d\n""

.L.str.2:
        .asciz  ""c=%d\n""

.L.str.3:
        .asciz  ""e=%d\n""

.L.str.4:
        .asciz  ""f=%d\n""

.L.str.5:
        .asciz  ""g=%d\n""

.L.str.6:
        .asciz  ""i=%d\n""

.L.str.7:
        .asciz  ""j=%d\n""

.L.str.8:
        .asciz  ""k=%d\n""

Standard error:
[1m<source>:11:14: [0m[0;1;35mwarning: [0m[1munused variable 'd' [-Wunused-variable][0m
   enum fred d;
[0;1;32m             ^
[0m[1m<source>:13:29: [0m[0;1;35mwarning: [0m[1munused typedef 'h' [-Wunused-local-typedef][0m
   typedef enum { e, f, g } h;
[0;1;32m                            ^
[0m[1m<source>:14:29: [0m[0;1;35mwarning: [0m[1munused typedef 'm' [-Wunused-local-typedef][0m
   typedef enum { i, j, k } m;
[0;1;32m                            ^
[0m3 warnings generated.
",-Wall
source\00199.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [11 x i8] c""In fred()\0A\00"", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c""At end\0A\00"", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c""In joe()\0A\00"", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c""c = %d\0A\00"", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c""done\0A\00"", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c""In henry()\0A\00"", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c""b = %d\0A\00"", align 1

define dso_local void @fred()() #0 !dbg !7 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)), !dbg !11
  br label %2, !dbg !12

2:
  call void @llvm.dbg.label(metadata !13), !dbg !14
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0)), !dbg !15
  ret void, !dbg !16
}

declare dso_local i32 @printf(i8*, ...) #1

declare void @llvm.dbg.label(metadata) #2

define dso_local void @joe()() #0 !dbg !17 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %1, metadata !18, metadata !DIExpression()), !dbg !20
  store i32 5678, i32* %1, align 4, !dbg !20
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0)), !dbg !21
  call void @llvm.dbg.declare(metadata i32* %2, metadata !22, metadata !DIExpression()), !dbg !24
  store i32 1234, i32* %2, align 4, !dbg !24
  %4 = load i32, i32* %2, align 4, !dbg !25
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i32 %4), !dbg !26
  br label %6, !dbg !27

6:
  call void @llvm.dbg.label(metadata !28), !dbg !29
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0)), !dbg !30
  ret void, !dbg !31
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

define dso_local void @henry()() #0 !dbg !32 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %1, metadata !33, metadata !DIExpression()), !dbg !34
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0)), !dbg !35
  br label %4, !dbg !36

4:
  call void @llvm.dbg.label(metadata !37), !dbg !39
  store i32 1234, i32* %2, align 4, !dbg !40
  %5 = load i32, i32* %2, align 4, !dbg !41
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i32 %5), !dbg !42
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0)), !dbg !43
  ret void, !dbg !44
}

define dso_local i32 @main() #3 !dbg !45 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @fred()(), !dbg !48
  call void @joe()(), !dbg !49
  call void @henry()(), !dbg !50
  ret i32 0, !dbg !51
}

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
fred():                               # @fred()
        push    rbp
        mov     rbp, rsp
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        pop     rbp
        ret
joe():                                # @joe()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 5678
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 8], 1234
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str.3
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.4
        mov     al, 0
        call    printf
        add     rsp, 16
        pop     rbp
        ret
henry():                              # @henry()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        movabs  rdi, offset .L.str.5
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 8], 1234
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str.6
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.4
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        add     rsp, 16
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        call    fred()
        call    joe()
        call    henry()
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""In fred()\n""

.L.str.1:
        .asciz  ""At end\n""

.L.str.2:
        .asciz  ""In joe()\n""

.L.str.3:
        .asciz  ""c = %d\n""

.L.str.4:
        .asciz  ""done\n""

.L.str.5:
        .asciz  ""In henry()\n""

.L.str.6:
        .asciz  ""b = %d\n""

Standard error:
[1m<source>:14:8: [0m[0;1;35mwarning: [0m[1munused variable 'b' [-Wunused-variable][0m
   int b = 5678;
[0;1;32m       ^
[0m[1m<source>:32:8: [0m[0;1;35mwarning: [0m[1munused variable 'a' [-Wunused-variable][0m
   int a;
[0;1;32m       ^
[0m2 warnings generated.
",-Wall
source\00200.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@debug = internal global i32 0, align 4, !dbg !0
@.str = private unnamed_addr constant [15 x i8] c""((short)((1)))\00"", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c""((unsigned short)((1)))\00"", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c""((int)((1)))\00"", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c""((unsigned int)((1)))\00"", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c""((long)((1)))\00"", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c""((unsigned long)((1)))\00"", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c""((long long)((1)))\00"", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c""((unsigned long long)((1)))\00"", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c""((short)((-1)))\00"", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c""((unsigned short)((-1)))\00"", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c""((int)((-1)))\00"", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c""((unsigned int)((-1)))\00"", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c""((long)((-1)))\00"", align 1
@.str.13 = private unnamed_addr constant [24 x i8] c""((unsigned long)((-1)))\00"", align 1
@.str.14 = private unnamed_addr constant [20 x i8] c""((long long)((-1)))\00"", align 1
@.str.15 = private unnamed_addr constant [29 x i8] c""((unsigned long long)((-1)))\00"", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c""%d test(s) failed\0A\00"", align 1
@nfailed = internal global i32 0, align 4, !dbg !8
@.str.17 = private unnamed_addr constant [10 x i8] c""%s %d %d\0A\00"", align 1

define dso_local i32 @main(i32 %0, i8** %1) #0 !dbg !15 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !21, metadata !DIExpression()), !dbg !22
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !23, metadata !DIExpression()), !dbg !24
  %6 = load i32, i32* %4, align 4, !dbg !25
  %7 = icmp sgt i32 %6, 1, !dbg !26
  %8 = zext i1 %7 to i32, !dbg !25
  store i32 %8, i32* @debug, align 4, !dbg !27
  br label %9, !dbg !28

9:
  br label %10, !dbg !29

10:
  br label %11, !dbg !31

11:
  br label %12, !dbg !33

12:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 -4, i32 -4), !dbg !35
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 -4, i32 -4), !dbg !35
  br label %13, !dbg !35

13:
  br label %14, !dbg !33

14:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 -4, i32 -4), !dbg !37
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 -4, i32 -4), !dbg !37
  br label %15, !dbg !37

15:
  br label %16, !dbg !33

16:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 -4, i32 -4), !dbg !39
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 -4, i32 -4), !dbg !39
  br label %17, !dbg !39

17:
  br label %18, !dbg !33

18:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 -4, i32 -4), !dbg !41
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 -4, i32 -4), !dbg !41
  br label %19, !dbg !41

19:
  br label %20, !dbg !33

20:
  br label %21, !dbg !31

21:
  br label %22, !dbg !43

22:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i32 -4, i32 -4), !dbg !45
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i32 -4, i32 -4), !dbg !45
  br label %23, !dbg !45

23:
  br label %24, !dbg !43

24:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i32 -4, i32 -4), !dbg !47
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i32 -4, i32 -4), !dbg !47
  br label %25, !dbg !47

25:
  br label %26, !dbg !43

26:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i32 -4, i32 -4), !dbg !49
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i32 -4, i32 -4), !dbg !49
  br label %27, !dbg !49

27:
  br label %28, !dbg !43

28:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i32 -4, i32 -4), !dbg !51
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0), i32 -4, i32 -4), !dbg !51
  br label %29, !dbg !51

29:
  br label %30, !dbg !43

30:
  br label %31, !dbg !31

31:
  br label %32, !dbg !29

32:
  br label %33, !dbg !53

33:
  br label %34, !dbg !55

34:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 -4, i32 -4), !dbg !57
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 -4, i32 -4), !dbg !57
  br label %35, !dbg !57

35:
  br label %36, !dbg !55

36:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 -4, i32 -4), !dbg !59
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 -4, i32 -4), !dbg !59
  br label %37, !dbg !59

37:
  br label %38, !dbg !55

38:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 -4, i32 -4), !dbg !61
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 -4, i32 -4), !dbg !61
  br label %39, !dbg !61

39:
  br label %40, !dbg !55

40:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 -4, i32 -4), !dbg !63
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 -4, i32 -4), !dbg !63
  br label %41, !dbg !63

41:
  br label %42, !dbg !55

42:
  br label %43, !dbg !53

43:
  br label %44, !dbg !65

44:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 4, i32 4), !dbg !67
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 4, i32 4), !dbg !67
  br label %45, !dbg !67

45:
  br label %46, !dbg !65

46:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 4, i32 4), !dbg !69
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 4, i32 4), !dbg !69
  br label %47, !dbg !69

47:
  br label %48, !dbg !65

48:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 4, i32 4), !dbg !71
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 4, i32 4), !dbg !71
  br label %49, !dbg !71

49:
  br label %50, !dbg !65

50:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 4, i32 4), !dbg !73
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i32 4, i32 4), !dbg !73
  br label %51, !dbg !73

51:
  br label %52, !dbg !65

52:
  br label %53, !dbg !53

53:
  br label %54, !dbg !29

54:
  br label %55, !dbg !75

55:
  br label %56, !dbg !77

56:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 -8, i32 -8), !dbg !79
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 -8, i32 -8), !dbg !79
  br label %57, !dbg !79

57:
  br label %58, !dbg !77

58:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 -8, i32 -8), !dbg !81
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 -8, i32 -8), !dbg !81
  br label %59, !dbg !81

59:
  br label %60, !dbg !77

60:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 -8, i32 -8), !dbg !83
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 -8, i32 -8), !dbg !83
  br label %61, !dbg !83

61:
  br label %62, !dbg !77

62:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 -8, i32 -8), !dbg !85
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 -8, i32 -8), !dbg !85
  br label %63, !dbg !85

63:
  br label %64, !dbg !77

64:
  br label %65, !dbg !75

65:
  br label %66, !dbg !87

66:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 8, i32 8), !dbg !89
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 8, i32 8), !dbg !89
  br label %67, !dbg !89

67:
  br label %68, !dbg !87

68:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 8, i32 8), !dbg !91
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 8, i32 8), !dbg !91
  br label %69, !dbg !91

69:
  br label %70, !dbg !87

70:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 8, i32 8), !dbg !93
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 8, i32 8), !dbg !93
  br label %71, !dbg !93

71:
  br label %72, !dbg !87

72:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 8, i32 8), !dbg !95
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i32 8, i32 8), !dbg !95
  br label %73, !dbg !95

73:
  br label %74, !dbg !87

74:
  br label %75, !dbg !75

75:
  br label %76, !dbg !29

76:
  br label %77, !dbg !97

77:
  br label %78, !dbg !99

78:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 -8, i32 -8), !dbg !101
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 -8, i32 -8), !dbg !101
  br label %79, !dbg !101

79:
  br label %80, !dbg !99

80:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 -8, i32 -8), !dbg !103
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 -8, i32 -8), !dbg !103
  br label %81, !dbg !103

81:
  br label %82, !dbg !99

82:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 -8, i32 -8), !dbg !105
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 -8, i32 -8), !dbg !105
  br label %83, !dbg !105

83:
  br label %84, !dbg !99

84:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 -8, i32 -8), !dbg !107
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 -8, i32 -8), !dbg !107
  br label %85, !dbg !107

85:
  br label %86, !dbg !99

86:
  br label %87, !dbg !97

87:
  br label %88, !dbg !109

88:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 8, i32 8), !dbg !111
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 8, i32 8), !dbg !111
  br label %89, !dbg !111

89:
  br label %90, !dbg !109

90:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 8, i32 8), !dbg !113
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 8, i32 8), !dbg !113
  br label %91, !dbg !113

91:
  br label %92, !dbg !109

92:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 8, i32 8), !dbg !115
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 8, i32 8), !dbg !115
  br label %93, !dbg !115

93:
  br label %94, !dbg !109

94:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 8, i32 8), !dbg !117
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 8, i32 8), !dbg !117
  br label %95, !dbg !117

95:
  br label %96, !dbg !109

96:
  br label %97, !dbg !97

97:
  br label %98, !dbg !29

98:
  br label %99, !dbg !119

99:
  br label %100, !dbg !120

100:
  br label %101, !dbg !122

101:
  br label %102, !dbg !124

102:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 -4, i32 -4), !dbg !126
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 -4, i32 -4), !dbg !126
  br label %103, !dbg !126

103:
  br label %104, !dbg !124

104:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 -4, i32 -4), !dbg !128
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 -4, i32 -4), !dbg !128
  br label %105, !dbg !128

105:
  br label %106, !dbg !124

106:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 -4, i32 -4), !dbg !130
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 -4, i32 -4), !dbg !130
  br label %107, !dbg !130

107:
  br label %108, !dbg !124

108:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 -4, i32 -4), !dbg !132
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 -4, i32 -4), !dbg !132
  br label %109, !dbg !132

109:
  br label %110, !dbg !124

110:
  br label %111, !dbg !122

111:
  br label %112, !dbg !134

112:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 -4, i32 -4), !dbg !136
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 -4, i32 -4), !dbg !136
  br label %113, !dbg !136

113:
  br label %114, !dbg !134

114:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 -4, i32 -4), !dbg !138
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 -4, i32 -4), !dbg !138
  br label %115, !dbg !138

115:
  br label %116, !dbg !134

116:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 -4, i32 -4), !dbg !140
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 -4, i32 -4), !dbg !140
  br label %117, !dbg !140

117:
  br label %118, !dbg !134

118:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 -4, i32 -4), !dbg !142
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 -4, i32 -4), !dbg !142
  br label %119, !dbg !142

119:
  br label %120, !dbg !134

120:
  br label %121, !dbg !122

121:
  br label %122, !dbg !120

122:
  br label %123, !dbg !144

123:
  br label %124, !dbg !146

124:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i32 -4, i32 -4), !dbg !148
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i32 -4, i32 -4), !dbg !148
  br label %125, !dbg !148

125:
  br label %126, !dbg !146

126:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i32 -4, i32 -4), !dbg !150
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i32 -4, i32 -4), !dbg !150
  br label %127, !dbg !150

127:
  br label %128, !dbg !146

128:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i32 -4, i32 -4), !dbg !152
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i32 -4, i32 -4), !dbg !152
  br label %129, !dbg !152

129:
  br label %130, !dbg !146

130:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i32 -4, i32 -4), !dbg !154
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i32 -4, i32 -4), !dbg !154
  br label %131, !dbg !154

131:
  br label %132, !dbg !146

132:
  br label %133, !dbg !144

133:
  br label %134, !dbg !156

134:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 4, i32 4), !dbg !158
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 4, i32 4), !dbg !158
  br label %135, !dbg !158

135:
  br label %136, !dbg !156

136:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 4, i32 4), !dbg !160
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 4, i32 4), !dbg !160
  br label %137, !dbg !160

137:
  br label %138, !dbg !156

138:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 4, i32 4), !dbg !162
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 4, i32 4), !dbg !162
  br label %139, !dbg !162

139:
  br label %140, !dbg !156

140:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 4, i32 4), !dbg !164
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i32 4, i32 4), !dbg !164
  br label %141, !dbg !164

141:
  br label %142, !dbg !156

142:
  br label %143, !dbg !144

143:
  br label %144, !dbg !120

144:
  br label %145, !dbg !166

145:
  br label %146, !dbg !168

146:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i32 -8, i32 -8), !dbg !170
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i32 -8, i32 -8), !dbg !170
  br label %147, !dbg !170

147:
  br label %148, !dbg !168

148:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i32 -8, i32 -8), !dbg !172
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i32 -8, i32 -8), !dbg !172
  br label %149, !dbg !172

149:
  br label %150, !dbg !168

150:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i32 -8, i32 -8), !dbg !174
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i32 -8, i32 -8), !dbg !174
  br label %151, !dbg !174

151:
  br label %152, !dbg !168

152:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i32 -8, i32 -8), !dbg !176
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i32 -8, i32 -8), !dbg !176
  br label %153, !dbg !176

153:
  br label %154, !dbg !168

154:
  br label %155, !dbg !166

155:
  br label %156, !dbg !178

156:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i32 8, i32 8), !dbg !180
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i32 8, i32 8), !dbg !180
  br label %157, !dbg !180

157:
  br label %158, !dbg !178

158:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i32 8, i32 8), !dbg !182
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i32 8, i32 8), !dbg !182
  br label %159, !dbg !182

159:
  br label %160, !dbg !178

160:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i32 8, i32 8), !dbg !184
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i32 8, i32 8), !dbg !184
  br label %161, !dbg !184

161:
  br label %162, !dbg !178

162:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i32 8, i32 8), !dbg !186
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i64 0, i64 0), i32 8, i32 8), !dbg !186
  br label %163, !dbg !186

163:
  br label %164, !dbg !178

164:
  br label %165, !dbg !166

165:
  br label %166, !dbg !120

166:
  br label %167, !dbg !188

167:
  br label %168, !dbg !190

168:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i32 -8, i32 -8), !dbg !192
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i32 -8, i32 -8), !dbg !192
  br label %169, !dbg !192

169:
  br label %170, !dbg !190

170:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i32 -8, i32 -8), !dbg !194
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i32 -8, i32 -8), !dbg !194
  br label %171, !dbg !194

171:
  br label %172, !dbg !190

172:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i32 -8, i32 -8), !dbg !196
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i32 -8, i32 -8), !dbg !196
  br label %173, !dbg !196

173:
  br label %174, !dbg !190

174:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i32 -8, i32 -8), !dbg !198
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i32 -8, i32 -8), !dbg !198
  br label %175, !dbg !198

175:
  br label %176, !dbg !190

176:
  br label %177, !dbg !188

177:
  br label %178, !dbg !200

178:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 8, i32 8), !dbg !202
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 8, i32 8), !dbg !202
  br label %179, !dbg !202

179:
  br label %180, !dbg !200

180:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 8, i32 8), !dbg !204
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 8, i32 8), !dbg !204
  br label %181, !dbg !204

181:
  br label %182, !dbg !200

182:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 8, i32 8), !dbg !206
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 8, i32 8), !dbg !206
  br label %183, !dbg !206

183:
  br label %184, !dbg !200

184:
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 8, i32 8), !dbg !208
  call void @check(char const*, int, int)(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 8, i32 8), !dbg !208
  br label %185, !dbg !208

185:
  br label %186, !dbg !200

186:
  br label %187, !dbg !188

187:
  br label %188, !dbg !120

188:
  %189 = load i32, i32* @nfailed, align 4, !dbg !210
  %190 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0), i32 %189), !dbg !211
  %191 = load i32, i32* @nfailed, align 4, !dbg !212
  %192 = icmp ne i32 %191, 0, !dbg !213
  %193 = zext i1 %192 to i32, !dbg !212
  ret i32 %193, !dbg !214
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

define internal void @check(char const*, int, int)(i8* %0, i32 %1, i32 %2) #2 !dbg !215 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !220, metadata !DIExpression()), !dbg !221
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !222, metadata !DIExpression()), !dbg !223
  store i32 %2, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !224, metadata !DIExpression()), !dbg !225
  call void @llvm.dbg.declare(metadata i32* %7, metadata !226, metadata !DIExpression()), !dbg !227
  %8 = load i32, i32* %5, align 4, !dbg !228
  %9 = load i32, i32* %6, align 4, !dbg !229
  %10 = icmp ne i32 %8, %9, !dbg !230
  %11 = zext i1 %10 to i32, !dbg !228
  store i32 %11, i32* %7, align 4, !dbg !227
  %12 = load i32, i32* @debug, align 4, !dbg !231
  %13 = icmp ne i32 %12, 0, !dbg !231
  br i1 %13, label %17, label %14, !dbg !233

14:
  %15 = load i32, i32* %7, align 4, !dbg !234
  %16 = icmp ne i32 %15, 0, !dbg !234
  br i1 %16, label %17, label %22, !dbg !235

17:
  %18 = load i8*, i8** %4, align 8, !dbg !236
  %19 = load i32, i32* %5, align 4, !dbg !237
  %20 = load i32, i32* %6, align 4, !dbg !238
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i64 0, i64 0), i8* %18, i32 %19, i32 %20), !dbg !239
  br label %22, !dbg !239

22:
  %23 = load i32, i32* %7, align 4, !dbg !240
  %24 = load i32, i32* @nfailed, align 4, !dbg !241
  %25 = add nsw i32 %24, %23, !dbg !241
  store i32 %25, i32* @nfailed, align 4, !dbg !241
  ret void, !dbg !242
}

declare dso_local i32 @printf(i8*, ...) #3

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m32 warnings generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], edi
        mov     qword ptr [rbp - 16], rsi
        cmp     dword ptr [rbp - 8], 1
        setg    al
        and     al, 1
        movzx   ecx, al
        mov     dword ptr [_ZL5debug], ecx
        jmp     .LBB0_2
.LBB0_2:
        jmp     .LBB0_3
.LBB0_3:
        jmp     .LBB0_4
.LBB0_4:
        movabs  rdi, offset .L.str
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_6
.LBB0_6:
        movabs  rdi, offset .L.str
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_8
.LBB0_8:
        movabs  rdi, offset .L.str
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_10
.LBB0_10:
        movabs  rdi, offset .L.str
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_12
.LBB0_12:
        jmp     .LBB0_13
.LBB0_13:
        jmp     .LBB0_14
.LBB0_14:
        movabs  rdi, offset .L.str.1
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.1
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_16
.LBB0_16:
        movabs  rdi, offset .L.str.1
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.1
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_18
.LBB0_18:
        movabs  rdi, offset .L.str.1
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.1
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_20
.LBB0_20:
        movabs  rdi, offset .L.str.1
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.1
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_22
.LBB0_22:
        jmp     .LBB0_23
.LBB0_23:
        jmp     .LBB0_24
.LBB0_24:
        jmp     .LBB0_25
.LBB0_25:
        jmp     .LBB0_26
.LBB0_26:
        movabs  rdi, offset .L.str.2
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.2
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_28
.LBB0_28:
        movabs  rdi, offset .L.str.2
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.2
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_30
.LBB0_30:
        movabs  rdi, offset .L.str.2
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.2
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_32
.LBB0_32:
        movabs  rdi, offset .L.str.2
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.2
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_34
.LBB0_34:
        jmp     .LBB0_35
.LBB0_35:
        jmp     .LBB0_36
.LBB0_36:
        movabs  rdi, offset .L.str.3
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.3
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_38
.LBB0_38:
        movabs  rdi, offset .L.str.3
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.3
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_40
.LBB0_40:
        movabs  rdi, offset .L.str.3
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.3
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_42
.LBB0_42:
        movabs  rdi, offset .L.str.3
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.3
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_44
.LBB0_44:
        jmp     .LBB0_45
.LBB0_45:
        jmp     .LBB0_46
.LBB0_46:
        jmp     .LBB0_47
.LBB0_47:
        jmp     .LBB0_48
.LBB0_48:
        movabs  rdi, offset .L.str.4
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.4
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_50
.LBB0_50:
        movabs  rdi, offset .L.str.4
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.4
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_52
.LBB0_52:
        movabs  rdi, offset .L.str.4
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.4
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_54
.LBB0_54:
        movabs  rdi, offset .L.str.4
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.4
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_56
.LBB0_56:
        jmp     .LBB0_57
.LBB0_57:
        jmp     .LBB0_58
.LBB0_58:
        movabs  rdi, offset .L.str.5
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.5
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_60
.LBB0_60:
        movabs  rdi, offset .L.str.5
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.5
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_62
.LBB0_62:
        movabs  rdi, offset .L.str.5
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.5
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_64
.LBB0_64:
        movabs  rdi, offset .L.str.5
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.5
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_66
.LBB0_66:
        jmp     .LBB0_67
.LBB0_67:
        jmp     .LBB0_68
.LBB0_68:
        jmp     .LBB0_69
.LBB0_69:
        jmp     .LBB0_70
.LBB0_70:
        movabs  rdi, offset .L.str.6
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.6
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_72
.LBB0_72:
        movabs  rdi, offset .L.str.6
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.6
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_74
.LBB0_74:
        movabs  rdi, offset .L.str.6
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.6
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_76
.LBB0_76:
        movabs  rdi, offset .L.str.6
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.6
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_78
.LBB0_78:
        jmp     .LBB0_79
.LBB0_79:
        jmp     .LBB0_80
.LBB0_80:
        movabs  rdi, offset .L.str.7
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.7
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_82
.LBB0_82:
        movabs  rdi, offset .L.str.7
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.7
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_84
.LBB0_84:
        movabs  rdi, offset .L.str.7
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.7
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_86
.LBB0_86:
        movabs  rdi, offset .L.str.7
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.7
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_88
.LBB0_88:
        jmp     .LBB0_89
.LBB0_89:
        jmp     .LBB0_90
.LBB0_90:
        jmp     .LBB0_91
.LBB0_91:
        jmp     .LBB0_92
.LBB0_92:
        jmp     .LBB0_93
.LBB0_93:
        jmp     .LBB0_94
.LBB0_94:
        movabs  rdi, offset .L.str.8
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.8
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_96
.LBB0_96:
        movabs  rdi, offset .L.str.8
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.8
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_98
.LBB0_98:
        movabs  rdi, offset .L.str.8
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.8
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_100
.LBB0_100:
        movabs  rdi, offset .L.str.8
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.8
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_102
.LBB0_102:
        jmp     .LBB0_103
.LBB0_103:
        jmp     .LBB0_104
.LBB0_104:
        movabs  rdi, offset .L.str.9
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.9
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_106
.LBB0_106:
        movabs  rdi, offset .L.str.9
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.9
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_108
.LBB0_108:
        movabs  rdi, offset .L.str.9
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.9
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_110
.LBB0_110:
        movabs  rdi, offset .L.str.9
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.9
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_112
.LBB0_112:
        jmp     .LBB0_113
.LBB0_113:
        jmp     .LBB0_114
.LBB0_114:
        jmp     .LBB0_115
.LBB0_115:
        jmp     .LBB0_116
.LBB0_116:
        movabs  rdi, offset .L.str.10
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.10
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_118
.LBB0_118:
        movabs  rdi, offset .L.str.10
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.10
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_120
.LBB0_120:
        movabs  rdi, offset .L.str.10
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.10
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_122
.LBB0_122:
        movabs  rdi, offset .L.str.10
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.10
        mov     eax, 4294967292
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_124
.LBB0_124:
        jmp     .LBB0_125
.LBB0_125:
        jmp     .LBB0_126
.LBB0_126:
        movabs  rdi, offset .L.str.11
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.11
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_128
.LBB0_128:
        movabs  rdi, offset .L.str.11
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.11
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_130
.LBB0_130:
        movabs  rdi, offset .L.str.11
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.11
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_132
.LBB0_132:
        movabs  rdi, offset .L.str.11
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.11
        mov     eax, 4
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_134
.LBB0_134:
        jmp     .LBB0_135
.LBB0_135:
        jmp     .LBB0_136
.LBB0_136:
        jmp     .LBB0_137
.LBB0_137:
        jmp     .LBB0_138
.LBB0_138:
        movabs  rdi, offset .L.str.12
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.12
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_140
.LBB0_140:
        movabs  rdi, offset .L.str.12
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.12
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_142
.LBB0_142:
        movabs  rdi, offset .L.str.12
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.12
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_144
.LBB0_144:
        movabs  rdi, offset .L.str.12
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.12
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_146
.LBB0_146:
        jmp     .LBB0_147
.LBB0_147:
        jmp     .LBB0_148
.LBB0_148:
        movabs  rdi, offset .L.str.13
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.13
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_150
.LBB0_150:
        movabs  rdi, offset .L.str.13
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.13
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_152
.LBB0_152:
        movabs  rdi, offset .L.str.13
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.13
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_154
.LBB0_154:
        movabs  rdi, offset .L.str.13
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.13
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_156
.LBB0_156:
        jmp     .LBB0_157
.LBB0_157:
        jmp     .LBB0_158
.LBB0_158:
        jmp     .LBB0_159
.LBB0_159:
        jmp     .LBB0_160
.LBB0_160:
        movabs  rdi, offset .L.str.14
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.14
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_162
.LBB0_162:
        movabs  rdi, offset .L.str.14
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.14
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_164
.LBB0_164:
        movabs  rdi, offset .L.str.14
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.14
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_166
.LBB0_166:
        movabs  rdi, offset .L.str.14
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.14
        mov     eax, 4294967288
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_168
.LBB0_168:
        jmp     .LBB0_169
.LBB0_169:
        jmp     .LBB0_170
.LBB0_170:
        movabs  rdi, offset .L.str.15
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.15
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_172
.LBB0_172:
        movabs  rdi, offset .L.str.15
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.15
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_174
.LBB0_174:
        movabs  rdi, offset .L.str.15
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.15
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_176
.LBB0_176:
        movabs  rdi, offset .L.str.15
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        movabs  rdi, offset .L.str.15
        mov     eax, 8
        mov     esi, eax
        mov     edx, eax
        call    check(char const*, int, int)
        jmp     .LBB0_178
.LBB0_178:
        jmp     .LBB0_179
.LBB0_179:
        jmp     .LBB0_180
.LBB0_180:
        mov     esi, dword ptr [_ZL7nfailed]
        movabs  rdi, offset .L.str.16
        mov     al, 0
        call    printf
        cmp     dword ptr [_ZL7nfailed], 0
        setne   cl
        and     cl, 1
        movzx   edx, cl
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     eax, edx
        add     rsp, 32
        pop     rbp
        ret
check(char const*, int, int):                         # @check(char const*, int, int)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword ptr [rbp - 8], rdi
        mov     dword ptr [rbp - 12], esi
        mov     dword ptr [rbp - 16], edx
        mov     eax, dword ptr [rbp - 12]
        cmp     eax, dword ptr [rbp - 16]
        setne   cl
        and     cl, 1
        movzx   eax, cl
        mov     dword ptr [rbp - 20], eax
        cmp     dword ptr [_ZL5debug], 0
        jne     .LBB1_2
        cmp     dword ptr [rbp - 20], 0
        je      .LBB1_3
.LBB1_2:
        mov     rsi, qword ptr [rbp - 8]
        mov     edx, dword ptr [rbp - 12]
        mov     ecx, dword ptr [rbp - 16]
        movabs  rdi, offset .L.str.17
        mov     al, 0
        call    printf
.LBB1_3:
        mov     eax, dword ptr [rbp - 20]
        add     eax, dword ptr [_ZL7nfailed]
        mov     dword ptr [_ZL7nfailed], eax
        add     rsp, 32
        pop     rbp
        ret
.L.str:
        .asciz  ""((short)((1)))""

.L.str.1:
        .asciz  ""((unsigned short)((1)))""

.L.str.2:
        .asciz  ""((int)((1)))""

.L.str.3:
        .asciz  ""((unsigned int)((1)))""

.L.str.4:
        .asciz  ""((long)((1)))""

.L.str.5:
        .asciz  ""((unsigned long)((1)))""

.L.str.6:
        .asciz  ""((long long)((1)))""

.L.str.7:
        .asciz  ""((unsigned long long)((1)))""

.L.str.8:
        .asciz  ""((short)((-1)))""

.L.str.9:
        .asciz  ""((unsigned short)((-1)))""

.L.str.10:
        .asciz  ""((int)((-1)))""

.L.str.11:
        .asciz  ""((unsigned int)((-1)))""

.L.str.12:
        .asciz  ""((long)((-1)))""

.L.str.13:
        .asciz  ""((unsigned long)((-1)))""

.L.str.14:
        .asciz  ""((long long)((-1)))""

.L.str.15:
        .asciz  ""((unsigned long long)((-1)))""

.L.str.16:
        .asciz  ""%d test(s) failed\n""

.L.str.17:
        .asciz  ""%s %d %d\n""

Standard error:
[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:28:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:29:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:30:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:18:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),short);          \
[0;1;32m      ^~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:19:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),int);            \
[0;1;32m      ^~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:20:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long);           \
[0;1;32m      ^~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                        ^~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m[1m<source>:49:3: [0m[0;1;35mwarning: [0m[1mshifting a negative signed value is undefined [-Wshift-negative-value][0m
  TEST4(-1);
[0;1;32m  ^~~~~~~~~
[0m[1m<source>:31:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST4'[0m
      TEST3((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:25: [0m[0;1;30mnote: [0mexpanded from macro 'TEST3'[0m
#define TEST3(X,T) do { TEST2((T)(X)); TEST2((unsigned T)(X)); } while (0)
[0;1;32m                        ^~~~~~~~~~~~~
[0m[1m<source>:21:7: [0m[0;1;30mnote: [0mexpanded from macro 'TEST2'[0m
      TEST1((X),long long);      \
[0;1;32m      ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:14:37: [0m[0;1;30mnote: [0mexpanded from macro 'TEST1'[0m
#define TEST1(X,T) do { CHECK(X,T); CHECK(X,unsigned T); } while (0)
[0;1;32m                                    ^~~~~~~~~~~~~~~~~~~
[0m[1m<source>:13:50: [0m[0;1;30mnote: [0mexpanded from macro 'CHECK'[0m
#define CHECK(X,T) check(#X, PTYPE(X), PTYPE((X) << (T) 1))
[0;1;32m                                       ~~~~~~~~~~^~~~~~~~~
[0m[1m<source>:12:20: [0m[0;1;30mnote: [0mexpanded from macro 'PTYPE'[0m
#define PTYPE(M) ((M) < 0 || -(M) < 0 ? -1 : 1) * (int) sizeof((M)+0)
[0;1;32m                   ^
[0m32 warnings generated.
",-Wall
source\00201.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  store i32 42, i32* %2, align 4, !dbg !13
  %3 = load i32, i32* %2, align 4, !dbg !14
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3), !dbg !15
  ret i32 0, !dbg !16
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 42
        mov     esi, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""%d\n""

",-Wall
source\00202.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [18 x i8] c""jim: %d, bob: %d\0A\00"", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c""jim: %d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata i32* %3, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 21, i32* %3, align 4, !dbg !15
  %4 = load i32, i32* %3, align 4, !dbg !16
  store i32 %4, i32* %2, align 4, !dbg !17
  %5 = load i32, i32* %2, align 4, !dbg !18
  %6 = mul nsw i32 %5, 2, !dbg !18
  store i32 %6, i32* %2, align 4, !dbg !18
  %7 = load i32, i32* %3, align 4, !dbg !19
  %8 = load i32, i32* %2, align 4, !dbg !20
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 %7, i32 %8), !dbg !21
  store i32 63, i32* %3, align 4, !dbg !22
  %10 = load i32, i32* %3, align 4, !dbg !23
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 %10), !dbg !24
  ret i32 0, !dbg !25
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 12], 21
        mov     eax, dword ptr [rbp - 12]
        mov     dword ptr [rbp - 8], eax
        mov     eax, dword ptr [rbp - 8]
        shl     eax, 1
        mov     dword ptr [rbp - 8], eax
        mov     esi, dword ptr [rbp - 12]
        mov     edx, dword ptr [rbp - 8]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 12], 63
        mov     esi, dword ptr [rbp - 12]
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 32
        pop     rbp
        ret
.L.str:
        .asciz  ""jim: %d, bob: %d\n""

.L.str.1:
        .asciz  ""jim: %d\n""

",-Wall
source\00203.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [24 x i8] c""Error: 0 < -2147483648\0A\00"", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c""Error: 2147483647 < 0\0A\00"", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c""long long constant test ok.\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i64* %2, metadata !12, metadata !DIExpression()), !dbg !14
  store i64 0, i64* %2, align 8, !dbg !14
  %3 = load i64, i64* %2, align 8, !dbg !15
  %4 = icmp slt i64 %3, -2147483648, !dbg !17
  br i1 %4, label %5, label %7, !dbg !18

5:
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0)), !dbg !19
  store i32 1, i32* %1, align 4, !dbg !21
  br label %16, !dbg !21

7:
  %8 = load i64, i64* %2, align 8, !dbg !22
  %9 = icmp slt i64 2147483647, %8, !dbg !24
  br i1 %9, label %10, label %12, !dbg !25

10:
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)), !dbg !26
  store i32 2, i32* %1, align 4, !dbg !28
  br label %16, !dbg !28

12:
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0)), !dbg !29
  br label %14

14:
  br label %15

15:
  store i32 0, i32* %1, align 4, !dbg !30
  br label %16, !dbg !30

16:
  %17 = load i32, i32* %1, align 4, !dbg !31
  ret i32 %17, !dbg !31
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     qword ptr [rbp - 16], 0
        cmp     qword ptr [rbp - 16], -2147483648
        jge     .LBB0_2
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 4], 1
        jmp     .LBB0_7
.LBB0_2:
        mov     eax, 2147483647
        cmp     rax, qword ptr [rbp - 16]
        jge     .LBB0_4
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        mov     dword ptr [rbp - 4], 2
        jmp     .LBB0_7
.LBB0_4:
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf
        jmp     .LBB0_6
.LBB0_6:
        mov     dword ptr [rbp - 4], 0
.LBB0_7:
        mov     eax, dword ptr [rbp - 4]
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""Error: 0 < -2147483648\n""

.L.str.1:
        .asciz  ""Error: 2147483647 < 0\n""

.L.str.2:
        .asciz  ""long long constant test ok.\n""

",-Wall
source\00204.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:8:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s1 { char x[1]; } s1 = { ""0"" };
[0;1;32m                                ^~~
[0m[1m<source>:9:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s2 { char x[2]; } s2 = { ""12"" };
[0;1;32m                                ^~~~
[0m[1m<source>:10:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s3 { char x[3]; } s3 = { ""345"" };
[0;1;32m                                ^~~~~
[0m[1m<source>:11:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s4 { char x[4]; } s4 = { ""6789"" };
[0;1;32m                                ^~~~~~
[0m[1m<source>:12:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s5 { char x[5]; } s5 = { ""abcde"" };
[0;1;32m                                ^~~~~~~
[0m[1m<source>:13:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s6 { char x[6]; } s6 = { ""fghijk"" };
[0;1;32m                                ^~~~~~~~
[0m[1m<source>:14:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s7 { char x[7]; } s7 = { ""lmnopqr"" };
[0;1;32m                                ^~~~~~~~~
[0m[1m<source>:15:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s8 { char x[8]; } s8 = { ""stuvwxyz"" };
[0;1;32m                                ^~~~~~~~~~
[0m[1m<source>:16:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s9 { char x[9]; } s9 = { ""ABCDEFGHI"" };
[0;1;32m                                ^~~~~~~~~~~
[0m[1m<source>:17:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s10 { char x[10]; } s10 = { ""JKLMNOPQRS"" };
[0;1;32m                                   ^~~~~~~~~~~~
[0m[1m<source>:18:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s11 { char x[11]; } s11 = { ""TUVWXYZ0123"" };
[0;1;32m                                   ^~~~~~~~~~~~~
[0m[1m<source>:19:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s12 { char x[12]; } s12 = { ""456789abcdef"" };
[0;1;32m                                   ^~~~~~~~~~~~~~
[0m[1m<source>:20:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s13 { char x[13]; } s13 = { ""ghijklmnopqrs"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~
[0m[1m<source>:21:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s14 { char x[14]; } s14 = { ""tuvwxyzABCDEFG"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~~
[0m[1m<source>:22:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s15 { char x[15]; } s15 = { ""HIJKLMNOPQRSTUV"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~~~
[0m[1m<source>:23:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s16 { char x[16]; } s16 = { ""WXYZ0123456789ab"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s17 { char x[17]; } s17 = { ""cdefghijklmnopqrs"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~~~~~
[0m17 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:8:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s1 { char x[1]; } s1 = { ""0"" };
[0;1;32m                                ^~~
[0m[1m<source>:9:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s2 { char x[2]; } s2 = { ""12"" };
[0;1;32m                                ^~~~
[0m[1m<source>:10:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s3 { char x[3]; } s3 = { ""345"" };
[0;1;32m                                ^~~~~
[0m[1m<source>:11:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s4 { char x[4]; } s4 = { ""6789"" };
[0;1;32m                                ^~~~~~
[0m[1m<source>:12:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s5 { char x[5]; } s5 = { ""abcde"" };
[0;1;32m                                ^~~~~~~
[0m[1m<source>:13:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s6 { char x[6]; } s6 = { ""fghijk"" };
[0;1;32m                                ^~~~~~~~
[0m[1m<source>:14:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s7 { char x[7]; } s7 = { ""lmnopqr"" };
[0;1;32m                                ^~~~~~~~~
[0m[1m<source>:15:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s8 { char x[8]; } s8 = { ""stuvwxyz"" };
[0;1;32m                                ^~~~~~~~~~
[0m[1m<source>:16:33: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s9 { char x[9]; } s9 = { ""ABCDEFGHI"" };
[0;1;32m                                ^~~~~~~~~~~
[0m[1m<source>:17:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s10 { char x[10]; } s10 = { ""JKLMNOPQRS"" };
[0;1;32m                                   ^~~~~~~~~~~~
[0m[1m<source>:18:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s11 { char x[11]; } s11 = { ""TUVWXYZ0123"" };
[0;1;32m                                   ^~~~~~~~~~~~~
[0m[1m<source>:19:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s12 { char x[12]; } s12 = { ""456789abcdef"" };
[0;1;32m                                   ^~~~~~~~~~~~~~
[0m[1m<source>:20:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s13 { char x[13]; } s13 = { ""ghijklmnopqrs"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~
[0m[1m<source>:21:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s14 { char x[14]; } s14 = { ""tuvwxyzABCDEFG"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~~
[0m[1m<source>:22:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s15 { char x[15]; } s15 = { ""HIJKLMNOPQRSTUV"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~~~
[0m[1m<source>:23:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s16 { char x[16]; } s16 = { ""WXYZ0123456789ab"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~~~~
[0m[1m<source>:24:36: [0m[0;1;31merror: [0m[1minitializer-string for char array is too long[0m
struct s17 { char x[17]; } s17 = { ""cdefghijklmnopqrs"" };
[0;1;32m                                   ^~~~~~~~~~~~~~~~~~~
[0m17 errors generated.
",-Wall
source\00205.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.PT = type { [4 x i64], i64, i64, i64 }

@cases = dso_local global [9 x %struct.PT] [%struct.PT { [4 x i64] [i64 73400320, i64 262144, i64 805567999, i64 -1], i64 1, i64 2, i64 1 }, %struct.PT { [4 x i64] [i64 879754751, i64 262144, i64 262144, i64 805567999], i64 2, i64 3, i64 2 }, %struct.PT { [4 x i64] [i64 879754751, i64 805567999, i64 262144, i64 805567999], i64 1, i64 3, i64 2 }, %struct.PT { [4 x i64] [i64 879754751, i64 805830143, i64 524288, i64 -1], i64 1, i64 2, i64 1 }, %struct.PT { [4 x i64] [i64 879754751, i64 805830143, i64 1048576, i64 805830143], i64 1, i64 3, i64 1 }, %struct.PT { [4 x i64] [i64 879754751, i64 805830143, i64 262144, i64 262144], i64 1, i64 3, i64 1 }, %struct.PT { [4 x i64] [i64 73400320, i64 807403007, i64 807403007, i64 -1], i64 1, i64 2, i64 1 }, %struct.PT { [4 x i64] [i64 839122431, i64 2097152, i64 807403007, i64 -1], i64 0, i64 2, i64 1 }, %struct.PT { [4 x i64] [i64 67108864, i64 807403007, i64 134217728, i64 -1], i64 0, i64 2, i64 0 }], align 16, !dbg !0
@.str = private unnamed_addr constant [21 x i8] c""cases[%d].c[%d]=%ld\0A\00"", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c""cases[%d].b=%ld\0A\00"", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c""cases[%d].e=%ld\0A\00"", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c""cases[%d].k=%ld\0A\00"", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c""\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !26 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !30, metadata !DIExpression()), !dbg !31
  call void @llvm.dbg.declare(metadata i32* %3, metadata !32, metadata !DIExpression()), !dbg !33
  store i32 0, i32* %3, align 4, !dbg !34
  br label %4, !dbg !36

4:
  %5 = load i32, i32* %3, align 4, !dbg !37
  %6 = sext i32 %5 to i64, !dbg !37
  %7 = icmp ult i64 %6, 9, !dbg !39
  br i1 %7, label %8, label %54, !dbg !40

8:
  store i32 0, i32* %2, align 4, !dbg !41
  br label %9, !dbg !44

9:
  %10 = load i32, i32* %2, align 4, !dbg !45
  %11 = sext i32 %10 to i64, !dbg !45
  %12 = icmp ult i64 %11, 4, !dbg !47
  br i1 %12, label %13, label %28, !dbg !48

13:
  %14 = load i32, i32* %3, align 4, !dbg !49
  %15 = load i32, i32* %2, align 4, !dbg !50
  %16 = load i32, i32* %3, align 4, !dbg !51
  %17 = sext i32 %16 to i64, !dbg !52
  %18 = getelementptr inbounds [9 x %struct.PT], [9 x %struct.PT]* @cases, i64 0, i64 %17, !dbg !52
  %19 = getelementptr inbounds %struct.PT, %struct.PT* %18, i32 0, i32 0, !dbg !53
  %20 = load i32, i32* %2, align 4, !dbg !54
  %21 = sext i32 %20 to i64, !dbg !52
  %22 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 %21, !dbg !52
  %23 = load i64, i64* %22, align 8, !dbg !52
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 %14, i32 %15, i64 %23), !dbg !55
  br label %25, !dbg !55

25:
  %26 = load i32, i32* %2, align 4, !dbg !56
  %27 = add nsw i32 %26, 1, !dbg !56
  store i32 %27, i32* %2, align 4, !dbg !56
  br label %9, !dbg !57

28:
  %29 = load i32, i32* %3, align 4, !dbg !60
  %30 = load i32, i32* %3, align 4, !dbg !61
  %31 = sext i32 %30 to i64, !dbg !62
  %32 = getelementptr inbounds [9 x %struct.PT], [9 x %struct.PT]* @cases, i64 0, i64 %31, !dbg !62
  %33 = getelementptr inbounds %struct.PT, %struct.PT* %32, i32 0, i32 1, !dbg !63
  %34 = load i64, i64* %33, align 8, !dbg !63
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 %29, i64 %34), !dbg !64
  %36 = load i32, i32* %3, align 4, !dbg !65
  %37 = load i32, i32* %3, align 4, !dbg !66
  %38 = sext i32 %37 to i64, !dbg !67
  %39 = getelementptr inbounds [9 x %struct.PT], [9 x %struct.PT]* @cases, i64 0, i64 %38, !dbg !67
  %40 = getelementptr inbounds %struct.PT, %struct.PT* %39, i32 0, i32 2, !dbg !68
  %41 = load i64, i64* %40, align 8, !dbg !68
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i32 %36, i64 %41), !dbg !69
  %43 = load i32, i32* %3, align 4, !dbg !70
  %44 = load i32, i32* %3, align 4, !dbg !71
  %45 = sext i32 %44 to i64, !dbg !72
  %46 = getelementptr inbounds [9 x %struct.PT], [9 x %struct.PT]* @cases, i64 0, i64 %45, !dbg !72
  %47 = getelementptr inbounds %struct.PT, %struct.PT* %46, i32 0, i32 3, !dbg !73
  %48 = load i64, i64* %47, align 8, !dbg !73
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 %43, i64 %48), !dbg !74
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !75
  br label %51, !dbg !76

51:
  %52 = load i32, i32* %3, align 4, !dbg !77
  %53 = add nsw i32 %52, 1, !dbg !77
  store i32 %53, i32* %3, align 4, !dbg !77
  br label %4, !dbg !78

54:
  ret i32 0, !dbg !81
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 12], 0
.LBB0_1:                                # =>This Loop Header: Depth=1
        movsxd  rax, dword ptr [rbp - 12]
        cmp     rax, 9
        jae     .LBB0_8
        mov     dword ptr [rbp - 8], 0
.LBB0_3:                                #   Parent Loop BB0_1 Depth=1
        movsxd  rax, dword ptr [rbp - 8]
        cmp     rax, 4
        jae     .LBB0_6
        mov     esi, dword ptr [rbp - 12]
        mov     edx, dword ptr [rbp - 8]
        movsxd  rax, dword ptr [rbp - 12]
        imul    rax, rax, 56
        movabs  rcx, offset cases
        add     rcx, rax
        movsxd  rax, dword ptr [rbp - 8]
        mov     rcx, qword ptr [rcx + 8*rax]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 8]
        add     eax, 1
        mov     dword ptr [rbp - 8], eax
        jmp     .LBB0_3
.LBB0_6:                                #   in Loop: Header=BB0_1 Depth=1
        mov     esi, dword ptr [rbp - 12]
        movsxd  rax, dword ptr [rbp - 12]
        imul    rax, rax, 56
        movabs  rcx, offset cases
        add     rcx, rax
        mov     rdx, qword ptr [rcx + 32]
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        mov     esi, dword ptr [rbp - 12]
        movsxd  rcx, dword ptr [rbp - 12]
        imul    rcx, rcx, 56
        movabs  rdx, offset cases
        add     rdx, rcx
        mov     rdx, qword ptr [rdx + 40]
        movabs  rdi, offset .L.str.2
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     esi, dword ptr [rbp - 12]
        movsxd  rcx, dword ptr [rbp - 12]
        imul    rcx, rcx, 56
        movabs  rdx, offset cases
        add     rdx, rcx
        mov     rdx, qword ptr [rdx + 48]
        movabs  rdi, offset .L.str.3
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.4
        mov     dword ptr [rbp - 24], eax # 4-byte Spill
        mov     al, 0
        call    printf
        mov     eax, dword ptr [rbp - 12]
        add     eax, 1
        mov     dword ptr [rbp - 12], eax
        jmp     .LBB0_1
.LBB0_8:
        xor     eax, eax
        add     rsp, 32
        pop     rbp
        ret
cases:
        .quad   73400320                # 0x4600000
        .quad   262144                  # 0x40000
        .quad   805567999               # 0x3003fdff
        .quad   -1                      # 0xffffffffffffffff
        .quad   1                       # 0x1
        .quad   2                       # 0x2
        .quad   1                       # 0x1
        .quad   879754751               # 0x346ffdff
        .quad   262144                  # 0x40000
        .quad   262144                  # 0x40000
        .quad   805567999               # 0x3003fdff
        .quad   2                       # 0x2
        .quad   3                       # 0x3
        .quad   2                       # 0x2
        .quad   879754751               # 0x346ffdff
        .quad   805567999               # 0x3003fdff
        .quad   262144                  # 0x40000
        .quad   805567999               # 0x3003fdff
        .quad   1                       # 0x1
        .quad   3                       # 0x3
        .quad   2                       # 0x2
        .quad   879754751               # 0x346ffdff
        .quad   805830143               # 0x3007fdff
        .quad   524288                  # 0x80000
        .quad   -1                      # 0xffffffffffffffff
        .quad   1                       # 0x1
        .quad   2                       # 0x2
        .quad   1                       # 0x1
        .quad   879754751               # 0x346ffdff
        .quad   805830143               # 0x3007fdff
        .quad   1048576                 # 0x100000
        .quad   805830143               # 0x3007fdff
        .quad   1                       # 0x1
        .quad   3                       # 0x3
        .quad   1                       # 0x1
        .quad   879754751               # 0x346ffdff
        .quad   805830143               # 0x3007fdff
        .quad   262144                  # 0x40000
        .quad   262144                  # 0x40000
        .quad   1                       # 0x1
        .quad   3                       # 0x3
        .quad   1                       # 0x1
        .quad   73400320                # 0x4600000
        .quad   807403007               # 0x301ffdff
        .quad   807403007               # 0x301ffdff
        .quad   -1                      # 0xffffffffffffffff
        .quad   1                       # 0x1
        .quad   2                       # 0x2
        .quad   1                       # 0x1
        .quad   839122431               # 0x3203fdff
        .quad   2097152                 # 0x200000
        .quad   807403007               # 0x301ffdff
        .quad   -1                      # 0xffffffffffffffff
        .quad   0                       # 0x0
        .quad   2                       # 0x2
        .quad   1                       # 0x1
        .quad   67108864                # 0x4000000
        .quad   807403007               # 0x301ffdff
        .quad   134217728               # 0x8000000
        .quad   -1                      # 0xffffffffffffffff
        .quad   0                       # 0x0
        .quad   2                       # 0x2
        .quad   0                       # 0x0

.L.str:
        .asciz  ""cases[%d].c[%d]=%ld\n""

.L.str.1:
        .asciz  ""cases[%d].b=%ld\n""

.L.str.2:
        .asciz  ""cases[%d].e=%ld\n""

.L.str.3:
        .asciz  ""cases[%d].k=%ld\n""

.L.str.4:
        .asciz  ""\n""

Standard error:
[1m<source>:9:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L), (I)262144L, (((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), -1L, 1,2,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                     }
[0m[1m<source>:9:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L), (I)262144L, (((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), -1L, 1,2,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                            }
[0m[1m<source>:10:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)+4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)262144L, (I)262144L, (((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), 2,3,2,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
[0m[1m<source>:10:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)+4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)262144L, (I)262144L, (((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), 2,3,2,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           }
[0m[1m<source>:11:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)262144L, (((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), 1,3,2,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {}
[0m[1m<source>:11:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)262144L, (((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), 1,3,2,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {}
[0m[1m<source>:12:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)524288L, -1L, 1,2,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
[0m[1m<source>:12:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)524288L, -1L, 1,2,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               }
[0m[1m<source>:13:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)1048576L, (I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), 1,3,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {}
[0m[1m<source>:13:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)1048576L, (I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), 1,3,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {}
[0m[1m<source>:14:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)262144L, (I)262144L, 1,3,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               }
[0m[1m<source>:14:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L)+( (I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)262144L, (I)262144L, 1,3,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
[0m[1m<source>:15:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L), ((I)1048576L +(I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), ((I)1048576L +(I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), -1L, 1,2,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {}
[0m[1m<source>:15:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 ((I)4194304L +(I)2097152L +(I)67108864L), ((I)1048576L +(I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), ((I)1048576L +(I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), -1L, 1,2,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {}
[0m[1m<source>:16:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 (I)33554432L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)2097152L, ((I)1048576L +(I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), -1L, 0,2,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
[0m[1m<source>:16:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 (I)33554432L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L), (I)2097152L, ((I)1048576L +(I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), -1L, 0,2,1,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                                                                                                                                                                                                                     }
[0m[1m<source>:17:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 (I)67108864L, ((I)1048576L +(I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)134217728L, -1L, 0,2,0,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                   }
[0m[1m<source>:17:2: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
 (I)67108864L, ((I)1048576L +(I)524288L +(I)262144L +(((I)1L +(I)256L +(I)4L +(I)8L +(I)16L +(I)64L +(I)128L +(I)268435456L +(I)536870912L +(I)1024L +(I)4096L +(I)8192L +(I)16384L)+((I)2L +(I)131072L +(I)2048L)+(I)32L +(I)32768L +(I)65536L)), (I)134217728L, -1L, 0,2,0,
[0;1;32m ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[0m[0;32m {                                                                                                                                                                                                                                                                          }
[0m18 warnings generated.
",-Wall
source\00206.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [12 x i8] c""abort = %s\0A\00"", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c""111\00"", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c""222\00"", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c""333\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0)), !dbg !12
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)), !dbg !13
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0)), !dbg !14
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)), !dbg !15
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0)), !dbg !16
  ret i32 0, !dbg !17
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.1
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.2
        mov     dword ptr [rbp - 4], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.3
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.2
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str
        movabs  rsi, offset .L.str.1
        mov     dword ptr [rbp - 16], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 20], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 32
        pop     rbp
        ret
.L.str:
        .asciz  ""abort = %s\n""

.L.str.1:
        .asciz  ""111""

.L.str.2:
        .asciz  ""222""

.L.str.3:
        .asciz  ""333""

",-Wall
source\00207.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [7 x i8] c""boom!\0A\00"", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c""%d\0A\00"", align 1

define dso_local void @f1(int)(i32 %0) #0 !dbg !7 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !12, metadata !DIExpression()), !dbg !13
  %5 = load i32, i32* %2, align 4, !dbg !14
  %6 = zext i32 %5 to i64, !dbg !15
  %7 = call i8* @llvm.stacksave(), !dbg !15
  store i8* %7, i8** %3, align 8, !dbg !15
  %8 = alloca i8, i64 %6, align 16, !dbg !15
  store i64 %6, i64* %4, align 8, !dbg !15
  call void @llvm.dbg.declare(metadata i64* %4, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.declare(metadata i8* %8, metadata !19, metadata !DIExpression()), !dbg !24
  br i1 false, label %9, label %12, !dbg !25

9:
  br label %10, !dbg !25

10:
  call void @llvm.dbg.label(metadata !26), !dbg !28
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !29
  br label %12, !dbg !29

12:
  %13 = load i32, i32* %2, align 4, !dbg !30
  %14 = add nsw i32 %13, -1, !dbg !30
  store i32 %14, i32* %2, align 4, !dbg !30
  %15 = icmp eq i32 %13, 0, !dbg !32
  br i1 %15, label %16, label %18, !dbg !33

16:
  %17 = load i8*, i8** %3, align 8, !dbg !34
  call void @llvm.stackrestore(i8* %17), !dbg !34
  ret void, !dbg !34

18:
  br label %10, !dbg !35
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i8* @llvm.stacksave() #2

declare void @llvm.dbg.label(metadata) #1

declare dso_local i32 @printf(i8*, ...) #3

declare void @llvm.stackrestore(i8*) #2

define dso_local void @f2()() #4 !dbg !36 {
  %1 = alloca [1 x i32], align 4
  %2 = alloca [1 x i32], align 4
  %3 = alloca [1 x i32], align 4
  br label %4, !dbg !39

4:
  call void @llvm.dbg.label(metadata !40), !dbg !42
  %5 = getelementptr inbounds [1 x i32], [1 x i32]* %1, i64 0, i64 0, !dbg !43
  store i32 0, i32* %5, align 4, !dbg !44
  %6 = getelementptr inbounds [1 x i32], [1 x i32]* %2, i64 0, i64 0, !dbg !45
  store i32 0, i32* %6, align 4, !dbg !46
  %7 = getelementptr inbounds [1 x i32], [1 x i32]* %3, i64 0, i64 0, !dbg !47
  store i32 0, i32* %7, align 4, !dbg !48
  ret void, !dbg !49
}

define dso_local void @f3()() #0 !dbg !50 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 11), !dbg !51
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 12), !dbg !52
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 0), !dbg !53
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 1), !dbg !54
  ret void, !dbg !55
}

define dso_local i32 @main() #5 !dbg !56 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @f1(int)(i32 2), !dbg !59
  call void @f2()(), !dbg !60
  call void @f3()(), !dbg !61
  ret i32 0, !dbg !62
}

attributes #0 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #4 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #5 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:20:17: [0m[0;1;35mwarning: [0m[1muse of logical '&&' with constant operand [-Wconstant-logical-operand][0m
        int a[1 && 1]; /* not a variable-length array */
[0;1;32m                ^  ~
[0m[1m<source>:20:17: [0m[0;1;30mnote: [0muse '&' for a bitwise operation[0m
        int a[1 && 1]; /* not a variable-length array */
[0;1;32m                ^~
[0m[0;32m                &
[0m[1m<source>:20:17: [0m[0;1;30mnote: [0mremove constant to silence this warning[0m
        int a[1 && 1]; /* not a variable-length array */
[0;1;32m               ~^~~~
[0m[1m<source>:21:17: [0m[0;1;35mwarning: [0m[1muse of logical '||' with constant operand [-Wconstant-logical-operand][0m
        int b[1 || 1]; /* not a variable-length array */
[0;1;32m                ^  ~
[0m[1m<source>:21:17: [0m[0;1;30mnote: [0muse '|' for a bitwise operation[0m
        int b[1 || 1]; /* not a variable-length array */
[0;1;32m                ^~
[0m[0;32m                |
[0m2 warnings generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
f1(int):                                 # @f1(int)
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        xor     eax, eax
        mov     dword ptr [rbp - 4], edi
        mov     ecx, dword ptr [rbp - 4]
        mov     edx, ecx
        mov     rsi, rsp
        mov     qword ptr [rbp - 16], rsi
        mov     qword ptr [rbp - 24], rdx
        test    al, 1
        jne     .LBB0_1
        jmp     .LBB0_3
.LBB0_1:
        jmp     .LBB0_2
.LBB0_2:
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
.LBB0_3:
        mov     eax, dword ptr [rbp - 4]
        mov     ecx, eax
        add     ecx, -1
        mov     dword ptr [rbp - 4], ecx
        cmp     eax, 0
        jne     .LBB0_5
        mov     rax, qword ptr [rbp - 16]
        mov     rsp, rax
        mov     rsp, rbp
        pop     rbp
        ret
.LBB0_5:
        jmp     .LBB0_2
f2():                                 # @f2()
        push    rbp
        mov     rbp, rsp
        mov     dword ptr [rbp - 4], 0
        mov     dword ptr [rbp - 8], 0
        mov     dword ptr [rbp - 12], 0
        pop     rbp
        ret
f3():                                 # @f3()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        movabs  rdi, offset .L.str.1
        mov     esi, 11
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.1
        mov     esi, 12
        mov     dword ptr [rbp - 4], eax # 4-byte Spill
        mov     al, 0
        call    printf
        xor     esi, esi
        movabs  rdi, offset .L.str.1
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        mov     al, 0
        call    printf
        movabs  rdi, offset .L.str.1
        mov     esi, 1
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     al, 0
        call    printf
        add     rsp, 16
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     edi, 2
        call    f1(int)
        call    f2()
        call    f3()
        xor     eax, eax
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""boom!\n""

.L.str.1:
        .asciz  ""%d\n""

Standard error:
[1m<source>:6:8: [0m[0;1;35mwarning: [0m[1munused variable 'test' [-Wunused-variable][0m
  char test[argc];
[0;1;32m       ^
[0m[1m<source>:20:17: [0m[0;1;35mwarning: [0m[1muse of logical '&&' with constant operand [-Wconstant-logical-operand][0m
        int a[1 && 1]; /* not a variable-length array */
[0;1;32m                ^  ~
[0m[1m<source>:20:17: [0m[0;1;30mnote: [0muse '&' for a bitwise operation[0m
        int a[1 && 1]; /* not a variable-length array */
[0;1;32m                ^~
[0m[0;32m                &
[0m[1m<source>:20:17: [0m[0;1;30mnote: [0mremove constant to silence this warning[0m
        int a[1 && 1]; /* not a variable-length array */
[0;1;32m               ~^~~~
[0m[1m<source>:21:17: [0m[0;1;35mwarning: [0m[1muse of logical '||' with constant operand [-Wconstant-logical-operand][0m
        int b[1 || 1]; /* not a variable-length array */
[0;1;32m                ^  ~
[0m[1m<source>:21:17: [0m[0;1;30mnote: [0muse '|' for a bitwise operation[0m
        int b[1 || 1]; /* not a variable-length array */
[0;1;32m                ^~
[0m[0;32m                |
[0m3 warnings generated.
",-Wall
source\00208.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
%struct.wchar = type { i8*, [1 x i8] }
%struct.wint = type { i8*, [1 x i32] }

@__const.f1char().s = private unnamed_addr constant [9 x i8] c""nonono\00\00\00"", align 1
@.str = private unnamed_addr constant [5 x i8] c""bugs\00"", align 1
@__const.f1char().q = private unnamed_addr constant %struct.wchar { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), [1 x i8] zeroinitializer }, align 8
@__const.f1int().s = private unnamed_addr constant [9 x i8] c""nonono\00\00\00"", align 1
@__const.f1int().q = private unnamed_addr constant %struct.wint { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), [1 x i32] zeroinitializer }, align 8
@__const.main.s = private unnamed_addr constant [9 x i8] c""nonono\00\00\00"", align 1
@main::q = internal global %struct.wchar { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), [1 x i8] c""c"" }, align 8, !dbg !0
@.str.1 = private unnamed_addr constant [5 x i8] c""bla\0A\00"", align 1

define dso_local i32 @f1char()() #0 !dbg !24 {
  %1 = alloca [9 x i8], align 1
  %2 = alloca %struct.wchar, align 8
  call void @llvm.dbg.declare(metadata [9 x i8]* %1, metadata !25, metadata !DIExpression()), !dbg !29
  %3 = bitcast [9 x i8]* %1 to i8*, !dbg !29
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 getelementptr inbounds ([9 x i8], [9 x i8]* @__const.f1char().s, i32 0, i32 0), i64 9, i1 false), !dbg !29
  call void @llvm.dbg.declare(metadata %struct.wchar* %2, metadata !30, metadata !DIExpression()), !dbg !31
  %4 = bitcast %struct.wchar* %2 to i8*, !dbg !31
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 bitcast (%struct.wchar* @__const.f1char().q to i8*), i64 16, i1 false), !dbg !31
  %5 = getelementptr inbounds [9 x i8], [9 x i8]* %1, i64 0, i64 0, !dbg !32
  %6 = load i8, i8* %5, align 1, !dbg !32
  %7 = icmp ne i8 %6, 0, !dbg !32
  %8 = xor i1 %7, true, !dbg !33
  %9 = zext i1 %8 to i32, !dbg !33
  ret i32 %9, !dbg !34
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

define dso_local i32 @f1int()() #0 !dbg !35 {
  %1 = alloca [9 x i8], align 1
  %2 = alloca %struct.wint, align 8
  call void @llvm.dbg.declare(metadata [9 x i8]* %1, metadata !36, metadata !DIExpression()), !dbg !37
  %3 = bitcast [9 x i8]* %1 to i8*, !dbg !37
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 getelementptr inbounds ([9 x i8], [9 x i8]* @__const.f1int().s, i32 0, i32 0), i64 9, i1 false), !dbg !37
  call void @llvm.dbg.declare(metadata %struct.wint* %2, metadata !38, metadata !DIExpression()), !dbg !44
  %4 = bitcast %struct.wint* %2 to i8*, !dbg !44
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 bitcast (%struct.wint* @__const.f1int().q to i8*), i64 16, i1 false), !dbg !44
  %5 = getelementptr inbounds [9 x i8], [9 x i8]* %1, i64 0, i64 0, !dbg !45
  %6 = load i8, i8* %5, align 1, !dbg !45
  %7 = icmp ne i8 %6, 0, !dbg !45
  %8 = xor i1 %7, true, !dbg !46
  %9 = zext i1 %8 to i32, !dbg !46
  ret i32 %9, !dbg !47
}

define dso_local i32 @main() #3 !dbg !2 {
  %1 = alloca i32, align 4
  %2 = alloca [9 x i8], align 1
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [9 x i8]* %2, metadata !48, metadata !DIExpression()), !dbg !49
  %3 = bitcast [9 x i8]* %2 to i8*, !dbg !49
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 getelementptr inbounds ([9 x i8], [9 x i8]* @__const.main.s, i32 0, i32 0), i64 9, i1 false), !dbg !49
  %4 = call i32 @f1char()(), !dbg !50
  %5 = icmp ne i32 %4, 0, !dbg !50
  br i1 %5, label %9, label %6, !dbg !52

6:
  %7 = call i32 @f1int()(), !dbg !53
  %8 = icmp ne i32 %7, 0, !dbg !53
  br i1 %8, label %9, label %11, !dbg !54

9:
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)), !dbg !55
  br label %11, !dbg !55

11:
  %12 = getelementptr inbounds [9 x i8], [9 x i8]* %2, i64 0, i64 0, !dbg !56
  %13 = load i8, i8* %12, align 1, !dbg !56
  %14 = icmp ne i8 %13, 0, !dbg !56
  %15 = xor i1 %14, true, !dbg !57
  %16 = zext i1 %15 to i32, !dbg !57
  ret i32 %16, !dbg !58
}

declare dso_local i32 @printf(i8*, ...) #4

attributes #0 = { noinline nounwind optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #4 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

Standard error:
[1m<source>:10:23: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
    struct wchar q = {""bugs""};
[0;1;32m                      ^
[0m[1m<source>:15:22: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
    struct wint q = {""bugs""};
[0;1;32m                     ^
[0m[1m<source>:20:29: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
   static struct wchar q = {""bugs"", {'c'}};
[0;1;32m                            ^
[0m3 warnings generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
f1char():                             # @f1char()
        push    rbp
        mov     rbp, rsp
        mov     rax, qword ptr [.L__const.f1char() [clone .s]]
        mov     qword ptr [rbp - 9], rax
        mov     cl, byte ptr [.L__const.f1char() [clone .s]+8]
        mov     byte ptr [rbp - 1], cl
        mov     rax, qword ptr [.L__const.f1char() [clone .q]]
        mov     qword ptr [rbp - 32], rax
        mov     rax, qword ptr [.L__const.f1char() [clone .q]+8]
        mov     qword ptr [rbp - 24], rax
        cmp     byte ptr [rbp - 9], 0
        setne   cl
        xor     cl, -1
        and     cl, 1
        movzx   eax, cl
        pop     rbp
        ret
f1int():                              # @f1int()
        push    rbp
        mov     rbp, rsp
        mov     rax, qword ptr [.L__const.f1int() [clone .s]]
        mov     qword ptr [rbp - 9], rax
        mov     cl, byte ptr [.L__const.f1int() [clone .s]+8]
        mov     byte ptr [rbp - 1], cl
        mov     rax, qword ptr [.L__const.f1int() [clone .q]]
        mov     qword ptr [rbp - 32], rax
        mov     rax, qword ptr [.L__const.f1int() [clone .q]+8]
        mov     qword ptr [rbp - 24], rax
        cmp     byte ptr [rbp - 9], 0
        setne   cl
        xor     cl, -1
        and     cl, 1
        movzx   eax, cl
        pop     rbp
        ret
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        mov     rax, qword ptr [.L__const.main.s]
        mov     qword ptr [rbp - 13], rax
        mov     cl, byte ptr [.L__const.main.s+8]
        mov     byte ptr [rbp - 5], cl
        call    f1char()
        cmp     eax, 0
        jne     .LBB2_2
        call    f1int()
        cmp     eax, 0
        je      .LBB2_3
.LBB2_2:
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
.LBB2_3:
        cmp     byte ptr [rbp - 13], 0
        setne   al
        xor     al, -1
        and     al, 1
        movzx   eax, al
        add     rsp, 16
        pop     rbp
        ret
.L__const.f1char() [clone .s]:
        .asciz  ""nonono\000\000""

.L.str:
        .asciz  ""bugs""

.L__const.f1char() [clone .q]:
        .quad   .L.str
        .zero   1
        .zero   7

.L__const.f1int() [clone .s]:
        .asciz  ""nonono\000\000""

.L__const.f1int() [clone .q]:
        .quad   .L.str
        .zero   4
        .zero   4

.L__const.main.s:
        .asciz  ""nonono\000\000""

.L.str.1:
        .asciz  ""bla\n""

Standard error:
[1m<source>:10:23: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
    struct wchar q = {""bugs""};
[0;1;32m                      ^
[0m[1m<source>:10:18: [0m[0;1;35mwarning: [0m[1munused variable 'q' [-Wunused-variable][0m
    struct wchar q = {""bugs""};
[0;1;32m                 ^
[0m[1m<source>:15:22: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
    struct wint q = {""bugs""};
[0;1;32m                     ^
[0m[1m<source>:15:17: [0m[0;1;35mwarning: [0m[1munused variable 'q' [-Wunused-variable][0m
    struct wint q = {""bugs""};
[0;1;32m                ^
[0m[1m<source>:20:29: [0m[0;1;35mwarning: [0m[1mISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings][0m
   static struct wchar q = {""bugs"", {'c'}};
[0;1;32m                            ^
[0m[1m<source>:20:24: [0m[0;1;35mwarning: [0m[1munused variable 'q' [-Wunused-variable][0m
   static struct wchar q = {""bugs"", {'c'}};
[0;1;32m                       ^
[0m6 warnings generated.
",-Wall
source\00209.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:3:6: [0m[0;1;31merror: [0m[1mISO C++ forbids forward references to 'enum' types[0m
enum E *e;
[0;1;32m     ^
[0m[1m<source>:24:16: [0m[0;1;31merror: [0m[1mtoo many arguments to function call, expected 0, have 1[0m
  return (*fp)(i);
[0;1;32m         ~~~~~ ^
[0m2 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:3:6: [0m[0;1;31merror: [0m[1mISO C++ forbids forward references to 'enum' types[0m
enum E *e;
[0;1;32m     ^
[0m[1m<source>:24:16: [0m[0;1;31merror: [0m[1mtoo many arguments to function call, expected 0, have 1[0m
  return (*fp)(i);
[0;1;32m         ~~~~~ ^
[0m2 errors generated.
",-Wall
source\00210.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:14:39: [0m[0;1;35mwarning: [0m[1m'stdcall' calling convention is not supported for this target [-Wignored-attributes][0m
extern void foo (void) __attribute__((stdcall));
[0;1;32m                                      ^
[0m[1m<source>:15:21: [0m[0;1;35mwarning: [0m[1m'stdcall' calling convention is not supported for this target [-Wignored-attributes][0m
void __attribute__((stdcall)) foo (void)
[0;1;32m                    ^
[0m[1m<source>:29:11: [0m[0;1;31merror: [0m[1mcannot initialize a variable of type 'void *' with an rvalue of type 'int (*)()'[0m
    void *function_pointer = &actual_function;
[0;1;32m          ^                  ~~~~~~~~~~~~~~~~
[0m2 warnings and 1 error generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:14:39: [0m[0;1;35mwarning: [0m[1m'stdcall' calling convention is not supported for this target [-Wignored-attributes][0m
extern void foo (void) __attribute__((stdcall));
[0;1;32m                                      ^
[0m[1m<source>:15:21: [0m[0;1;35mwarning: [0m[1m'stdcall' calling convention is not supported for this target [-Wignored-attributes][0m
void __attribute__((stdcall)) foo (void)
[0;1;32m                    ^
[0m[1m<source>:29:11: [0m[0;1;31merror: [0m[1mcannot initialize a variable of type 'void *' with an rvalue of type 'int (*)()'[0m
    void *function_pointer = &actual_function;
[0;1;32m          ^                  ~~~~~~~~~~~~~~~~
[0m2 warnings and 1 error generated.
",-Wall
source\00211.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@array = dso_local global [31 x i32] zeroinitializer, align 16, !dbg !0
@.str = private unnamed_addr constant [10 x i8] c""n+1 = %d\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !15 {
  %1 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 15), !dbg !18
  ret i32 0, !dbg !19
}

declare dso_local i32 @printf(char const*, ...)(i8*, ...) #1

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        movabs  rdi, offset .L.str
        mov     esi, 15
        mov     al, 0
        call    printf(char const*, ...)
        xor     ecx, ecx
        mov     dword ptr [rbp - 4], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
array:
        .zero   124

.L.str:
        .asciz  ""n+1 = %d\n""

",-Wall
source\00212.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [4 x i8] c""Ok\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0)), !dbg !12
  ret i32 0, !dbg !15
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 4], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""Ok\n""

",-Wall
source\00213.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:15:10: [0m[0;1;31merror: [0m[1mright operand to ? is void, but left operand is of type 'int'[0m
      (1 ? 
[0;1;32m         ^
[0m1 error generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:15:10: [0m[0;1;31merror: [0m[1mright operand to ? is void, but left operand is of type 'int'[0m
      (1 ? 
[0;1;32m         ^
[0m1 error generated.
",-Wall
source\00214.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:42:5: [0m[0;1;35mwarning: [0m[1mexpression result unused [-Wunused-value][0m
    __ret;
[0;1;32m    ^~~~~
[0m[1m<source>:47:1: [0m[0;1;31merror: [0m[1munknown type name '_Bool'[0m
_Bool chk(unsigned long addr, unsigned long limit, unsigned long size)
[0;1;32m^
[0m[1m<source>:49:3: [0m[0;1;31merror: [0m[1munknown type name '_Bool'[0m
  _Bool ret;
[0;1;32m  ^
[0m1 warning and 2 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:40:11: [0m[0;1;35mwarning: [0m[1munused variable 'x' [-Wunused-variable][0m
      int x = !!(__ret);
[0;1;32m          ^
[0m[1m<source>:42:5: [0m[0;1;35mwarning: [0m[1mexpression result unused [-Wunused-value][0m
    __ret;
[0;1;32m    ^~~~~
[0m[1m<source>:47:1: [0m[0;1;31merror: [0m[1munknown type name '_Bool'[0m
_Bool chk(unsigned long addr, unsigned long limit, unsigned long size)
[0;1;32m^
[0m[1m<source>:49:3: [0m[0;1;31merror: [0m[1munknown type name '_Bool'[0m
  _Bool ret;
[0;1;32m  ^
[0m2 warnings and 2 errors generated.
",-Wall
source\00215.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@.str = private unnamed_addr constant [7 x i8] c""begin\0A\00"", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c""end\0A\00"", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c""timeout=%ld\0A\00"", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c""error\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !7 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !12
  call void @kb_wait_1()(), !dbg !13
  call void @kb_wait_2()(), !dbg !14
  call void @kb_wait_2_1()(), !dbg !15
  call void @kb_wait_2_2()(), !dbg !16
  call void @kb_wait_3()(), !dbg !17
  call void @kb_wait_4()(), !dbg !18
  %3 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)), !dbg !19
  ret i32 0, !dbg !20
}

declare dso_local i32 @printf(char const*, ...)(i8*, ...) #1

define internal void @kb_wait_1()() #2 !dbg !21 {
  %1 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %1, metadata !24, metadata !DIExpression()), !dbg !26
  store i64 2, i64* %1, align 8, !dbg !26
  br label %2, !dbg !27

2:
  %3 = load i64, i64* %1, align 8, !dbg !28
  %4 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 %3), !dbg !31
  %5 = load i64, i64* %1, align 8, !dbg !32
  %6 = add i64 %5, -1, !dbg !32
  store i64 %6, i64* %1, align 8, !dbg !32
  br label %7, !dbg !33

7:
  %8 = load i64, i64* %1, align 8, !dbg !34
  %9 = icmp ne i64 %8, 0, !dbg !34
  br i1 %9, label %2, label %10, !dbg !33

10:
  ret void, !dbg !37
}

define internal void @kb_wait_2()() #2 !dbg !38 {
  %1 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %1, metadata !39, metadata !DIExpression()), !dbg !40
  store i64 2, i64* %1, align 8, !dbg !40
  br label %2, !dbg !41

2:
  %3 = load i64, i64* %1, align 8, !dbg !42
  %4 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 %3), !dbg !45
  %5 = load i64, i64* %1, align 8, !dbg !46
  %6 = add i64 %5, -1, !dbg !46
  store i64 %6, i64* %1, align 8, !dbg !46
  br label %7, !dbg !47

7:
  %8 = load i64, i64* %1, align 8, !dbg !48
  %9 = icmp ne i64 %8, 0, !dbg !48
  br i1 %9, label %2, label %10, !dbg !47

10:
  ret void, !dbg !51
}

define internal void @kb_wait_2_1()() #2 !dbg !52 {
  %1 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %1, metadata !53, metadata !DIExpression()), !dbg !54
  store i64 2, i64* %1, align 8, !dbg !54
  br label %2, !dbg !55

2:
  %3 = load i64, i64* %1, align 8, !dbg !56
  %4 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 %3), !dbg !59
  %5 = load i64, i64* %1, align 8, !dbg !60
  %6 = add i64 %5, -1, !dbg !60
  store i64 %6, i64* %1, align 8, !dbg !60
  br label %7, !dbg !61

7:
  %8 = load i64, i64* %1, align 8, !dbg !62
  %9 = icmp ne i64 %8, 0, !dbg !62
  br i1 %9, label %2, label %10, !dbg !61

10:
  ret void, !dbg !65
}

define internal void @kb_wait_2_2()() #2 !dbg !66 {
  %1 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %1, metadata !67, metadata !DIExpression()), !dbg !68
  store i64 2, i64* %1, align 8, !dbg !68
  br label %2, !dbg !69

2:
  br i1 true, label %3, label %6, !dbg !70

3:
  %4 = load i64, i64* %1, align 8, !dbg !72
  %5 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 %4), !dbg !74
  br label %9, !dbg !74

6:
  br label %7, !dbg !75

7:
  call void @llvm.dbg.label(metadata !76), !dbg !78
  %8 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0)), !dbg !79
  br label %7, !dbg !80

9:
  %10 = load i64, i64* %1, align 8, !dbg !81
  %11 = add i64 %10, -1, !dbg !81
  store i64 %11, i64* %1, align 8, !dbg !81
  br label %12, !dbg !82

12:
  %13 = load i64, i64* %1, align 8, !dbg !83
  %14 = icmp ne i64 %13, 0, !dbg !83
  br i1 %14, label %2, label %15, !dbg !82

15:
  ret void, !dbg !86
}

define internal void @kb_wait_3()() #2 !dbg !87 {
  %1 = alloca i64, align 8
  %2 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i64* %1, metadata !88, metadata !DIExpression()), !dbg !89
  store i64 2, i64* %1, align 8, !dbg !89
  br label %3, !dbg !90

3:
  br i1 true, label %4, label %7, !dbg !91

4:
  %5 = load i64, i64* %1, align 8, !dbg !93
  %6 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 %5), !dbg !95
  br label %11, !dbg !95

7:
  call void @llvm.dbg.declare(metadata i32* %2, metadata !96, metadata !DIExpression()), !dbg !98
  store i32 1, i32* %2, align 4, !dbg !98
  br label %8, !dbg !99

8:
  call void @llvm.dbg.label(metadata !100), !dbg !101
  %9 = load i32, i32* %2, align 4, !dbg !102
  %10 = add nsw i32 %9, 3, !dbg !103
  store i32 %10, i32* %2, align 4, !dbg !104
  br label %11

11:
  %12 = load i64, i64* %1, align 8, !dbg !105
  %13 = add i64 %12, -1, !dbg !105
  store i64 %13, i64* %1, align 8, !dbg !105
  br label %14, !dbg !106

14:
  %15 = load i64, i64* %1, align 8, !dbg !107
  %16 = icmp ne i64 %15, 0, !dbg !107
  br i1 %16, label %3, label %17, !dbg !106

17:
  ret void, !dbg !110
}

define internal void @kb_wait_4()() #2 !dbg !111 {
  %1 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %1, metadata !112, metadata !DIExpression()), !dbg !113
  store i64 2, i64* %1, align 8, !dbg !113
  br label %2, !dbg !114

2:
  %3 = load i64, i64* %1, align 8, !dbg !115
  %4 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 %3), !dbg !118
  %5 = load i64, i64* %1, align 8, !dbg !119
  %6 = add i64 %5, -1, !dbg !119
  store i64 %6, i64* %1, align 8, !dbg !119
  br label %7, !dbg !120

7:
  %8 = load i64, i64* %1, align 8, !dbg !121
  %9 = icmp ne i64 %8, 0, !dbg !121
  br i1 %9, label %2, label %10, !dbg !120

10:
  ret void, !dbg !124
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

declare void @llvm.dbg.label(metadata) #3

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #2 = { noinline optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #3 = { nounwind readnone speculatable willreturn }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     dword ptr [rbp - 4], 0
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf(char const*, ...)
        mov     dword ptr [rbp - 8], eax # 4-byte Spill
        call    kb_wait_1()
        call    kb_wait_2()
        call    kb_wait_2_1()
        call    kb_wait_2_2()
        call    kb_wait_3()
        call    kb_wait_4()
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf(char const*, ...)
        xor     ecx, ecx
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 16
        pop     rbp
        ret
kb_wait_1():                         # @kb_wait_1()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], 2
.LBB1_1:                                # =>This Inner Loop Header: Depth=1
        mov     rsi, qword ptr [rbp - 8]
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf(char const*, ...)
        mov     rcx, qword ptr [rbp - 8]
        add     rcx, -1
        mov     qword ptr [rbp - 8], rcx
        cmp     qword ptr [rbp - 8], 0
        jne     .LBB1_1
        add     rsp, 16
        pop     rbp
        ret
kb_wait_2():                         # @kb_wait_2()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], 2
.LBB2_1:                                # =>This Inner Loop Header: Depth=1
        mov     rsi, qword ptr [rbp - 8]
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf(char const*, ...)
        mov     rcx, qword ptr [rbp - 8]
        add     rcx, -1
        mov     qword ptr [rbp - 8], rcx
        cmp     qword ptr [rbp - 8], 0
        jne     .LBB2_1
        add     rsp, 16
        pop     rbp
        ret
kb_wait_2_1():                      # @kb_wait_2_1()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], 2
.LBB3_1:                                # =>This Inner Loop Header: Depth=1
        mov     rsi, qword ptr [rbp - 8]
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf(char const*, ...)
        mov     rcx, qword ptr [rbp - 8]
        add     rcx, -1
        mov     qword ptr [rbp - 8], rcx
        cmp     qword ptr [rbp - 8], 0
        jne     .LBB3_1
        add     rsp, 16
        pop     rbp
        ret
kb_wait_2_2():                      # @kb_wait_2_2()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], 2
.LBB4_1:                                # =>This Inner Loop Header: Depth=1
        mov     al, 1
        test    al, 1
        jne     .LBB4_2
        jmp     .LBB4_3
.LBB4_2:                                #   in Loop: Header=BB4_1 Depth=1
        mov     rsi, qword ptr [rbp - 8]
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf(char const*, ...)
        jmp     .LBB4_5
.LBB4_3:
        jmp     .LBB4_4
.LBB4_4:                                # =>This Inner Loop Header: Depth=1
        movabs  rdi, offset .L.str.3
        mov     al, 0
        call    printf(char const*, ...)
        mov     dword ptr [rbp - 12], eax # 4-byte Spill
        jmp     .LBB4_4
.LBB4_5:                                #   in Loop: Header=BB4_1 Depth=1
        mov     rax, qword ptr [rbp - 8]
        add     rax, -1
        mov     qword ptr [rbp - 8], rax
        cmp     qword ptr [rbp - 8], 0
        jne     .LBB4_1
        add     rsp, 16
        pop     rbp
        ret
kb_wait_3():                         # @kb_wait_3()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], 2
.LBB5_1:                                # =>This Inner Loop Header: Depth=1
        mov     al, 1
        test    al, 1
        jne     .LBB5_2
        jmp     .LBB5_3
.LBB5_2:                                #   in Loop: Header=BB5_1 Depth=1
        mov     rsi, qword ptr [rbp - 8]
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf(char const*, ...)
        jmp     .LBB5_5
.LBB5_3:                                #   in Loop: Header=BB5_1 Depth=1
        mov     dword ptr [rbp - 12], 1
        mov     eax, dword ptr [rbp - 12]
        add     eax, 3
        mov     dword ptr [rbp - 12], eax
.LBB5_5:                                #   in Loop: Header=BB5_1 Depth=1
        mov     rax, qword ptr [rbp - 8]
        add     rax, -1
        mov     qword ptr [rbp - 8], rax
        cmp     qword ptr [rbp - 8], 0
        jne     .LBB5_1
        add     rsp, 16
        pop     rbp
        ret
kb_wait_4():                         # @kb_wait_4()
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword ptr [rbp - 8], 2
.LBB6_1:                                # =>This Inner Loop Header: Depth=1
        mov     rsi, qword ptr [rbp - 8]
        movabs  rdi, offset .L.str.2
        mov     al, 0
        call    printf(char const*, ...)
        mov     rcx, qword ptr [rbp - 8]
        add     rcx, -1
        mov     qword ptr [rbp - 8], rcx
        cmp     qword ptr [rbp - 8], 0
        jne     .LBB6_1
        add     rsp, 16
        pop     rbp
        ret
.L.str:
        .asciz  ""begin\n""

.L.str.1:
        .asciz  ""end\n""

.L.str.2:
        .asciz  ""timeout=%ld\n""

.L.str.3:
        .asciz  ""error\n""

",-Wall
source\00216.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:8:30: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct contains_empty ce = { { (1) }, (empty_s){}, 022, };
[0;1;32m                             ^~~~~~~
[0m[1m<source>:56:18: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct U gu3 = { {3}, {5,6,7,8,}, 4, {""huhu"", 43}};
[0;1;32m                 ^~~
[0m[1m<source>:58:44: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct U gu4 = { 3, {5,6,7,},  5, { ""bla"", {44}} };
[0;1;32m                                           ^~~~
[0m[1m<source>:60:23: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct S gs3 = { (1), {(2)}, {(((3))), {4}}};
[0;1;32m                      ^~~~~
[0m[1m<source>:60:40: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct S gs3 = { (1), {(2)}, {(((3))), {4}}};
[0;1;32m                                       ^~~
[0m[1m<source>:62:17: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct V gv = {{{3},4,{5,6}}, ""haha"", (u8)45, 46};
[0;1;32m                ^~~
[0m[1m<source>:68:27: [0m[0;1;31merror: [0m[1minitialization of flexible array member is not allowed[0m
struct W gw = {{1,2,3,4}, {1,2,3,4,5}};
[0;1;32m                          ^
[0m[1m<source>:46:12: [0m[0;1;30mnote: [0minitialized flexible array member 's' is here[0m
  struct S s[];
[0;1;32m           ^
[0m[1m<source>:87:27: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'b' will be initialized after field 'a' [-Wreorder-init-list][0m
union UV guv2 = {{.b = 7, .a = 8}};
[0;1;32m                          ^~~~~~
[0m[1m<source>:87:24: [0m[0;1;30mnote: [0mprevious initialization for field 'b' is here[0m
union UV guv2 = {{.b = 7, .a = 8}};
[0;1;32m                       ^
[0m[1m<source>:123:21: [0m[0;1;31merror: [0m[1mcannot initialize a member subobject of type 'void *' with an lvalue of type 'void ()'[0m
    ((struct Wrap) {inc_global}),
[0;1;32m                    ^~~~~~~~~~
[0m[1m<source>:165:48: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'daddr' will be initialized after field 'saddr' [-Wreorder-init-list][0m
  struct flowi6 flow = { .daddr = phdr->daddr, .saddr = phdr->saddr };
[0;1;32m                                               ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:165:35: [0m[0;1;30mnote: [0mprevious initialization for field 'daddr' is here[0m
  struct flowi6 flow = { .daddr = phdr->daddr, .saddr = phdr->saddr };
[0;1;32m                                  ^~~~~~~~~~~
[0m[1m<source>:168:22: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                     ^~~~~~~~~
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:67: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[0;32m                                                                  static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:34: [0m[0;1;30mnote: [0mprevious initialization is here[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                 ^
[0m[1m<source>:168:67: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:67: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[0;32m                                                                  static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:34: [0m[0;1;30mnote: [0mprevious initialization is here[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                 ^
[0m[1m<source>:168:67: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:67: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[0;32m                                                                  static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0mprevious initialization is here[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:67: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:67: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[0;32m                                                                  static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0mprevious initialization is here[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:192:23: [0m[0;1;31merror: [0m[1mcannot initialize a member subobject of type 'void *' with an lvalue of type 'void ()'[0m
      ((struct Wrap) {inc_global}),
[0;1;32m                      ^~~~~~~~~~
[0m[1m<source>:196:22: [0m[0;1;31merror: [0m[1massigning to 'void (*)()' from incompatible type 'void *'[0m
  p = global_wrap[0].func; p();
[0;1;32m      ~~~~~~~~~~~~~~~^~~~
[0m[1m<source>:197:22: [0m[0;1;31merror: [0m[1massigning to 'void (*)()' from incompatible type 'void *'[0m
  p = global_wrap[1].func; p();
[0;1;32m      ~~~~~~~~~~~~~~~^~~~
[0m[1m<source>:198:21: [0m[0;1;31merror: [0m[1massigning to 'void (*)()' from incompatible type 'void *'[0m
  p = local_wrap[0].func; p();
[0;1;32m      ~~~~~~~~~~~~~~^~~~
[0m[1m<source>:199:21: [0m[0;1;31merror: [0m[1massigning to 'void (*)()' from incompatible type 'void *'[0m
  p = local_wrap[1].func; p();
[0;1;32m      ~~~~~~~~~~~~~~^~~~
[0m[1m<source>:208:5: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
    [0 ... 2] = &sys_ni,
[0;1;32m    ^~~~~~~~~
[0m[1m<source>:209:11: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
    [0] = sys_one,
[0;1;32m          ^~~~~~~
[0m[1m<source>:208:17: [0m[0;1;30mnote: [0mprevious initialization is here[0m
    [0 ... 2] = &sys_ni,
[0;1;32m                ^~~~~~~
[0m[1m<source>:210:11: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
    [1] = sys_two,
[0;1;32m          ^~~~~~~
[0m[1m<source>:208:17: [0m[0;1;30mnote: [0mprevious initialization is here[0m
    [0 ... 2] = &sys_ni,
[0;1;32m                ^~~~~~~
[0m[1m<source>:211:11: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
    [2] = sys_three,
[0;1;32m          ^~~~~~~~~
[0m[1m<source>:208:17: [0m[0;1;30mnote: [0mprevious initialization is here[0m
    [0 ... 2] = &sys_ni,
[0;1;32m                ^~~~~~~
[0m[1m<source>:245:20: [0m[0;1;35mwarning: [0m[1mnested designators are a C99 extension [-Wc99-designator][0m
  struct SEB b = { .a.j = 5 };
[0;1;32m                   ^~~~
[0m[1m<source>:246:20: [0m[0;1;35mwarning: [0m[1mnested designators are a C99 extension [-Wc99-designator][0m
  struct SEC c = { .a.j = 5 };
[0;1;32m                   ^~~~
[0m[1m<source>:247:20: [0m[0;1;35mwarning: [0m[1mnested designators are a C99 extension [-Wc99-designator][0m
  struct SED d = { .a.j = 5 };
[0;1;32m                   ^~~~
[0m20 warnings and 16 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:8:30: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct contains_empty ce = { { (1) }, (empty_s){}, 022, };
[0;1;32m                             ^~~~~~~
[0m[1m<source>:15:27: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct SS sinit16[] = { { 1 }, 2 };
[0;1;32m                          ^
[0m[0;32m                          {}
[0m[1m<source>:15:32: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct SS sinit16[] = { { 1 }, 2 };
[0;1;32m                               ^
[0m[0;32m                               {}
[0m[1m<source>:15:32: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct SS sinit16[] = { { 1 }, 2 };
[0;1;32m                               ^
[0m[0;32m                               {}
[0m[1m<source>:49:33: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct S gs = ((struct S){1, 2, 3, 4});
[0;1;32m                                ^~~~
[0m[0;32m                                {   }
[0m[1m<source>:52:23: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct U gu = {3, 5,6,7,8, 4, ""huhu"", 43};
[0;1;32m                      ^~~
[0m[0;32m                      {  }
[0m[1m<source>:52:19: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct U gu = {3, 5,6,7,8, 4, ""huhu"", 43};
[0;1;32m                  ^~~~~~~
[0m[0;32m                  {      }
[0m[1m<source>:52:31: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct U gu = {3, 5,6,7,8, 4, ""huhu"", 43};
[0;1;32m                              ^~~~~~~~~~
[0m[0;32m                              {         }
[0m[1m<source>:53:25: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct U gu2 = {3, {5,6,7,8}, 4, {""huhu"", 43}};
[0;1;32m                        ^~~
[0m[0;32m                        {  }
[0m[1m<source>:56:18: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct U gu3 = { {3}, {5,6,7,8,}, 4, {""huhu"", 43}};
[0;1;32m                 ^~~
[0m[1m<source>:56:28: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct U gu3 = { {3}, {5,6,7,8,}, 4, {""huhu"", 43}};
[0;1;32m                           ^~~
[0m[0;32m                           {  }
[0m[1m<source>:58:26: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct U gu4 = { 3, {5,6,7,},  5, { ""bla"", {44}} };
[0;1;32m                         ^
[0m[0;32m                         {}
[0m[1m<source>:58:44: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct U gu4 = { 3, {5,6,7,},  5, { ""bla"", {44}} };
[0;1;32m                                           ^~~~
[0m[1m<source>:60:23: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct S gs3 = { (1), {(2)}, {(((3))), {4}}};
[0;1;32m                      ^~~~~
[0m[1m<source>:60:40: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct S gs3 = { (1), {(2)}, {(((3))), {4}}};
[0;1;32m                                       ^~~
[0m[1m<source>:62:17: [0m[0;1;35mwarning: [0m[1mbraces around scalar initializer [-Wbraced-scalar-init][0m
struct V gv = {{{3},4,{5,6}}, ""haha"", (u8)45, 46};
[0;1;32m                ^~~
[0m[1m<source>:62:31: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct V gv = {{{3},4,{5,6}}, ""haha"", (u8)45, 46};
[0;1;32m                              ^~~~~~~~~~~~~~
[0m[0;32m                              {             }
[0m[1m<source>:68:21: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct W gw = {{1,2,3,4}, {1,2,3,4,5}};
[0;1;32m                    ^~~
[0m[0;32m                    {  }
[0m[1m<source>:68:17: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct W gw = {{1,2,3,4}, {1,2,3,4,5}};
[0;1;32m                ^~~~~~~
[0m[0;32m                {      }
[0m[1m<source>:68:27: [0m[0;1;31merror: [0m[1minitialization of flexible array member is not allowed[0m
struct W gw = {{1,2,3,4}, {1,2,3,4,5}};
[0;1;32m                          ^
[0m[1m<source>:46:12: [0m[0;1;30mnote: [0minitialized flexible array member 's' is here[0m
  struct S s[];
[0;1;32m           ^
[0m[1m<source>:78:18: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct SU gsu = {5,6};
[0;1;32m                 ^
[0m[0;32m                 {}
[0m[1m<source>:87:27: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'b' will be initialized after field 'a' [-Wreorder-init-list][0m
union UV guv2 = {{.b = 7, .a = 8}};
[0;1;32m                          ^~~~~~
[0m[1m<source>:87:24: [0m[0;1;30mnote: [0mprevious initialization for field 'b' is here[0m
union UV guv2 = {{.b = 7, .a = 8}};
[0;1;32m                       ^
[0m[1m<source>:111:28: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct pkthdr phdr = { { { 6,5,4,3 } }, { { 9,8,7,6 } } };
[0;1;32m                           ^~~~~~~
[0m[0;32m                           {      }
[0m[1m<source>:111:45: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
struct pkthdr phdr = { { { 6,5,4,3 } }, { { 9,8,7,6 } } };
[0;1;32m                                            ^~~~~~~
[0m[0;32m                                            {      }
[0m[1m<source>:123:21: [0m[0;1;31merror: [0m[1mcannot initialize a member subobject of type 'void *' with an lvalue of type 'void ()'[0m
    ((struct Wrap) {inc_global}),
[0;1;32m                    ^~~~~~~~~~
[0m[1m<source>:140:24: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
  struct S ls = {1, 2, 3, 4};
[0;1;32m                       ^~~~
[0m[0;32m                       {   }
[0m[1m<source>:143:25: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
  struct U lu = {3, 5,6,7,8, 4, ""huhu"", 43};
[0;1;32m                        ^~~
[0m[0;32m                        {  }
[0m[1m<source>:143:21: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
  struct U lu = {3, 5,6,7,8, 4, ""huhu"", 43};
[0;1;32m                    ^~~~~~~
[0m[0;32m                    {      }
[0m[1m<source>:143:33: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
  struct U lu = {3, 5,6,7,8, 4, ""huhu"", 43};
[0;1;32m                                ^~~~~~~~~~
[0m[0;32m                                {         }
[0m[1m<source>:150:30: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
  struct U lu21 = {3, ls, 4, ""huhu"", 43};
[0;1;32m                             ^~~~~~~~~~
[0m[0;32m                             {         }
[0m[1m<source>:153:28: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
  struct U lu3 = { 3, {5,6,7,8,}, 4, {""huhu"", 43}};
[0;1;32m                           ^~~
[0m[0;32m                           {  }
[0m[1m<source>:155:28: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
  struct U lu4 = { 3, {5,6,7,},  5, { ""bla"", 44} };
[0;1;32m                           ^
[0m[0;32m                           {}
[0m[1m<source>:159:31: [0m[0;1;35mwarning: [0m[1msuggest braces around initialization of subobject [-Wmissing-braces][0m
  struct V lv = {{3,4,{5,6}}, ""haha"", (u8)45, 46};
[0;1;32m                              ^~~~~~~~~~~~~~
[0m[0;32m                              {             }
[0m[1m<source>:165:48: [0m[0;1;35mwarning: [0m[1mISO C++ requires field designators to be specified in declaration order; field 'daddr' will be initialized after field 'saddr' [-Wreorder-init-list][0m
  struct flowi6 flow = { .daddr = phdr->daddr, .saddr = phdr->saddr };
[0;1;32m                                               ^~~~~~~~~~~~~~~~~~~~
[0m[1m<source>:165:35: [0m[0;1;30mnote: [0mprevious initialization for field 'daddr' is here[0m
  struct flowi6 flow = { .daddr = phdr->daddr, .saddr = phdr->saddr };
[0;1;32m                                  ^~~~~~~~~~~
[0m[1m<source>:168:22: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                     ^~~~~~~~~
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:50: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[0;32m                                                 static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:67: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[0;32m                                                                  static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:34: [0m[0;1;30mnote: [0mprevious initialization is here[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                 ^
[0m[1m<source>:168:67: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:67: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[0;32m                                                                  static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:34: [0m[0;1;30mnote: [0mprevious initialization is here[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                 ^
[0m[1m<source>:168:67: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:67: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[0;32m                                                                  static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0mprevious initialization is here[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:168:67: [0m[0;1;31merror: [0m[1mnon-constant-expression cannot be narrowed from type 'int' to 'u8' (aka 'unsigned char') in initializer list [-Wc++11-narrowing][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:67: [0m[0;1;30mnote: [0minsert an explicit cast to silence this issue[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[0;32m                                                                  static_cast<u8>( )
[0m[1m<source>:168:67: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                                  ^~~~~
[0m[1m<source>:168:50: [0m[0;1;30mnote: [0mprevious initialization is here[0m
  struct T lt2 = { { [1 ... 5] = 9, [6 ... 10] = elt, [4 ... 7] = elt+1 }, 1 };
[0;1;32m                                                 ^~~
[0m[1m<source>:192:23: [0m[0;1;31merror: [0m[1mcannot initialize a member subobject of type 'void *' with an lvalue of type 'void ()'[0m
      ((struct Wrap) {inc_global}),
[0;1;32m                      ^~~~~~~~~~
[0m[1m<source>:196:22: [0m[0;1;31merror: [0m[1massigning to 'void (*)()' from incompatible type 'void *'[0m
  p = global_wrap[0].func; p();
[0;1;32m      ~~~~~~~~~~~~~~~^~~~
[0m[1m<source>:197:22: [0m[0;1;31merror: [0m[1massigning to 'void (*)()' from incompatible type 'void *'[0m
  p = global_wrap[1].func; p();
[0;1;32m      ~~~~~~~~~~~~~~~^~~~
[0m[1m<source>:198:21: [0m[0;1;31merror: [0m[1massigning to 'void (*)()' from incompatible type 'void *'[0m
  p = local_wrap[0].func; p();
[0;1;32m      ~~~~~~~~~~~~~~^~~~
[0m[1m<source>:199:21: [0m[0;1;31merror: [0m[1massigning to 'void (*)()' from incompatible type 'void *'[0m
  p = local_wrap[1].func; p();
[0;1;32m      ~~~~~~~~~~~~~~^~~~
[0m[1m<source>:208:5: [0m[0;1;35mwarning: [0m[1marray designators are a C99 extension [-Wc99-designator][0m
    [0 ... 2] = &sys_ni,
[0;1;32m    ^~~~~~~~~
[0m[1m<source>:209:11: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
    [0] = sys_one,
[0;1;32m          ^~~~~~~
[0m[1m<source>:208:17: [0m[0;1;30mnote: [0mprevious initialization is here[0m
    [0 ... 2] = &sys_ni,
[0;1;32m                ^~~~~~~
[0m[1m<source>:210:11: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
    [1] = sys_two,
[0;1;32m          ^~~~~~~
[0m[1m<source>:208:17: [0m[0;1;30mnote: [0mprevious initialization is here[0m
    [0 ... 2] = &sys_ni,
[0;1;32m                ^~~~~~~
[0m[1m<source>:211:11: [0m[0;1;35mwarning: [0m[1minitializer overrides prior initialization of this subobject [-Winitializer-overrides][0m
    [2] = sys_three,
[0;1;32m          ^~~~~~~~~
[0m[1m<source>:208:17: [0m[0;1;30mnote: [0mprevious initialization is here[0m
    [0 ... 2] = &sys_ni,
[0;1;32m                ^~~~~~~
[0m[1m<source>:245:20: [0m[0;1;35mwarning: [0m[1mnested designators are a C99 extension [-Wc99-designator][0m
  struct SEB b = { .a.j = 5 };
[0;1;32m                   ^~~~
[0m[1m<source>:246:20: [0m[0;1;35mwarning: [0m[1mnested designators are a C99 extension [-Wc99-designator][0m
  struct SEC c = { .a.j = 5 };
[0;1;32m                   ^~~~
[0m[1m<source>:247:20: [0m[0;1;35mwarning: [0m[1mnested designators are a C99 extension [-Wc99-designator][0m
  struct SED d = { .a.j = 5 };
[0;1;32m                   ^~~~
[0m44 warnings and 16 errors generated.
",-Wall
source\00217.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@t = dso_local global [10 x i8] c""012345678\00"", align 1, !dbg !0
@.str = private unnamed_addr constant [13 x i8] c""data = \22%s\22\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !18 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata i8** %2, metadata !22, metadata !DIExpression()), !dbg !24
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @t, i64 0, i64 0), i8** %2, align 8, !dbg !24
  call void @llvm.dbg.declare(metadata i64* %3, metadata !25, metadata !DIExpression()), !dbg !27
  store i64 4, i64* %3, align 8, !dbg !27
  call void @llvm.dbg.declare(metadata i32* %4, metadata !28, metadata !DIExpression()), !dbg !29
  store i32 5, i32* %4, align 4, !dbg !29
  call void @llvm.dbg.declare(metadata i64* %5, metadata !30, metadata !DIExpression()), !dbg !31
  store i64 12, i64* %5, align 8, !dbg !31
  %6 = load i32, i32* %4, align 4, !dbg !32
  %7 = zext i32 %6 to i64, !dbg !32
  %8 = load i64, i64* %5, align 8, !dbg !33
  %9 = sub i64 %7, %8, !dbg !34
  %10 = load i8*, i8** %2, align 8, !dbg !35
  %11 = load i64, i64* %3, align 8, !dbg !36
  %12 = getelementptr inbounds i8, i8* %10, i64 %11, !dbg !37
  %13 = bitcast i8* %12 to i32*, !dbg !38
  %14 = load i32, i32* %13, align 4, !dbg !39
  %15 = zext i32 %14 to i64, !dbg !39
  %16 = add i64 %15, %9, !dbg !39
  %17 = trunc i64 %16 to i32, !dbg !39
  store i32 %17, i32* %13, align 4, !dbg !39
  %18 = load i8*, i8** %2, align 8, !dbg !40
  %19 = call i32 (i8*, ...) @printf(char const*, ...)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* %18), !dbg !41
  ret i32 0, !dbg !42
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(char const*, ...)(i8*, ...) #2

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     dword ptr [rbp - 4], 0
        movabs  rax, offset t
        mov     qword ptr [rbp - 16], rax
        mov     qword ptr [rbp - 24], 4
        mov     dword ptr [rbp - 28], 5
        mov     qword ptr [rbp - 40], 12
        mov     ecx, dword ptr [rbp - 28]
        mov     eax, ecx
        sub     rax, qword ptr [rbp - 40]
        mov     rdx, qword ptr [rbp - 16]
        mov     rsi, qword ptr [rbp - 24]
        mov     ecx, dword ptr [rdx + rsi]
        mov     edi, ecx
        add     rdi, rax
        mov     dword ptr [rdx + rsi], edi
        mov     rsi, qword ptr [rbp - 16]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf(char const*, ...)
        xor     ecx, ecx
        mov     dword ptr [rbp - 44], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 48
        pop     rbp
        ret
t:
        .asciz  ""012345678""

.L.str:
        .asciz  ""data = \""%s\""\n""

",-Wall
source\00218.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:40:10: [0m[0;1;35mwarning: [0m[1mcomparison of different enumeration types in switch statement ('enum tree_code' and 'cplus_tree_code') [-Wenum-compare-switch][0m
    case AMBIG_CONV: /* This has bit 7 set, which must not be the sign
[0;1;32m         ^~~~~~~~~~
[0m[1m<source>:40:10: [0m[0;1;35mwarning: [0m[1mcase value not in enumerated type 'enum tree_code' [-Wswitch][0m
[1m<source>:48:1: [0m[0;1;35mwarning: [0m[1mnon-void function does not return a value in all control paths [-Wreturn-type][0m
}
[0;1;32m^
[0m[1m<source>:54:23: [0m[0;1;31merror: [0m[1massigning to 'enum tree_code' from incompatible type 'cplus_tree_code'[0m
  convs.common.code = AMBIG_CONV;
[0;1;32m                      ^~~~~~~~~~
[0m3 warnings and 1 error generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:40:10: [0m[0;1;35mwarning: [0m[1mcomparison of different enumeration types in switch statement ('enum tree_code' and 'cplus_tree_code') [-Wenum-compare-switch][0m
    case AMBIG_CONV: /* This has bit 7 set, which must not be the sign
[0;1;32m         ^~~~~~~~~~
[0m[1m<source>:40:10: [0m[0;1;35mwarning: [0m[1mcase value not in enumerated type 'enum tree_code' [-Wswitch][0m
[1m<source>:48:1: [0m[0;1;35mwarning: [0m[1mnon-void function does not return a value in all control paths [-Wreturn-type][0m
}
[0;1;32m^
[0m[1m<source>:54:23: [0m[0;1;31merror: [0m[1massigning to 'enum tree_code' from incompatible type 'cplus_tree_code'[0m
  convs.common.code = AMBIG_CONV;
[0;1;32m                      ^~~~~~~~~~
[0m3 warnings and 1 error generated.
",-Wall
source\00219.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:38:20: [0m[0;1;31merror: [0m[1mdefault initialization of an object of const type 'const int *const'[0m
        const int * const ptr;
[0;1;32m                          ^
[0m[0;32m                              = nullptr
[0m[1m<source>:50:28: [0m[0;1;31merror: [0m[1m'a' cannot be defined in a type specifier[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                  ^
[0m[1m<source>:50:30: [0m[0;1;31merror: [0m[1mexpected class name[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                    ^
[0m[1m<source>:50:33: [0m[0;1;31merror: [0m[1mexpected class name[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                       ^
[0m[1m<source>:50:45: [0m[0;1;31merror: [0m[1mexpected class name[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                                   ^
[0m[1m<source>:50:55: [0m[0;1;31merror: [0m[1mexpected '{' after base class list[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                                             ^
[0m6 errors generated.
",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
<Compilation failed>
# Compiler exited with result code 1
Standard error:
[1m<source>:38:20: [0m[0;1;31merror: [0m[1mdefault initialization of an object of const type 'const int *const'[0m
        const int * const ptr;
[0;1;32m                          ^
[0m[0;32m                              = nullptr
[0m[1m<source>:50:28: [0m[0;1;31merror: [0m[1m'a' cannot be defined in a type specifier[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                  ^
[0m[1m<source>:50:30: [0m[0;1;31merror: [0m[1mexpected class name[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                    ^
[0m[1m<source>:50:33: [0m[0;1;31merror: [0m[1mexpected class name[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                       ^
[0m[1m<source>:50:45: [0m[0;1;31merror: [0m[1mexpected class name[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                                   ^
[0m[1m<source>:50:55: [0m[0;1;31merror: [0m[1mexpected '{' after base class list[0m
        i = _Generic(titi, struct a:1, struct b:2, default:20);
[0;1;32m                                                             ^
[0m6 errors generated.
",-Wall
source\00220.c,clang10,"# Compilation provided by Compiler Explorer at https://godbolt.org/
@__const.main.s = private unnamed_addr constant [35 x i32] [i32 104, i32 101, i32 108, i32 108, i32 111, i32 36, i32 36, i32 228, i32 189, i32 160, i32 229, i32 165, i32 189, i32 194, i32 162, i32 194, i32 162, i32 228, i32 184, i32 8211, i32 231, i32 8226, i32 338, i32 226, i32 8218, i32 172, i32 226, i32 8218, i32 172, i32 119, i32 111, i32 114, i32 108, i32 100, i32 0], align 16
@.str = private unnamed_addr constant [6 x i8] c""%04X \00"", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c""\0A\00"", align 1

define dso_local i32 @main() #0 !dbg !9 {
  %1 = alloca i32, align 4
  %2 = alloca [35 x i32], align 16
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  call void @llvm.dbg.declare(metadata [35 x i32]* %2, metadata !14, metadata !DIExpression()), !dbg !19
  %4 = bitcast [35 x i32]* %2 to i8*, !dbg !19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 16 bitcast ([35 x i32]* @__const.main.s to i8*), i64 140, i1 false), !dbg !19
  call void @llvm.dbg.declare(metadata i32** %3, metadata !20, metadata !DIExpression()), !dbg !22
  %5 = getelementptr inbounds [35 x i32], [35 x i32]* %2, i64 0, i64 0, !dbg !23
  store i32* %5, i32** %3, align 8, !dbg !25
  br label %6, !dbg !26

6:
  %7 = load i32*, i32** %3, align 8, !dbg !27
  %8 = load i32, i32* %7, align 4, !dbg !29
  %9 = icmp ne i32 %8, 0, !dbg !29
  br i1 %9, label %10, label %17, !dbg !30

10:
  %11 = load i32*, i32** %3, align 8, !dbg !31
  %12 = load i32, i32* %11, align 4, !dbg !32
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 %12), !dbg !33
  br label %14, !dbg !33

14:
  %15 = load i32*, i32** %3, align 8, !dbg !34
  %16 = getelementptr inbounds i32, i32* %15, i32 1, !dbg !34
  store i32* %16, i32** %3, align 8, !dbg !34
  br label %6, !dbg !35

17:
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !38
  ret i32 0, !dbg !39
}

declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @printf(i8*, ...) #3

attributes #0 = { noinline norecurse optnone uwtable ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""min-legal-vector-width""=""0"" ""no-infs-fp-math""=""false"" ""no-jump-tables""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { ""correctly-rounded-divide-sqrt-fp-math""=""false"" ""disable-tail-calls""=""false"" ""frame-pointer""=""all"" ""less-precise-fpmad""=""false"" ""no-infs-fp-math""=""false"" ""no-nans-fp-math""=""false"" ""no-signed-zeros-fp-math""=""false"" ""no-trapping-math""=""false"" ""stack-protector-buffer-size""=""8"" ""target-cpu""=""x86-64"" ""target-features""=""+cx8,+fxsr,+mmx,+sse,+sse2,+x87"" ""unsafe-fp-math""=""false"" ""use-soft-float""=""false"" }

",-emit-llvm,"# Compilation provided by Compiler Explorer at https://godbolt.org/
main:                                   # @main
        push    rbp
        mov     rbp, rsp
        sub     rsp, 176
        lea     rax, [rbp - 144]
        movabs  rcx, offset .L__const.main.s
        mov     dword ptr [rbp - 4], 0
        mov     rdx, rax
        mov     rdi, rdx
        mov     rsi, rcx
        mov     edx, 140
        mov     qword ptr [rbp - 160], rax # 8-byte Spill
        call    memcpy
        mov     rax, qword ptr [rbp - 160] # 8-byte Reload
        mov     qword ptr [rbp - 152], rax
.LBB0_1:                                # =>This Inner Loop Header: Depth=1
        mov     rax, qword ptr [rbp - 152]
        cmp     dword ptr [rax], 0
        je      .LBB0_4
        mov     rax, qword ptr [rbp - 152]
        mov     esi, dword ptr [rax]
        movabs  rdi, offset .L.str
        mov     al, 0
        call    printf
        mov     rax, qword ptr [rbp - 152]
        add     rax, 4
        mov     qword ptr [rbp - 152], rax
        jmp     .LBB0_1
.LBB0_4:
        movabs  rdi, offset .L.str.1
        mov     al, 0
        call    printf
        xor     ecx, ecx
        mov     dword ptr [rbp - 164], eax # 4-byte Spill
        mov     eax, ecx
        add     rsp, 176
        pop     rbp
        ret
.L__const.main.s:
        .long   104                     # 0x68
        .long   101                     # 0x65
        .long   108                     # 0x6c
        .long   108                     # 0x6c
        .long   111                     # 0x6f
        .long   36                      # 0x24
        .long   36                      # 0x24
        .long   228                     # 0xe4
        .long   189                     # 0xbd
        .long   160                     # 0xa0
        .long   229                     # 0xe5
        .long   165                     # 0xa5
        .long   189                     # 0xbd
        .long   194                     # 0xc2
        .long   162                     # 0xa2
        .long   194                     # 0xc2
        .long   162                     # 0xa2
        .long   228                     # 0xe4
        .long   184                     # 0xb8
        .long   8211                    # 0x2013
        .long   231                     # 0xe7
        .long   8226                    # 0x2022
        .long   338                     # 0x152
        .long   226                     # 0xe2
        .long   8218                    # 0x201a
        .long   172                     # 0xac
        .long   226                     # 0xe2
        .long   8218                    # 0x201a
        .long   172                     # 0xac
        .long   119                     # 0x77
        .long   111                     # 0x6f
        .long   114                     # 0x72
        .long   108                     # 0x6c
        .long   100                     # 0x64
        .long   0                       # 0x0

.L.str:
        .asciz  ""%04X ""

.L.str.1:
        .asciz  ""\n""

",-Wall
